bson.BSON.decode	A										<section class="prog_container"><pre><code><code>decode</code>(<em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>)</pre></code><p><p>Decode this BSON data.</p>\n<p>By default, returns a BSON document represented as a Python\n<code>dict</code>. To use a different <code>MutableMapping</code> class,\nconfigure a <code>CodecOptions</code>:</p>\n<pre>&gt;&gt;&gt; import collections  # From Python standard library.\n&gt;&gt;&gt; import bson\n&gt;&gt;&gt; from bson.codec_options import CodecOptions\n&gt;&gt;&gt; data = bson.BSON.encode({'a': 1})\n&gt;&gt;&gt; decoded_doc = bson.BSON.decode(data)\n&lt;type 'dict'&gt;\n&gt;&gt;&gt; options = CodecOptions(document_class=collections.OrderedDict)\n&gt;&gt;&gt; decoded_doc = bson.BSON.decode(data, codec_options=options)\n&gt;&gt;&gt; type(decoded_doc)\n&lt;class 'collections.OrderedDict'&gt;\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>.</li></p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.BSON.decode
bson.BSON.encode	A										<section class="prog_container"><pre><code><em>classmethod </em><code>encode</code>(<em>document</em>, <em>check_keys=False</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>)</pre></code><p><p>Encode a document to a new <code>BSON</code> instance.</p>\n<p>A document can be any mapping type (like <code>dict</code>).</p>\n<p>Raises <code>TypeError</code> if <code>document</code> is not a mapping type,\nor contains keys that are not instances of\n<code>basestring</code> (<code>str</code> in python 3). Raises\n<code>InvalidDocument</code> if <code>document</code> cannot be\nconverted to <code>BSON</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>document</code>: mapping type representing a document</li>\n<li><code>check_keys</code> (optional): check if keys start with ‘$’ or\ncontain ‘.’, raising <code>InvalidDocument</code> in\neither case</li>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>.</li></p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.BSON.encode
bson.BSON	A										<section class="prog_container"><pre><code><em>class </em>bson.BSON</pre></code><p><p>BSON (Binary JSON) data.</p></p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.BSON
bson.decode_all	A										<section class="prog_container"><pre><code>bson.decode_all(<em>data</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>)</pre></code><p><p>Decode BSON data to multiple documents.</p>\n<p><code>data</code> must be a string of concatenated, valid, BSON-encoded\ndocuments.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>data</code>: BSON data</li>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>.</li></p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.decode_all
bson.decode_file_iter	A										<section class="prog_container"><pre><code>bson.decode_file_iter(<em>file_obj</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>)</pre></code><p><p>Decode bson data from a file to multiple documents as a generator.</p>\n<p>Works similarly to the decode_all function, but reads from the file object\nin chunks and parses bson in chunks, yielding one document at a time.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>file_obj</code>: A file object containing BSON data.</li>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>.</li></p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.decode_file_iter
bson.decode_iter	A										<section class="prog_container"><pre><code>bson.decode_iter(<em>data</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>)</pre></code><p><p>Decode BSON data to multiple documents as a generator.</p>\n<p>Works similarly to the decode_all function, but yields one document at a\ntime.</p>\n<p><code>data</code> must be a string of concatenated, valid, BSON-encoded\ndocuments.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>data</code>: BSON data</li>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>.</li></p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.decode_iter
bson.gen_list_name	A										<section class="prog_container"><pre><code>bson.gen_list_name()</pre></code><p><p>Generate “keys” for encoded lists in the sequence\nb”0”, b”1”, b”2”, ...</p>\n<p>The first 1000 keys are returned from a pre-built cache. All\nsubsequent keys are generated on the fly.</p></p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.gen_list_name
bson.has_c	A										<section class="prog_container"><pre><code>bson.has_c()</pre></code><p><p>Is the C extension installed?</p></p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.has_c
bson.is_valid	A										<section class="prog_container"><pre><code>bson.is_valid(<em>bson</em>)</pre></code><p><p>Check that the given string represents valid <code>BSON</code> data.</p>\n<p>Raises <code>TypeError</code> if <code>bson</code> is not an instance of\n<code>str</code> (<code>bytes</code> in python 3). Returns <code>True</code>\nif <code>bson</code> is valid <code>BSON</code>, <code>False</code> otherwise.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>bson</code>: the data to be validated</li></p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.is_valid
bson.binary.Binary.subtype	A										<section class="prog_container"><pre><code><code>subtype</code></pre></code><p><p>Subtype of this binary data.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.Binary.subtype
bson.binary.Binary	A										<section class="prog_container"><pre><code><em>class </em>bson.binary.Binary(<em>data</em>, <em>subtype=BINARY_SUBTYPE</em>)</pre></code><p><p>Bases: <code>str</code></p>\n<p>Representation of BSON binary data.</p>\n<p>This is necessary because we want to represent Python strings as\nthe BSON string type. We need to wrap binary data so we can tell\nthe difference between what should be considered binary data and\nwhat should be considered a string when we encode to BSON.</p>\n<p>Raises TypeError if <code>data</code> is not an instance of <code>str</code>\n(<code>bytes</code> in python 3) or <code>subtype</code> is not an instance of\n<code>int</code>. Raises ValueError if <code>subtype</code> is not in [0, 256).</p>\n<span class="prog__sub">Parameters</span>\n<li><code>data</code>: the binary data to represent</li>\n<li><code>subtype</code> (optional): the binary subtype\nto use</li></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.Binary
bson.binary.UUIDLegacy.uuid	A										<section class="prog_container"><pre><code><code>uuid</code></pre></code><p><p>UUID instance wrapped by this UUIDLegacy instance.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.UUIDLegacy.uuid
bson.binary.UUIDLegacy	A										<section class="prog_container"><pre><code><em>class </em>bson.binary.UUIDLegacy(<em>obj</em>)</pre></code><p><p>Bases: <code>bson.binary.Binary</code></p>\n<p>UUID wrapper to support working with UUIDs stored as PYTHON_LEGACY.</p>\n<pre>&gt;&gt;&gt; import uuid\n&gt;&gt;&gt; from bson.binary import Binary, UUIDLegacy, STANDARD\n&gt;&gt;&gt; from bson.codec_options import CodecOptions\n&gt;&gt;&gt; my_uuid = uuid.uuid4()\n&gt;&gt;&gt; coll = db.get_collection('test',\n...                          CodecOptions(uuid_representation=STANDARD))\n&gt;&gt;&gt; coll.insert_one({'uuid': Binary(my_uuid.bytes, 3)}).inserted_id\nObjectId('...')\n&gt;&gt;&gt; coll.find({'uuid': my_uuid}).count()\n0\n&gt;&gt;&gt; coll.find({'uuid': UUIDLegacy(my_uuid)}).count()\n1\n&gt;&gt;&gt; coll.find({'uuid': UUIDLegacy(my_uuid)})[0]['uuid']\nUUID('...')\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Convert from subtype 3 to subtype 4\n&gt;&gt;&gt; doc = coll.find_one({'uuid': UUIDLegacy(my_uuid)})\n&gt;&gt;&gt; coll.replace_one({"_id": doc["_id"]}, doc).matched_count\n1\n&gt;&gt;&gt; coll.find({'uuid': UUIDLegacy(my_uuid)}).count()\n0\n&gt;&gt;&gt; coll.find({'uuid': {'$in': [UUIDLegacy(my_uuid), my_uuid]}}).count()\n1\n&gt;&gt;&gt; coll.find_one({'uuid': my_uuid})['uuid']\nUUID('...')\n</pre>\n<p>Raises TypeError if <code>obj</code> is not an instance of <code>UUID</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>obj</code>: An instance of <code>UUID</code>.</li></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.UUIDLegacy
bson.binary.BINARY_SUBTYPE	A										<section class="prog_container"><pre><code>bson.binary.BINARY_SUBTYPE<em> = 0</em></pre></code><p><p>BSON binary subtype for binary data.</p>\n<p>This is the default subtype for binary data.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.BINARY_SUBTYPE
bson.binary.FUNCTION_SUBTYPE	A										<section class="prog_container"><pre><code>bson.binary.FUNCTION_SUBTYPE<em> = 1</em></pre></code><p><p>BSON binary subtype for functions.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.FUNCTION_SUBTYPE
bson.binary.OLD_BINARY_SUBTYPE	A										<section class="prog_container"><pre><code>bson.binary.OLD_BINARY_SUBTYPE<em> = 2</em></pre></code><p><p>Old BSON binary subtype for binary data.</p>\n<p>This is the old default subtype, the current\ndefault is <code>BINARY_SUBTYPE</code>.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.OLD_BINARY_SUBTYPE
bson.binary.OLD_UUID_SUBTYPE	A										<section class="prog_container"><pre><code>bson.binary.OLD_UUID_SUBTYPE<em> = 3</em></pre></code><p><p>Old BSON binary subtype for a UUID.</p>\n<p><code>uuid.UUID</code> instances will automatically be encoded\nby <code>bson</code> using this subtype.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.OLD_UUID_SUBTYPE
bson.binary.UUID_SUBTYPE	A										<section class="prog_container"><pre><code>bson.binary.UUID_SUBTYPE<em> = 4</em></pre></code><p><p>BSON binary subtype for a UUID.</p>\n<p>This is the new BSON binary subtype for UUIDs. The\ncurrent default is <code>OLD_UUID_SUBTYPE</code> but will\nchange to this in a future release.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.UUID_SUBTYPE
bson.binary.STANDARD	A										<section class="prog_container"><pre><code>bson.binary.STANDARD<em> = 4</em></pre></code><p><p>The standard UUID representation.</p>\n<p><code>uuid.UUID</code> instances will automatically be encoded to\nand decoded from BSON binary, using RFC-4122 byte order with\nbinary subtype <code>UUID_SUBTYPE</code>.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.STANDARD
bson.binary.PYTHON_LEGACY	A										<section class="prog_container"><pre><code>bson.binary.PYTHON_LEGACY<em> = 3</em></pre></code><p><p>The Python legacy UUID representation.</p>\n<p><code>uuid.UUID</code> instances will automatically be encoded to\nand decoded from BSON binary, using RFC-4122 byte order with\nbinary subtype <code>OLD_UUID_SUBTYPE</code>.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.PYTHON_LEGACY
bson.binary.JAVA_LEGACY	A										<section class="prog_container"><pre><code>bson.binary.JAVA_LEGACY<em> = 5</em></pre></code><p><p>The Java legacy UUID representation.</p>\n<p><code>uuid.UUID</code> instances will automatically be encoded to\nand decoded from BSON binary, using the Java driver’s legacy\nbyte order with binary subtype <code>OLD_UUID_SUBTYPE</code>.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.JAVA_LEGACY
bson.binary.CSHARP_LEGACY	A										<section class="prog_container"><pre><code>bson.binary.CSHARP_LEGACY<em> = 6</em></pre></code><p><p>The C#/.net legacy UUID representation.</p>\n<p><code>uuid.UUID</code> instances will automatically be encoded to\nand decoded from BSON binary, using the C# driver’s legacy\nbyte order and binary subtype <code>OLD_UUID_SUBTYPE</code>.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.CSHARP_LEGACY
bson.binary.MD5_SUBTYPE	A										<section class="prog_container"><pre><code>bson.binary.MD5_SUBTYPE<em> = 5</em></pre></code><p><p>BSON binary subtype for an MD5 hash.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.MD5_SUBTYPE
bson.binary.USER_DEFINED_SUBTYPE	A										<section class="prog_container"><pre><code>bson.binary.USER_DEFINED_SUBTYPE<em> = 128</em></pre></code><p><p>BSON binary subtype for any user defined structure.</p></p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.USER_DEFINED_SUBTYPE
bson.code.Code.scope	A										<section class="prog_container"><pre><code><code>scope</code></pre></code><p><p>Scope dictionary for this instance or <code>None</code>.</p></p></section>	http://api.mongodb.com/python/current/api/bson/code.html#bson.code.Code.scope
bson.code.Code	A										<section class="prog_container"><pre><code><em>class </em>bson.code.Code(<em>code</em>, <em>scope=None</em>, <em>**kwargs</em>)</pre></code><p><p>Bases: <code>str</code></p>\n<p>BSON’s JavaScript code type.</p>\n<p>Raises <code>TypeError</code> if <code>code</code> is not an instance of\n<code>basestring</code> (<code>str</code> in python 3) or <code>scope</code>\nis not <code>None</code> or an instance of <code>dict</code>.</p>\n<p>Scope variables can be set by passing a dictionary as the <code>scope</code>\nargument or by using keyword arguments. If a variable is set as a\nkeyword argument it will override any setting for that variable in\nthe <code>scope</code> dictionary.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>code</code>: A string containing JavaScript code to be evaluated or another\ninstance of Code. In the latter case, the scope of <code>code</code> becomes this\nCode’s <code>scope</code>.</li>\n<li><code>scope</code> (optional): dictionary representing the scope in which\n<code>code</code> should be evaluated - a mapping from identifiers (as\nstrings) to values. Defaults to <code>None</code>. This is applied after any\nscope associated with a given <code>code</code> above.</li>\n<li><code>**kwargs</code> (optional): scope variables can also be passed as\nkeyword arguments. These are applied after <code>scope</code> and <code>code</code>.</li></p></section>	http://api.mongodb.com/python/current/api/bson/code.html#bson.code.Code
bson.codec_options.CodecOptions	A										<section class="prog_container"><pre><code><em>class </em>bson.codec_options.CodecOptions</pre></code><p><p>Encapsulates BSON options used in CRUD operations.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>document_class</code>: BSON documents returned in queries will be decoded\nto an instance of this class. Must be a subclass of\n<code>MutableMapping</code>. Defaults to <code>dict</code>.</li>\n<li><code>tz_aware</code>: If <code>True</code>, BSON datetimes will be decoded to timezone\naware instances of <code>datetime</code>. Otherwise they will be\nnaive. Defaults to <code>False</code>.</li>\n<li><code>uuid_representation</code>: The BSON representation to use when encoding\nand decoding instances of <code>UUID</code>. Defaults to\n<code>PYTHON_LEGACY</code>.</li>\n<li><code>unicode_decode_error_handler</code>: The error handler to use when decoding\nan invalid BSON string. Valid options include ‘strict’, ‘replace’, and\n‘ignore’. Defaults to ‘strict’.</li>\n<li><code>tzinfo</code>: A <code>tzinfo</code> subclass that specifies the\ntimezone to/from which <code>datetime</code> objects should be\nencoded/decoded.</li></p></section>	http://api.mongodb.com/python/current/api/bson/codec_options.html#bson.codec_options.CodecOptions
bson.dbref.DBRef.as_doc	A										<section class="prog_container"><pre><code><code>as_doc</code>()</pre></code><p><p>Get the SON document representation of this DBRef.</p>\n<p>Generally not needed by application developers</p></p></section>	http://api.mongodb.com/python/current/api/bson/dbref.html#bson.dbref.DBRef.as_doc
bson.dbref.DBRef.collection	A										<section class="prog_container"><pre><code><code>collection</code></pre></code><p><p>Get the name of this DBRef’s collection as unicode.</p></p></section>	http://api.mongodb.com/python/current/api/bson/dbref.html#bson.dbref.DBRef.collection
bson.dbref.DBRef.database	A										<section class="prog_container"><pre><code><code>database</code></pre></code><p><p>Get the name of this DBRef’s database.</p>\n<p>Returns None if this DBRef doesn’t specify a database.</p></p></section>	http://api.mongodb.com/python/current/api/bson/dbref.html#bson.dbref.DBRef.database
bson.dbref.DBRef.id	A										<section class="prog_container"><pre><code><code>id</code></pre></code><p><p>Get this DBRef’s _id.</p></p></section>	http://api.mongodb.com/python/current/api/bson/dbref.html#bson.dbref.DBRef.id
bson.dbref.DBRef	A										<section class="prog_container"><pre><code><em>class </em>bson.dbref.DBRef(<em>collection</em>, <em>id</em>, <em>database=None</em>, <em>_extra={}</em>, <em>**kwargs</em>)</pre></code><p><p>Initialize a new <code>DBRef</code>.</p>\n<p>Raises <code>TypeError</code> if <code>collection</code> or <code>database</code> is not\nan instance of <code>basestring</code> (<code>str</code> in python 3).\n<code>database</code> is optional and allows references to documents to work\nacross databases. Any additional keyword arguments will create\nadditional fields in the resultant embedded document.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>collection</code>: name of the collection the document is stored in</li>\n<li><code>id</code>: the value of the document’s <code>"_id"</code> field</li>\n<li><code>database</code> (optional): name of the database to reference</li>\n<li><code>**kwargs</code> (optional): additional keyword arguments will\ncreate additional, custom fields</li></p></section>	http://api.mongodb.com/python/current/api/bson/dbref.html#bson.dbref.DBRef
bson.decimal128.Decimal128.to_decimal	A										<section class="prog_container"><pre><code><code>to_decimal</code>()</pre></code><p><p>Returns an instance of <code>decimal.Decimal</code> for this\n<code>Decimal128</code>.</p></p></section>	http://api.mongodb.com/python/current/api/bson/decimal128.html#bson.decimal128.Decimal128.to_decimal
bson.decimal128.Decimal128.from_bid	A										<section class="prog_container"><pre><code><em>classmethod </em><code>from_bid</code>(<em>value</em>)</pre></code><p><p>Create an instance of <code>Decimal128</code> from Binary Integer\nDecimal string.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>value</code>: 16 byte string (128-bit IEEE 754-2008 decimal floating\npoint in Binary Integer Decimal (BID) format).</li></p></section>	http://api.mongodb.com/python/current/api/bson/decimal128.html#bson.decimal128.Decimal128.from_bid
bson.decimal128.Decimal128.bid	A										<section class="prog_container"><pre><code><code>bid</code></pre></code><p><p>The Binary Integer Decimal (BID) encoding of this instance.</p></p></section>	http://api.mongodb.com/python/current/api/bson/decimal128.html#bson.decimal128.Decimal128.bid
bson.decimal128.Decimal128	A										<section class="prog_container"><pre><code><em>class </em>bson.decimal128.Decimal128(<em>value</em>)</pre></code><p><p>BSON Decimal128 type:</p>\n<pre>&gt;&gt;&gt; Decimal128(Decimal("0.0005"))\nDecimal128('0.0005')\n&gt;&gt;&gt; Decimal128("0.0005")\nDecimal128('0.0005')\n&gt;&gt;&gt; Decimal128((3474527112516337664, 5))\nDecimal128('0.0005')\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>value</code>: An instance of <code>decimal.Decimal</code>, string, or tuple of\n(high bits, low bits) from Binary Integer Decimal (BID) format.</li>\n<p><code>Decimal128</code> uses an instance of <code>decimal.Context</code>\nconfigured for IEEE-754 Decimal128 when validating parameters.\nSignals like <code>decimal.InvalidOperation</code>, <code>decimal.Inexact</code>,\nand <code>decimal.Overflow</code> are trapped and raised as exceptions:</p>\n<pre>&gt;&gt;&gt; Decimal128(".13.1")\nTraceback (most recent call last):\n  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\n  ...\ndecimal.InvalidOperation: [&lt;class 'decimal.ConversionSyntax'&gt;]\n&gt;&gt;&gt;\n&gt;&gt;&gt; Decimal128("1E-6177")\nTraceback (most recent call last):\n  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\n  ...\ndecimal.Inexact: [&lt;class 'decimal.Inexact'&gt;]\n&gt;&gt;&gt;\n&gt;&gt;&gt; Decimal128("1E6145")\nTraceback (most recent call last):\n  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\n  ...\ndecimal.Overflow: [&lt;class 'decimal.Overflow'&gt;, &lt;class 'decimal.Rounded'&gt;]\n</pre>\n<p>To ensure the result of a calculation can always be stored as BSON\nDecimal128 use the context returned by\n<code>create_decimal128_context()</code>:</p>\n<pre>&gt;&gt;&gt; import decimal\n&gt;&gt;&gt; decimal128_ctx = create_decimal128_context()\n&gt;&gt;&gt; with decimal.localcontext(decimal128_ctx) as ctx:\n...     Decimal128(ctx.create_decimal(".13.3"))\n...\nDecimal128('NaN')\n&gt;&gt;&gt;\n&gt;&gt;&gt; with decimal.localcontext(decimal128_ctx) as ctx:\n...     Decimal128(ctx.create_decimal("1E-6177"))\n...\nDecimal128('0E-6176')\n&gt;&gt;&gt;\n&gt;&gt;&gt; with decimal.localcontext(DECIMAL128_CTX) as ctx:\n...     Decimal128(ctx.create_decimal("1E6145"))\n...\nDecimal128('Infinity')\n</pre>\n<p>To match the behavior of MongoDB’s Decimal128 implementation\nstr(Decimal(value)) may not match str(Decimal128(value)) for NaN values:</p>\n<pre>&gt;&gt;&gt; Decimal128(Decimal('NaN'))\nDecimal128('NaN')\n&gt;&gt;&gt; Decimal128(Decimal('-NaN'))\nDecimal128('NaN')\n&gt;&gt;&gt; Decimal128(Decimal('sNaN'))\nDecimal128('NaN')\n&gt;&gt;&gt; Decimal128(Decimal('-sNaN'))\nDecimal128('NaN')\n</pre>\n<p>However, <code>to_decimal()</code> will return the exact value:</p>\n<pre>&gt;&gt;&gt; Decimal128(Decimal('NaN')).to_decimal()\nDecimal('NaN')\n&gt;&gt;&gt; Decimal128(Decimal('-NaN')).to_decimal()\nDecimal('-NaN')\n&gt;&gt;&gt; Decimal128(Decimal('sNaN')).to_decimal()\nDecimal('sNaN')\n&gt;&gt;&gt; Decimal128(Decimal('-sNaN')).to_decimal()\nDecimal('-sNaN')\n</pre>\n<p>Two instances of <code>Decimal128</code> compare equal if their Binary\nInteger Decimal encodings are equal:</p>\n<pre>&gt;&gt;&gt; Decimal128('NaN') == Decimal128('NaN')\nTrue\n&gt;&gt;&gt; Decimal128('NaN').bid == Decimal128('NaN').bid\nTrue\n</pre>\n<p>This differs from <code>decimal.Decimal</code> comparisons for NaN:</p>\n<pre>&gt;&gt;&gt; Decimal('NaN') == Decimal('NaN')\nFalse\n</pre></p></section>	http://api.mongodb.com/python/current/api/bson/decimal128.html#bson.decimal128.Decimal128
bson.decimal128.create_decimal128_context	A										<section class="prog_container"><pre><code>bson.decimal128.create_decimal128_context()</pre></code><p><p>Returns an instance of <code>decimal.Context</code> appropriate\nfor working with IEEE-754 128-bit decimal floating point values.</p></p></section>	http://api.mongodb.com/python/current/api/bson/decimal128.html#bson.decimal128.create_decimal128_context
bson.errors.BSONError	A										<section class="prog_container"><pre><code><em>exception </em>bson.errors.BSONError</pre></code><p><p>Base class for all BSON exceptions.</p></p></section>	http://api.mongodb.com/python/current/api/bson/errors.html#bson.errors.BSONError
bson.errors.InvalidBSON	A										<section class="prog_container"><pre><code><em>exception </em>bson.errors.InvalidBSON</pre></code><p><p>Raised when trying to create a BSON object from invalid data.</p></p></section>	http://api.mongodb.com/python/current/api/bson/errors.html#bson.errors.InvalidBSON
bson.errors.InvalidDocument	A										<section class="prog_container"><pre><code><em>exception </em>bson.errors.InvalidDocument</pre></code><p><p>Raised when trying to create a BSON object from an invalid document.</p></p></section>	http://api.mongodb.com/python/current/api/bson/errors.html#bson.errors.InvalidDocument
bson.errors.InvalidId	A										<section class="prog_container"><pre><code><em>exception </em>bson.errors.InvalidId</pre></code><p><p>Raised when trying to create an ObjectId from invalid data.</p></p></section>	http://api.mongodb.com/python/current/api/bson/errors.html#bson.errors.InvalidId
bson.errors.InvalidStringData	A										<section class="prog_container"><pre><code><em>exception </em>bson.errors.InvalidStringData</pre></code><p><p>Raised when trying to encode a string containing non-UTF8 data.</p></p></section>	http://api.mongodb.com/python/current/api/bson/errors.html#bson.errors.InvalidStringData
bson.int64.Int64	A										<section class="prog_container"><pre><code><em>class </em>bson.int64.Int64</pre></code><p><p>Representation of the BSON int64 type.</p>\n<p>This is necessary because every integral number is an <code>int</code> in\nPython 3. Small integral numbers are encoded to BSON int32 by default,\nbut Int64 numbers will always be encoded to BSON int64.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>value</code>: the numeric value to represent</li></p></section>	http://api.mongodb.com/python/current/api/bson/int64.html#bson.int64.Int64
bson.json_util.DatetimeRepresentation.LEGACY	A										<section class="prog_container"><pre><code><code>LEGACY</code><em> = 0</em></pre></code><p><p>Legacy MongoDB Extended JSON datetime representation.</p>\n<p><code>datetime.datetime</code> instances will be encoded to JSON in the\nformat <code>{“$date”: &lt;dateAsMilliseconds&gt;}</code>, where <code>dateAsMilliseconds</code> is\na 64-bit signed integer giving the number of milliseconds since the Unix\nepoch UTC. This was the default encoding before PyMongo version 3.4.</p></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.DatetimeRepresentation.LEGACY
bson.json_util.DatetimeRepresentation.NUMBERLONG	A										<section class="prog_container"><pre><code><code>NUMBERLONG</code><em> = 1</em></pre></code><p><p>NumberLong datetime representation.</p>\n<p><code>datetime.datetime</code> instances will be encoded to JSON in the\nformat <code>{“$date”: {“$numberLong”: “&lt;dateAsMilliseconds&gt;”}}</code>,\nwhere <code>dateAsMilliseconds</code> is the string representation of a 64-bit signed\ninteger giving the number of milliseconds since the Unix epoch UTC.</p></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.DatetimeRepresentation.NUMBERLONG
bson.json_util.DatetimeRepresentation.ISO8601	A										<section class="prog_container"><pre><code><code>ISO8601</code><em> = 2</em></pre></code><p><p>ISO-8601 datetime representation.</p>\n<p><code>datetime.datetime</code> instances greater than or equal to the Unix\nepoch UTC will be encoded to JSON in the format <code>{“$date”: “&lt;ISO-8601&gt;”}</code>.\n<code>datetime.datetime</code> instances before the Unix epoch UTC will be\nencoded as if the datetime representation is\n<code>NUMBERLONG</code>.</p></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.DatetimeRepresentation.ISO8601
bson.json_util.DatetimeRepresentation	A										<section class="prog_container"><pre><code><em>class </em>bson.json_util.DatetimeRepresentation</pre></code><p></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.DatetimeRepresentation
bson.json_util.JSONOptions	A										<section class="prog_container"><pre><code><em>class </em>bson.json_util.JSONOptions</pre></code><p><p>Encapsulates JSON options for <code>dumps()</code> and <code>loads()</code>.</p>\n<p>Raises <code>ConfigurationError</code> on Python 2.6 if\nsimplejson is not installed\nand document_class is not the default (<code>dict</code>).</p>\n<span class="prog__sub">Parameters</span>\n<li><code>strict_number_long</code>: If <code>True</code>, <code>Int64</code> objects\nare encoded to MongoDB Extended JSON’s <em>Strict mode</em> type\n<code>NumberLong</code>, ie <code>'{"$numberLong": "&lt;number&gt;" }'</code>. Otherwise they\nwill be encoded as an <code>int</code>. Defaults to <code>False</code>.</li>\n<li><code>datetime_representation</code>: The representation to use when encoding\ninstances of <code>datetime.datetime</code>. Defaults to\n<code>LEGACY</code>.</li>\n<li><code>strict_uuid</code>: If <code>True</code>, <code>uuid.UUID</code> object are encoded to\nMongoDB Extended JSON’s <em>Strict mode</em> type <code>Binary</code>. Otherwise it\nwill be encoded as <code>'{"$uuid": "&lt;hex&gt;" }'</code>. Defaults to <code>False</code>.</li>\n<li><code>document_class</code>: BSON documents returned by <code>loads()</code> will be\ndecoded to an instance of this class. Must be a subclass of\n<code>collections.MutableMapping</code>. Defaults to <code>dict</code>.</li>\n<li><code>uuid_representation</code>: The BSON representation to use when encoding\nand decoding instances of <code>uuid.UUID</code>. Defaults to\n<code>PYTHON_LEGACY</code>.</li>\n<li><code>tz_aware</code>: If <code>True</code>, MongoDB Extended JSON’s <em>Strict mode</em> type\n<code>Date</code> will be decoded to timezone aware instances of\n<code>datetime.datetime</code>. Otherwise they will be naive. Defaults\nto <code>True</code>.</li>\n<li><code>tzinfo</code>: A <code>datetime.tzinfo</code> subclass that specifies the\ntimezone from which <code>datetime</code> objects should be\ndecoded. Defaults to <code>utc</code>.</li>\n<li><code>args</code>: arguments to <code>CodecOptions</code></li>\n<li><code>kwargs</code>: arguments to <code>CodecOptions</code></li></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.JSONOptions
bson.json_util.dumps	A										<section class="prog_container"><pre><code>bson.json_util.dumps(<em>obj</em>, <em>*args</em>, <em>**kwargs</em>)</pre></code><p><p>Helper function that wraps <code>json.dumps()</code>.</p>\n<p>Recursive function that handles all BSON types including\n<code>Binary</code> and <code>Code</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>json_options</code>: A <code>JSONOptions</code> instance used to modify the\nencoding of MongoDB Extended JSON types. Defaults to\n<code>DEFAULT_JSON_OPTIONS</code>.</li></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.dumps
bson.json_util.loads	A										<section class="prog_container"><pre><code>bson.json_util.loads(<em>s</em>, <em>*args</em>, <em>**kwargs</em>)</pre></code><p><p>Helper function that wraps <code>json.loads()</code>.</p>\n<p>Automatically passes the object_hook for BSON type conversion.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>json_options</code>: A <code>JSONOptions</code> instance used to modify the\ndecoding of MongoDB Extended JSON types. Defaults to\n<code>DEFAULT_JSON_OPTIONS</code>.</li></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.loads
bson.json_util.object_pairs_hook	A										<section class="prog_container"><pre><code>bson.json_util.object_pairs_hook(<em>pairs</em>, <em>json_options=JSONOptions(strict_number_long=False</em>, <em>datetime_representation=0</em>, <em>strict_uuid=False</em>, <em>document_class=dict</em>, <em>tz_aware=True</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=&lt;bson.tz_util.FixedOffset object at 0x7feb78b44e50&gt;)</em>)</pre></code><p></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.object_pairs_hook
bson.json_util.object_hook	A										<section class="prog_container"><pre><code>bson.json_util.object_hook(<em>dct</em>, <em>json_options=JSONOptions(strict_number_long=False</em>, <em>datetime_representation=0</em>, <em>strict_uuid=False</em>, <em>document_class=dict</em>, <em>tz_aware=True</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=&lt;bson.tz_util.FixedOffset object at 0x7feb78b44e50&gt;)</em>)</pre></code><p></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.object_hook
bson.json_util.default	A										<section class="prog_container"><pre><code>bson.json_util.default(<em>obj</em>, <em>json_options=JSONOptions(strict_number_long=False</em>, <em>datetime_representation=0</em>, <em>strict_uuid=False</em>, <em>document_class=dict</em>, <em>tz_aware=True</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=&lt;bson.tz_util.FixedOffset object at 0x7feb78b44e50&gt;)</em>)</pre></code><p></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.default
bson.json_util.DEFAULT_JSON_OPTIONS	A										<section class="prog_container"><pre><code>bson.json_util.DEFAULT_JSON_OPTIONS<em> = JSONOptions(strict_number_long=False, datetime_representation=0, strict_uuid=False, document_class=dict, tz_aware=True, uuid_representation=PYTHON_LEGACY, unicode_decode_error_handler='strict', tzinfo=&lt;bson.tz_util.FixedOffset object at 0x7feb78b44e50&gt;)</em></pre></code><p><p>The default <code>JSONOptions</code> for JSON encoding/decoding.</p></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.DEFAULT_JSON_OPTIONS
bson.json_util.STRICT_JSON_OPTIONS	A										<section class="prog_container"><pre><code>bson.json_util.STRICT_JSON_OPTIONS<em> = JSONOptions(strict_number_long=True, datetime_representation=2, strict_uuid=True, document_class=dict, tz_aware=True, uuid_representation=PYTHON_LEGACY, unicode_decode_error_handler='strict', tzinfo=&lt;bson.tz_util.FixedOffset object at 0x7feb78b44e50&gt;)</em></pre></code><p><p><code>JSONOptions</code> for MongoDB Extended JSON’s <em>Strict mode</em> encoding.</p></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.STRICT_JSON_OPTIONS
bson.max_key.MaxKey	A										<section class="prog_container"><pre><code><em>class </em>bson.max_key.MaxKey</pre></code><p><p>MongoDB internal MaxKey type.</p></p></section>	http://api.mongodb.com/python/current/api/bson/max_key.html#bson.max_key.MaxKey
bson.min_key.MinKey	A										<section class="prog_container"><pre><code><em>class </em>bson.min_key.MinKey</pre></code><p><p>MongoDB internal MinKey type.</p></p></section>	http://api.mongodb.com/python/current/api/bson/min_key.html#bson.min_key.MinKey
bson.objectid.ObjectId.from_datetime	A										<section class="prog_container"><pre><code><em>classmethod </em><code>from_datetime</code>(<em>generation_time</em>)</pre></code><p><p>Create a dummy ObjectId instance with a specific generation time.</p>\n<p>This method is useful for doing range queries on a field\ncontaining <code>ObjectId</code> instances.</p>\n<p><code>generation_time</code> will be converted to UTC. Naive datetime\ninstances will be treated as though they already contain UTC.</p>\n<p>An example using this helper to get documents where <code>"_id"</code>\nwas generated before January 1, 2010 would be:</p>\n<pre>&gt;&gt;&gt; gen_time = datetime.datetime(2010, 1, 1)\n&gt;&gt;&gt; dummy_id = ObjectId.from_datetime(gen_time)\n&gt;&gt;&gt; result = collection.find({"_id": {"$lt": dummy_id}})\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>generation_time</code>: <code>datetime</code> to be used\nas the generation time for the resulting ObjectId.</li></p></section>	http://api.mongodb.com/python/current/api/bson/objectid.html#bson.objectid.ObjectId.from_datetime
bson.objectid.ObjectId.is_valid	A										<section class="prog_container"><pre><code><em>classmethod </em><code>is_valid</code>(<em>oid</em>)</pre></code><p><p>Checks if a <code>oid</code> string is valid or not.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>oid</code>: the object id to validate</li></p></section>	http://api.mongodb.com/python/current/api/bson/objectid.html#bson.objectid.ObjectId.is_valid
bson.objectid.ObjectId.binary	A										<section class="prog_container"><pre><code><code>binary</code></pre></code><p><p>12-byte binary representation of this ObjectId.</p></p></section>	http://api.mongodb.com/python/current/api/bson/objectid.html#bson.objectid.ObjectId.binary
bson.objectid.ObjectId.generation_time	A										<section class="prog_container"><pre><code><code>generation_time</code></pre></code><p><p>A <code>datetime.datetime</code> instance representing the time of\ngeneration for this <code>ObjectId</code>.</p>\n<p>The <code>datetime.datetime</code> is timezone aware, and\nrepresents the generation time in UTC. It is precise to the\nsecond.</p></p></section>	http://api.mongodb.com/python/current/api/bson/objectid.html#bson.objectid.ObjectId.generation_time
bson.objectid.ObjectId	A										<section class="prog_container"><pre><code><em>class </em>bson.objectid.ObjectId(<em>oid=None</em>)</pre></code><p><p>Initialize a new ObjectId.</p>\n<p>An ObjectId is a 12-byte unique identifier consisting of:</p>\n<ul class="simple">\n<li>a 4-byte value representing the seconds since the Unix epoch,</li>\n<li>a 3-byte machine identifier,</li>\n<li>a 2-byte process id, and</li>\n<li>a 3-byte counter, starting with a random value.</li>\n</ul>\n<p>By default, <code>ObjectId()</code> creates a new unique identifier. The\noptional parameter <code>oid</code> can be an <code>ObjectId</code>, or any 12\n<code>bytes</code> or, in Python 2, any 12-character <code>str</code>.</p>\n<p>For example, the 12 bytes b’foo-bar-quux’ do not follow the ObjectId\nspecification but they are acceptable input:</p>\n<pre>&gt;&gt;&gt; ObjectId(b'foo-bar-quux')\nObjectId('666f6f2d6261722d71757578')\n</pre>\n<p><code>oid</code> can also be a <code>unicode</code> or <code>str</code> of 24 hex digits:</p>\n<pre>&gt;&gt;&gt; ObjectId('0123456789ab0123456789ab')\nObjectId('0123456789ab0123456789ab')\n&gt;&gt;&gt;\n&gt;&gt;&gt; # A u-prefixed unicode literal:\n&gt;&gt;&gt; ObjectId(u'0123456789ab0123456789ab')\nObjectId('0123456789ab0123456789ab')\n</pre>\n<p>Raises <code>InvalidId</code> if <code>oid</code> is not 12 bytes nor\n24 hex digits, or <code>TypeError</code> if <code>oid</code> is not an accepted type.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>oid</code> (optional): a valid ObjectId.</li>\n<dl class="describe">\n<dt>\n<code>str(o)</code></dt>\n<dd><p>Get a hex encoded version of <code>ObjectId</code> <code>o</code>.</p>\n<p>The following property always holds:</p>\n<pre>&gt;&gt;&gt; o = ObjectId()\n&gt;&gt;&gt; o == ObjectId(str(o))\nTrue\n</pre>\n<p>This representation is useful for urls or other places where\n<code>o.binary</code> is inappropriate.</p>\n</dd></dl></p></section>	http://api.mongodb.com/python/current/api/bson/objectid.html#bson.objectid.ObjectId
bson.raw_bson.RawBSONDocument.items	A										<section class="prog_container"><pre><code><code>items</code>()</pre></code><p><p>Lazily decode and iterate elements in this document.</p></p></section>	http://api.mongodb.com/python/current/api/bson/raw_bson.html#bson.raw_bson.RawBSONDocument.items
bson.raw_bson.RawBSONDocument.raw	A										<section class="prog_container"><pre><code><code>raw</code></pre></code><p><p>The raw BSON bytes composing this document.</p></p></section>	http://api.mongodb.com/python/current/api/bson/raw_bson.html#bson.raw_bson.RawBSONDocument.raw
bson.raw_bson.RawBSONDocument	A										<section class="prog_container"><pre><code><em>class </em>bson.raw_bson.RawBSONDocument(<em>bson_bytes</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>)</pre></code><p><p>Create a new <code>RawBSONDocument</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>bson_bytes</code>: the BSON bytes that compose this document</li>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>.</li></p></section>	http://api.mongodb.com/python/current/api/bson/raw_bson.html#bson.raw_bson.RawBSONDocument
bson.regex.Regex.try_compile	A										<section class="prog_container"><pre><code><code>try_compile</code>()</pre></code><p><p>Compile this <code>Regex</code> as a Python regular expression.</p></p></section>	http://api.mongodb.com/python/current/api/bson/regex.html#bson.regex.Regex.try_compile
bson.regex.Regex.from_native	A										<section class="prog_container"><pre><code><em>classmethod </em><code>from_native</code>(<em>regex</em>)</pre></code><p><p>Convert a Python regular expression into a <code>Regex</code> instance.</p>\n<p>Note that in Python 3, a regular expression compiled from a\n<code>str</code> has the <code>re.UNICODE</code> flag set. If it is undesirable\nto store this flag in a BSON regular expression, unset it first:</p>\n<pre>&gt;&gt;&gt; pattern = re.compile('.*')\n&gt;&gt;&gt; regex = Regex.from_native(pattern)\n&gt;&gt;&gt; regex.flags ^= re.UNICODE\n&gt;&gt;&gt; db.collection.insert({'pattern': regex})\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>regex</code>: A regular expression object from <code>re.compile()</code>.</li></p></section>	http://api.mongodb.com/python/current/api/bson/regex.html#bson.regex.Regex.from_native
bson.regex.Regex	A										<section class="prog_container"><pre><code><em>class </em>bson.regex.Regex(<em>pattern</em>, <em>flags=0</em>)</pre></code><p><p>BSON regular expression data.</p>\n<p>This class is useful to store and retrieve regular expressions that are\nincompatible with Python’s regular expression dialect.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>pattern</code>: string</li>\n<li><code>flags</code>: (optional) an integer bitmask, or a string of flag\ncharacters like “im” for IGNORECASE and MULTILINE</li></p></section>	http://api.mongodb.com/python/current/api/bson/regex.html#bson.regex.Regex
bson.son.SON.to_dict	A										<section class="prog_container"><pre><code><code>to_dict</code>()</pre></code><p><p>Convert a SON document to a normal Python dictionary instance.</p>\n<p>This is trickier than just <em>dict(...)</em> because it needs to be\nrecursive.</p></p></section>	http://api.mongodb.com/python/current/api/bson/son.html#bson.son.SON.to_dict
bson.son.SON	A										<section class="prog_container"><pre><code><em>class </em>bson.son.SON(<em>data=None</em>, <em>**kwargs</em>)</pre></code><p><p>SON data.</p>\n<p>A subclass of dict that maintains ordering of keys and provides a\nfew extra niceties for dealing with SON. SON objects can be\nconverted to and from BSON.</p>\n<p>The mapping from Python types to BSON types is as follows:</p>\n<colgroup>\n<col width="55%"></col>\n<col width="18%"></col>\n<col width="27%"></col>\n</colgroup>\n<thead valign="bottom">\n<tr class="row-odd"><th class="head">Python Type</th>\n<th class="head">BSON Type</th>\n<th class="head">Supported Direction</th>\n</tr>\n</thead>\n<tbody valign="top">\n<tr class="row-even"><td>None</td>\n<td>null</td>\n<td>both</td>\n</tr>\n<tr class="row-odd"><td>bool</td>\n<td>boolean</td>\n<td>both</td>\n</tr>\n<tr class="row-even"><td>int [1]</td>\n<td>int32 / int64</td>\n<td>py -&gt; bson</td>\n</tr>\n<tr class="row-odd"><td>long</td>\n<td>int64</td>\n<td>py -&gt; bson</td>\n</tr>\n<tr class="row-even"><td><code>bson.int64.Int64</code></td>\n<td>int64</td>\n<td>both</td>\n</tr>\n<tr class="row-odd"><td>float</td>\n<td>number (real)</td>\n<td>both</td>\n</tr>\n<tr class="row-even"><td>string</td>\n<td>string</td>\n<td>py -&gt; bson</td>\n</tr>\n<tr class="row-odd"><td>unicode</td>\n<td>string</td>\n<td>both</td>\n</tr>\n<tr class="row-even"><td>list</td>\n<td>array</td>\n<td>both</td>\n</tr>\n<tr class="row-odd"><td>dict / <code>SON</code></td>\n<td>object</td>\n<td>both</td>\n</tr>\n<tr class="row-even"><td>datetime.datetime [2] [3]</td>\n<td>date</td>\n<td>both</td>\n</tr>\n<tr class="row-odd"><td><code>bson.regex.Regex</code></td>\n<td>regex</td>\n<td>both</td>\n</tr>\n<tr class="row-even"><td>compiled re [4]</td>\n<td>regex</td>\n<td>py -&gt; bson</td>\n</tr>\n<tr class="row-odd"><td><code>bson.binary.Binary</code></td>\n<td>binary</td>\n<td>both</td>\n</tr>\n<tr class="row-even"><td><code>bson.objectid.ObjectId</code></td>\n<td>oid</td>\n<td>both</td>\n</tr>\n<tr class="row-odd"><td><code>bson.dbref.DBRef</code></td>\n<td>dbref</td>\n<td>both</td>\n</tr>\n<tr class="row-even"><td>None</td>\n<td>undefined</td>\n<td>bson -&gt; py</td>\n</tr>\n<tr class="row-odd"><td>unicode</td>\n<td>code</td>\n<td>bson -&gt; py</td>\n</tr>\n<tr class="row-even"><td><code>bson.code.Code</code></td>\n<td>code</td>\n<td>py -&gt; bson</td>\n</tr>\n<tr class="row-odd"><td>unicode</td>\n<td>symbol</td>\n<td>bson -&gt; py</td>\n</tr>\n<tr class="row-even"><td>bytes (Python 3) [5]</td>\n<td>binary</td>\n<td>both</td>\n</tr>\n</tbody>\n<p>Note that to save binary data it must be wrapped as an instance of\n<code>bson.binary.Binary</code>. Otherwise it will be saved as a BSON string\nand retrieved as unicode.</p>\n<colgroup><col class="label"></col><col></col></colgroup>\n<tbody valign="top">\n<tr><td class="label">[1]</td><td>A Python int will be saved as a BSON int32 or BSON int64 depending\non its size. A BSON int32 will always decode to a Python int. A BSON\nint64 will always decode to a <code>Int64</code>.</td></tr>\n</tbody>\n<colgroup><col class="label"></col><col></col></colgroup>\n<tbody valign="top">\n<tr><td class="label">[2]</td><td>datetime.datetime instances will be rounded to the nearest\nmillisecond when saved</td></tr>\n</tbody>\n<colgroup><col class="label"></col><col></col></colgroup>\n<tbody valign="top">\n<tr><td class="label">[3]</td><td>all datetime.datetime instances are treated as <em>naive</em>. clients\nshould always use UTC.</td></tr>\n</tbody>\n<colgroup><col class="label"></col><col></col></colgroup>\n<tbody valign="top">\n<tr><td class="label">[4]</td><td><code>Regex</code> instances and regular expression\nobjects from <code>re.compile()</code> are both saved as BSON regular expressions.\nBSON regular expressions are decoded as <code>Regex</code>\ninstances.</td></tr>\n</tbody>\n<colgroup><col class="label"></col><col></col></colgroup>\n<tbody valign="top">\n<tr><td class="label">[5]</td><td>The bytes type from Python 3.x is encoded as BSON binary with\nsubtype 0. In Python 3.x it will be decoded back to bytes. In Python 2.x\nit will be decoded to an instance of <code>Binary</code> with\nsubtype 0.</td></tr>\n</tbody></p></section>	http://api.mongodb.com/python/current/api/bson/son.html#bson.son.SON
bson.timestamp.Timestamp.as_datetime	A										<section class="prog_container"><pre><code><code>as_datetime</code>()</pre></code><p><p>Return a <code>datetime</code> instance corresponding\nto the time portion of this <code>Timestamp</code>.</p>\n<p>The returned datetime’s timezone is UTC.</p></p></section>	http://api.mongodb.com/python/current/api/bson/timestamp.html#bson.timestamp.Timestamp.as_datetime
bson.timestamp.Timestamp.inc	A										<section class="prog_container"><pre><code><code>inc</code></pre></code><p><p>Get the inc portion of this <code>Timestamp</code>.</p></p></section>	http://api.mongodb.com/python/current/api/bson/timestamp.html#bson.timestamp.Timestamp.inc
bson.timestamp.Timestamp.time	A										<section class="prog_container"><pre><code><code>time</code></pre></code><p><p>Get the time portion of this <code>Timestamp</code>.</p></p></section>	http://api.mongodb.com/python/current/api/bson/timestamp.html#bson.timestamp.Timestamp.time
bson.timestamp.Timestamp	A										<section class="prog_container"><pre><code><em>class </em>bson.timestamp.Timestamp(<em>time</em>, <em>inc</em>)</pre></code><p><p>Create a new <code>Timestamp</code>.</p>\n<p>This class is only for use with the MongoDB opLog. If you need\nto store a regular timestamp, please use a\n<code>datetime</code>.</p>\n<p>Raises <code>TypeError</code> if <code>time</code> is not an instance of\n:class: <code>int</code> or <code>datetime</code>, or <code>inc</code> is not\nan instance of <code>int</code>. Raises <code>ValueError</code> if\n<code>time</code> or <code>inc</code> is not in [0, 2**32).</p>\n<span class="prog__sub">Parameters</span>\n<li><code>time</code>: time in seconds since epoch UTC, or a naive UTC\n<code>datetime</code>, or an aware\n<code>datetime</code></li>\n<li><code>inc</code>: the incrementing counter</li></p></section>	http://api.mongodb.com/python/current/api/bson/timestamp.html#bson.timestamp.Timestamp
bson.tz_util.FixedOffset	A										<section class="prog_container"><pre><code><em>class </em>bson.tz_util.FixedOffset(<em>offset</em>, <em>name</em>)</pre></code><p><p>Fixed offset timezone, in minutes east from UTC.</p>\n<p>Implementation based from the Python standard library documentation.\nDefining __getinitargs__ enables pickling / copying.</p></p></section>	http://api.mongodb.com/python/current/api/bson/tz_util.html#bson.tz_util.FixedOffset
bson.tz_util.utc	A										<section class="prog_container"><pre><code>bson.tz_util.utc<em> = &lt;bson.tz_util.FixedOffset object&gt;</em></pre></code><p><p>Fixed offset timezone representing UTC.</p></p></section>	http://api.mongodb.com/python/current/api/bson/tz_util.html#bson.tz_util.utc
pymongo.has_c	A										<section class="prog_container"><pre><code>pymongo.has_c()</pre></code><p><p>Is the C extension installed?</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.has_c
pymongo.version	A										<section class="prog_container"><pre><code>pymongo.version<em> = '3.4.0'</em></pre></code><p><p>Current version of PyMongo.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.version
pymongo.MongoClient	A										<section class="prog_container"><pre><code>pymongo.MongoClient</pre></code><p><p>Alias for <code>pymongo.mongo_client.MongoClient</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.MongoClient
pymongo.MongoReplicaSetClient	A										<section class="prog_container"><pre><code>pymongo.MongoReplicaSetClient</pre></code><p><p>Alias for <code>pymongo.mongo_replica_set_client.MongoReplicaSetClient</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.MongoReplicaSetClient
pymongo.ReadPreference	A										<section class="prog_container"><pre><code>pymongo.ReadPreference</pre></code><p><p>Alias for <code>pymongo.read_preferences.ReadPreference</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.ReadPreference
pymongo.MIN_SUPPORTED_WIRE_VERSION	A										<section class="prog_container"><pre><code>pymongo.MIN_SUPPORTED_WIRE_VERSION</pre></code><p><p>The minimum wire protocol version PyMongo supports.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.MIN_SUPPORTED_WIRE_VERSION
pymongo.MAX_SUPPORTED_WIRE_VERSION	A										<section class="prog_container"><pre><code>pymongo.MAX_SUPPORTED_WIRE_VERSION</pre></code><p><p>The maximum wire protocol version PyMongo supports.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.MAX_SUPPORTED_WIRE_VERSION
pymongo.database.Database.add_son_manipulator	A										<section class="prog_container"><pre><code><code>add_son_manipulator</code>(<em>manipulator</em>)</pre></code><p><p>Add a new son manipulator to this database.</p>\n<p><strong>DEPRECATED</strong> - <code>add_son_manipulator</code> is deprecated.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.add_son_manipulator
pymongo.database.Database.add_user	A										<section class="prog_container"><pre><code><code>add_user</code>(<em>name</em>, <em>password=None</em>, <em>read_only=None</em>, <em>**kwargs</em>)</pre></code><p><p>Create user <code>name</code> with password <code>password</code>.</p>\n<p>Add a new user with permissions for this <code>Database</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>name</code>: the name of the user to create</li>\n<li><code>password</code> (optional): the password of the user to create. Can not\nbe used with the <code>userSource</code> argument.</li>\n<li><code>read_only</code> (optional): if <code>True</code> the user will be read only</li>\n<li><code>**kwargs</code> (optional): optional fields for the user document\n(e.g. <code>userSource</code>, <code>otherDBRoles</code>, or <code>roles</code>). See\nhttp://docs.mongodb.org/manual/reference/privilege-documents\nfor more information.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.add_user
pymongo.database.Database.authenticate	A										<section class="prog_container"><pre><code><code>authenticate</code>(<em>name=None</em>, <em>password=None</em>, <em>source=None</em>, <em>mechanism='DEFAULT'</em>, <em>**kwargs</em>)</pre></code><p><p>Authenticate to use this database.</p>\n<p>Authentication lasts for the life of the underlying client\ninstance, or until <code>logout()</code> is called.</p>\n<p>Raises <code>TypeError</code> if (required) <code>name</code>, (optional) <code>password</code>,\nor (optional) <code>source</code> is not an instance of <code>basestring</code>\n(<code>str</code> in python 3).</p>\n<ul class="last simple">\n<li>This method authenticates the current connection, and\nwill also cause all new <code>socket</code> connections\nin the underlying client instance to be authenticated automatically.</li>\n<li>Authenticating more than once on the same database with different\ncredentials is not supported. You must call <code>logout()</code> before\nauthenticating with new credentials.</li>\n<li>When sharing a client instance between multiple threads, all\nthreads will share the authentication. If you need different\nauthentication profiles for different purposes you must use\ndistinct client instances.</li>\n</ul>\n<span class="prog__sub">Parameters</span>\n<li><code>name</code>: the name of the user to authenticate. Optional when\n<code>mechanism</code> is MONGODB-X509 and the MongoDB server version is\n&gt;= 3.4.</li>\n<li><code>password</code> (optional): the password of the user to authenticate.\nNot used with GSSAPI or MONGODB-X509 authentication.</li>\n<li><code>source</code> (optional): the database to authenticate on. If not\nspecified the current database is used.</li>\n<li><code>mechanism</code> (optional): See\n<code>MECHANISMS</code> for options.\nBy default, use SCRAM-SHA-1 with MongoDB 3.0 and later,\nMONGODB-CR (MongoDB Challenge Response protocol) for older servers.</li>\n<li><code>authMechanismProperties</code> (optional): Used to specify\nauthentication mechanism specific options. To specify the service\nname for GSSAPI authentication pass\nauthMechanismProperties=’SERVICE_NAME:&lt;service name&gt;’</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.authenticate
pymongo.database.Database.collection_names	A										<section class="prog_container"><pre><code><code>collection_names</code>(<em>include_system_collections=True</em>)</pre></code><p><p>Get a list of all the collection names in this database.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>include_system_collections</code> (optional): if <code>False</code> list\nwill not include system collections (e.g <code>system.indexes</code>)</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.collection_names
pymongo.database.Database.command	A										<section class="prog_container"><pre><code><code>command</code>(<em>command</em>, <em>value=1</em>, <em>check=True</em>, <em>allowable_errors=None</em>, <em>read_preference=Primary()</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>, <em>**kwargs</em>)</pre></code><p><p>Issue a MongoDB command.</p>\n<p>Send command <code>command</code> to the database and return the\nresponse. If <code>command</code> is an instance of <code>basestring</code>\n(<code>str</code> in python 3) then the command {<code>command</code>: <code>value</code>}\nwill be sent. Otherwise, <code>command</code> must be an instance of\n<code>dict</code> and will be sent as is.</p>\n<p>Any additional keyword arguments will be added to the final\ncommand document before it is sent.</p>\n<p>For example, a command like <code>{buildinfo: 1}</code> can be sent\nusing:</p>\n<pre>&gt;&gt;&gt; db.command("buildinfo")\n</pre>\n<p>For a command where the value matters, like <code>{collstats:\ncollection_name}</code> we can do:</p>\n<pre>&gt;&gt;&gt; db.command("collstats", collection_name)\n</pre>\n<p>For commands that take additional arguments we can use\nkwargs. So <code>{filemd5: object_id, root: file_root}</code> becomes:</p>\n<pre>&gt;&gt;&gt; db.command("filemd5", object_id, root=file_root)\n</pre>\n<span class="prog__sub">Parameters</span>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.command
pymongo.database.Database.create_collection	A										<section class="prog_container"><pre><code><code>create_collection</code>(<em>name</em>, <em>codec_options=None</em>, <em>read_preference=None</em>, <em>write_concern=None</em>, <em>read_concern=None</em>, <em>**kwargs</em>)</pre></code><p><p>Create a new <code>Collection</code> in this\ndatabase.</p>\n<p>Normally collection creation is automatic. This method should\nonly be used to specify options on\ncreation. <code>CollectionInvalid</code> will be\nraised if the collection already exists.</p>\n<p>Options should be passed as keyword arguments to this method. Supported\noptions vary with MongoDB release. Some examples include:</p>\n<ul class="simple">\n<li>“size”: desired initial size for the collection (in\nbytes). For capped collections this size is the max\nsize of the collection.</li>\n<li>“capped”: if True, this is a capped collection</li>\n<li>“max”: maximum number of objects if capped (optional)</li>\n</ul>\n<p>See the MongoDB documentation for a full list of supported options by\nserver version.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>name</code>: the name of the collection to create</li>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>. If <code>None</code> (the\ndefault) the <code>codec_options</code> of this <code>Database</code> is\nused.</li>\n<li><code>read_preference</code> (optional): The read preference to use. If\n<code>None</code> (the default) the <code>read_preference</code> of this\n<code>Database</code> is used.</li>\n<li><code>write_concern</code> (optional): An instance of\n<code>WriteConcern</code>. If <code>None</code> (the\ndefault) the <code>write_concern</code> of this <code>Database</code> is\nused.</li>\n<li><code>read_concern</code> (optional): An instance of\n<code>ReadConcern</code>. If <code>None</code> (the\ndefault) the <code>read_concern</code> of this <code>Database</code> is\nused.</li>\n<li><code>collation</code> (optional): An instance of\n<code>Collation</code>.</li>\n<li><code>**kwargs</code> (optional): additional keyword arguments will\nbe passed as options for the create collection command</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.create_collection
pymongo.database.Database.current_op	A										<section class="prog_container"><pre><code><code>current_op</code>(<em>include_all=False</em>)</pre></code><p><p>Get information on operations currently running.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>include_all</code> (optional): if <code>True</code> also list currently\nidle operations in the result</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.current_op
pymongo.database.Database.dereference	A										<section class="prog_container"><pre><code><code>dereference</code>(<em>dbref</em>, <em>**kwargs</em>)</pre></code><p><p>Dereference a <code>DBRef</code>, getting the\ndocument it points to.</p>\n<p>Raises <code>TypeError</code> if <code>dbref</code> is not an instance of\n<code>DBRef</code>. Returns a document, or <code>None</code> if\nthe reference does not point to a valid document.  Raises\n<code>ValueError</code> if <code>dbref</code> has a database specified that\nis different from the current database.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>dbref</code>: the reference</li>\n<li><code>**kwargs</code> (optional): any additional keyword arguments\nare the same as the arguments to\n<code>find()</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.dereference
pymongo.database.Database.drop_collection	A										<section class="prog_container"><pre><code><code>drop_collection</code>(<em>name_or_collection</em>)</pre></code><p><p>Drop a collection.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>name_or_collection</code>: the name of a collection to drop or the\ncollection object itself</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.drop_collection
pymongo.database.Database.error	A										<section class="prog_container"><pre><code><code>error</code>()</pre></code><p><p><strong>DEPRECATED</strong>: Get the error if one occurred on the last operation.</p>\n<p>This method is obsolete: all MongoDB write operations (insert, update,\nremove, and so on) use the write concern <code>w=1</code> and report their\nerrors by default.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.error
pymongo.database.Database.eval	A										<section class="prog_container"><pre><code><code>eval</code>(<em>code</em>, <em>*args</em>)</pre></code><p><p>Evaluate a JavaScript expression in MongoDB.</p>\n<p>Useful if you need to touch a lot of data lightly; in such a\nscenario the network transfer of the data could be a\nbottleneck. The <code>code</code> argument must be a JavaScript\nfunction. Additional positional arguments will be passed to\nthat function when it is run on the server.</p>\n<p>Raises <code>TypeError</code> if <code>code</code> is not an instance of\n<code>basestring</code> (<code>str</code> in python 3) or <code>Code</code>.\nRaises <code>OperationFailure</code> if the eval\nfails. Returns the result of the evaluation.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>code</code>: string representation of JavaScript code to be\nevaluated</li>\n<li><code>args</code> (optional): additional positional arguments are\npassed to the <code>code</code> being evaluated</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.eval
pymongo.database.Database.get_collection	A										<section class="prog_container"><pre><code><code>get_collection</code>(<em>name</em>, <em>codec_options=None</em>, <em>read_preference=None</em>, <em>write_concern=None</em>, <em>read_concern=None</em>)</pre></code><p><p>Get a <code>Collection</code> with the given name\nand options.</p>\n<p>Useful for creating a <code>Collection</code> with\ndifferent codec options, read preference, and/or write concern from\nthis <code>Database</code>.</p>\n<pre>&gt;&gt;&gt; db.read_preference\nPrimary()\n&gt;&gt;&gt; coll1 = db.test\n&gt;&gt;&gt; coll1.read_preference\nPrimary()\n&gt;&gt;&gt; from pymongo import ReadPreference\n&gt;&gt;&gt; coll2 = db.get_collection(\n...     'test', read_preference=ReadPreference.SECONDARY)\n&gt;&gt;&gt; coll2.read_preference\nSecondary(tag_sets=None)\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>name</code>: The name of the collection - a string.</li>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>. If <code>None</code> (the\ndefault) the <code>codec_options</code> of this <code>Database</code> is\nused.</li>\n<li><code>read_preference</code> (optional): The read preference to use. If\n<code>None</code> (the default) the <code>read_preference</code> of this\n<code>Database</code> is used. See <code>read_preferences</code>\nfor options.</li>\n<li><code>write_concern</code> (optional): An instance of\n<code>WriteConcern</code>. If <code>None</code> (the\ndefault) the <code>write_concern</code> of this <code>Database</code> is\nused.</li>\n<li><code>read_concern</code> (optional): An instance of\n<code>ReadConcern</code>. If <code>None</code> (the\ndefault) the <code>read_concern</code> of this <code>Database</code> is\nused.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.get_collection
pymongo.database.Database.last_status	A										<section class="prog_container"><pre><code><code>last_status</code>()</pre></code><p><p><strong>DEPRECATED</strong>: Get status information from the last operation.</p>\n<p>This method is obsolete: all MongoDB write operations (insert, update,\nremove, and so on) use the write concern <code>w=1</code> and report their\nerrors by default.</p>\n<p>Returns a SON object with status information.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.last_status
pymongo.database.Database.logout	A										<section class="prog_container"><pre><code><code>logout</code>()</pre></code><p><p>Deauthorize use of this database for this client instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.logout
pymongo.database.Database.previous_error	A										<section class="prog_container"><pre><code><code>previous_error</code>()</pre></code><p><p><strong>DEPRECATED</strong>: Get the most recent error on this database.</p>\n<p>This method is obsolete: all MongoDB write operations (insert, update,\nremove, and so on) use the write concern <code>w=1</code> and report their\nerrors by default.</p>\n<p>Only returns errors that have occurred since the last call to\n<code>reset_error_history()</code>. Returns None if no such errors have\noccurred.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.previous_error
pymongo.database.Database.profiling_info	A										<section class="prog_container"><pre><code><code>profiling_info</code>()</pre></code><p><p>Returns a list containing current profiling information.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.profiling_info
pymongo.database.Database.profiling_level	A										<section class="prog_container"><pre><code><code>profiling_level</code>()</pre></code><p><p>Get the database’s current profiling level.</p>\n<p>Returns one of (<code>OFF</code>,\n<code>SLOW_ONLY</code>, <code>ALL</code>).</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.profiling_level
pymongo.database.Database.remove_user	A										<section class="prog_container"><pre><code><code>remove_user</code>(<em>name</em>)</pre></code><p><p>Remove user <code>name</code> from this <code>Database</code>.</p>\n<p>User <code>name</code> will no longer have permissions to access this\n<code>Database</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>name</code>: the name of the user to remove</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.remove_user
pymongo.database.Database.reset_error_history	A										<section class="prog_container"><pre><code><code>reset_error_history</code>()</pre></code><p><p><strong>DEPRECATED</strong>: Reset the error history of this database.</p>\n<p>This method is obsolete: all MongoDB write operations (insert, update,\nremove, and so on) use the write concern <code>w=1</code> and report their\nerrors by default.</p>\n<p>Calls to <code>previous_error()</code> will only return errors that have\noccurred since the most recent call to this method.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.reset_error_history
pymongo.database.Database.set_profiling_level	A										<section class="prog_container"><pre><code><code>set_profiling_level</code>(<em>level</em>, <em>slow_ms=None</em>)</pre></code><p><p>Set the database’s profiling level.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>level</code>: Specifies a profiling level, see list of possible values\nbelow.</li>\n<li><code>slow_ms</code>: Optionally modify the threshold for the profile to\nconsider a query or operation.  Even if the profiler is off queries\nslower than the <code>slow_ms</code> level will get written to the logs.</li>\n<p>Possible <code>level</code> values:</p>\n<colgroup>\n<col width="44%"></col>\n<col width="56%"></col>\n</colgroup>\n<thead valign="bottom">\n<tr class="row-odd"><th class="head">Level</th>\n<th class="head">Setting</th>\n</tr>\n</thead>\n<tbody valign="top">\n<tr class="row-even"><td><code>OFF</code></td>\n<td>Off. No profiling.</td>\n</tr>\n<tr class="row-odd"><td><code>SLOW_ONLY</code></td>\n<td>On. Only includes slow operations.</td>\n</tr>\n<tr class="row-even"><td><code>ALL</code></td>\n<td>On. Includes all operations.</td>\n</tr>\n</tbody>\n<p>Raises <code>ValueError</code> if level is not one of\n(<code>OFF</code>, <code>SLOW_ONLY</code>,\n<code>ALL</code>).</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.set_profiling_level
pymongo.database.Database.validate_collection	A										<section class="prog_container"><pre><code><code>validate_collection</code>(<em>name_or_collection</em>, <em>scandata=False</em>, <em>full=False</em>)</pre></code><p><p>Validate a collection.</p>\n<p>Returns a dict of validation info. Raises CollectionInvalid if\nvalidation fails.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>name_or_collection</code>: A Collection object or the name of a\ncollection to validate.</li>\n<li><code>scandata</code>: Do extra checks beyond checking the overall\nstructure of the collection.</li>\n<li><code>full</code>: Have the server do a more thorough scan of the\ncollection. Use with <code>scandata</code> for a thorough scan\nof the structure of the collection and the individual\ndocuments.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.validate_collection
pymongo.database.Database.codec_options	A										<section class="prog_container"><pre><code><code>codec_options</code></pre></code><p><p>Read only access to the <code>CodecOptions</code>\nof this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.codec_options
pymongo.database.Database.read_preference	A										<section class="prog_container"><pre><code><code>read_preference</code></pre></code><p><p>Read only access to the read preference of this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.read_preference
pymongo.database.Database.write_concern	A										<section class="prog_container"><pre><code><code>write_concern</code></pre></code><p><p>Read only access to the <code>WriteConcern</code>\nof this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.write_concern
pymongo.database.Database.client	A										<section class="prog_container"><pre><code><code>client</code></pre></code><p><p>The client instance for this <code>Database</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.client
pymongo.database.Database.incoming_copying_manipulators	A										<section class="prog_container"><pre><code><code>incoming_copying_manipulators</code></pre></code><p><p>All incoming SON copying manipulators installed on this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.incoming_copying_manipulators
pymongo.database.Database.incoming_manipulators	A										<section class="prog_container"><pre><code><code>incoming_manipulators</code></pre></code><p><p>All incoming SON manipulators installed on this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.incoming_manipulators
pymongo.database.Database.name	A										<section class="prog_container"><pre><code><code>name</code></pre></code><p><p>The name of this <code>Database</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.name
pymongo.database.Database.outgoing_copying_manipulators	A										<section class="prog_container"><pre><code><code>outgoing_copying_manipulators</code></pre></code><p><p>List all outgoing SON copying manipulators\ninstalled on this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.outgoing_copying_manipulators
pymongo.database.Database.outgoing_manipulators	A										<section class="prog_container"><pre><code><code>outgoing_manipulators</code></pre></code><p><p>List all outgoing SON manipulators\ninstalled on this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.outgoing_manipulators
pymongo.database.Database.system_js	A										<section class="prog_container"><pre><code><code>system_js</code></pre></code><p><p>A <code>SystemJS</code> helper for this <code>Database</code>.</p>\n<p>See the documentation for <code>SystemJS</code> for more details.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database.system_js
pymongo.database.Database	A										<section class="prog_container"><pre><code><em>class </em>pymongo.database.Database(<em>client</em>, <em>name</em>, <em>codec_options=None</em>, <em>read_preference=None</em>, <em>write_concern=None</em>, <em>read_concern=None</em>)</pre></code><p><p>Get a database by client and name.</p>\n<p>Raises <code>TypeError</code> if <code>name</code> is not an instance of\n<code>basestring</code> (<code>str</code> in python 3). Raises\n<code>InvalidName</code> if <code>name</code> is not a valid\ndatabase name.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>client</code>: A <code>MongoClient</code> instance.</li>\n<li><code>name</code>: The database name.</li>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>. If <code>None</code> (the\ndefault) client.codec_options is used.</li>\n<li><code>read_preference</code> (optional): The read preference to use. If\n<code>None</code> (the default) client.read_preference is used.</li>\n<li><code>write_concern</code> (optional): An instance of\n<code>WriteConcern</code>. If <code>None</code> (the\ndefault) client.write_concern is used.</li>\n<li><code>read_concern</code> (optional): An instance of\n<code>ReadConcern</code>. If <code>None</code> (the\ndefault) client.read_concern is used.</li>\n<dl class="describe">\n<dt>\n<code>db[collection_name] || db.collection_name</code></dt>\n<dd><p>Get the <code>collection_name</code> <code>Collection</code> of\n<code>Database</code> <code>db</code>.</p>\n<p>Raises <code>InvalidName</code> if an invalid collection\nname is used.</p>\n</dd></dl></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database
pymongo.database.SystemJS.list	A										<section class="prog_container"><pre><code><code>list</code>()</pre></code><p><p>Get a list of the names of the functions stored in this database.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.SystemJS.list
pymongo.database.SystemJS	A										<section class="prog_container"><pre><code><em>class </em>pymongo.database.SystemJS(<em>database</em>)</pre></code><p><p>Get a system js helper for the database <code>database</code>.</p>\n<p>An instance of <code>SystemJS</code> can be created with an instance\nof <code>Database</code> through <code>Database.system_js</code>,\nmanual instantiation of this class should not be necessary.</p>\n<p><code>SystemJS</code> instances allow for easy manipulation and\naccess to server-side JavaScript:</p>\n<pre>&gt;&gt;&gt; db.system_js.add1 = "function (x) { return x + 1; }"\n&gt;&gt;&gt; db.system.js.find({"_id": "add1"}).count()\n1\n&gt;&gt;&gt; db.system_js.add1(5)\n6.0\n&gt;&gt;&gt; del db.system_js.add1\n&gt;&gt;&gt; db.system.js.find({"_id": "add1"}).count()\n0\n</pre></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.SystemJS
pymongo.auth.MECHANISMS	A										<section class="prog_container"><pre><code>pymongo.auth.MECHANISMS<em> = frozenset(['MONGODB-X509', 'DEFAULT', 'PLAIN', 'GSSAPI', 'MONGODB-CR', 'SCRAM-SHA-1'])</em></pre></code><p><p>The authentication mechanisms supported by PyMongo.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.auth.MECHANISMS
pymongo.OFF	A										<section class="prog_container"><pre><code>pymongo.OFF<em> = 0</em></pre></code><p><p>No database profiling.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.OFF
pymongo.SLOW_ONLY	A										<section class="prog_container"><pre><code>pymongo.SLOW_ONLY<em> = 1</em></pre></code><p><p>Only profile slow operations.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.SLOW_ONLY
pymongo.ALL	A										<section class="prog_container"><pre><code>pymongo.ALL<em> = 2</em></pre></code><p><p>Profile all operations.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.ALL
pymongo.collation.Collation	A										<section class="prog_container"><pre><code><em>class </em>pymongo.collation.Collation(<em>locale</em>, <em>caseLevel=None</em>, <em>caseFirst=None</em>, <em>strength=None</em>, <em>numericOrdering=None</em>, <em>alternate=None</em>, <em>maxVariable=None</em>, <em>normalization=None</em>, <em>backwards=None</em>, <em>**kwargs</em>)</pre></code><p><span class="prog__sub">Parameters</span>\n<li>\n</li>\n<li>\n</li>\n<li>\n<ul class="simple">\n<li><code>UPPER</code></li>\n<li><code>LOWER</code></li>\n<li><code>OFF</code> (the default)</li>\n</ul>\n</li>\n<li>\n<ul class="simple">\n<li><code>PRIMARY</code></li>\n<li><code>SECONDARY</code></li>\n<li><code>TERTIARY</code> (the default)</li>\n<li><code>QUATERNARY</code></li>\n<li><code>IDENTICAL</code></li>\n</ul>\n<p>Each successive level builds upon the previous. For example, a\n<code>strength</code> of <code>SECONDARY</code> differentiates\ncharacters based both on the unadorned base character and its accents.</p>\n</li>\n<li>\n</li>\n<li>\n<ul class="simple">\n<li><code>NON_IGNORABLE</code> (the default)</li>\n<li><code>SHIFTED</code></li>\n</ul>\n</li>\n<li>\n<ul class="simple">\n<li><code>PUNCT</code> (the default)</li>\n<li><code>SPACE</code></li>\n</ul>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.Collation
pymongo.collation.CollationStrength.PRIMARY	A										<section class="prog_container"><pre><code><code>PRIMARY</code><em> = 1</em></pre></code><p><p>Differentiate base (unadorned) characters.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationStrength.PRIMARY
pymongo.collation.CollationStrength.SECONDARY	A										<section class="prog_container"><pre><code><code>SECONDARY</code><em> = 2</em></pre></code><p><p>Differentiate character accents.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationStrength.SECONDARY
pymongo.collation.CollationStrength.TERTIARY	A										<section class="prog_container"><pre><code><code>TERTIARY</code><em> = 3</em></pre></code><p><p>Differentiate character case.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationStrength.TERTIARY
pymongo.collation.CollationStrength.QUATERNARY	A										<section class="prog_container"><pre><code><code>QUATERNARY</code><em> = 4</em></pre></code><p><p>Differentiate words with and without punctuation.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationStrength.QUATERNARY
pymongo.collation.CollationStrength.IDENTICAL	A										<section class="prog_container"><pre><code><code>IDENTICAL</code><em> = 5</em></pre></code><p><p>Differentiate unicode code point (characters are exactly identical).</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationStrength.IDENTICAL
pymongo.collation.CollationStrength	A										<section class="prog_container"><pre><code><em>class </em>pymongo.collation.CollationStrength</pre></code><p><p>An enum that defines values for <code>strength</code> on a\n<code>Collation</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationStrength
pymongo.collation.CollationAlternate.NON_IGNORABLE	A										<section class="prog_container"><pre><code><code>NON_IGNORABLE</code><em> = 'non-ignorable'</em></pre></code><p><p>Spaces and punctuation are treated as base characters.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationAlternate.NON_IGNORABLE
pymongo.collation.CollationAlternate.SHIFTED	A										<section class="prog_container"><pre><code><code>SHIFTED</code><em> = 'shifted'</em></pre></code><p><p>Spaces and punctuation are <em>not</em> considered base characters.</p>\n<p>Spaces and punctuation are distinguished regardless when the\n<code>Collation</code> strength is at least\n<code>QUATERNARY</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationAlternate.SHIFTED
pymongo.collation.CollationAlternate	A										<section class="prog_container"><pre><code><em>class </em>pymongo.collation.CollationAlternate</pre></code><p><p>An enum that defines values for <code>alternate</code> on a\n<code>Collation</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationAlternate
pymongo.collation.CollationCaseFirst.UPPER	A										<section class="prog_container"><pre><code><code>UPPER</code><em> = 'upper'</em></pre></code><p><p>Sort uppercase characters first.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationCaseFirst.UPPER
pymongo.collation.CollationCaseFirst.LOWER	A										<section class="prog_container"><pre><code><code>LOWER</code><em> = 'lower'</em></pre></code><p><p>Sort lowercase characters first.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationCaseFirst.LOWER
pymongo.collation.CollationCaseFirst.OFF	A										<section class="prog_container"><pre><code><code>OFF</code><em> = 'off'</em></pre></code><p><p>Default for locale or collation strength.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationCaseFirst.OFF
pymongo.collation.CollationCaseFirst	A										<section class="prog_container"><pre><code><em>class </em>pymongo.collation.CollationCaseFirst</pre></code><p><p>An enum that defines values for <code>case_first</code> on a\n<code>Collation</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationCaseFirst
pymongo.collation.CollationMaxVariable.PUNCT	A										<section class="prog_container"><pre><code><code>PUNCT</code><em> = 'punct'</em></pre></code><p><p>Both punctuation and spaces are ignored.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationMaxVariable.PUNCT
pymongo.collation.CollationMaxVariable.SPACE	A										<section class="prog_container"><pre><code><code>SPACE</code><em> = 'space'</em></pre></code><p><p>Spaces alone are ignored.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationMaxVariable.SPACE
pymongo.collation.CollationMaxVariable	A										<section class="prog_container"><pre><code><em>class </em>pymongo.collation.CollationMaxVariable</pre></code><p><p>An enum that defines values for <code>max_variable</code> on a\n<code>Collation</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationMaxVariable
pymongo.collection.ReturnDocument.BEFORE	A										<section class="prog_container"><pre><code><code>BEFORE</code></pre></code><p><p>Return the original document before it was updated/replaced, or\n<code>None</code> if no document matches the query.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.ReturnDocument.BEFORE
pymongo.collection.ReturnDocument.AFTER	A										<section class="prog_container"><pre><code><code>AFTER</code></pre></code><p><p>Return the updated/replaced or inserted document.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.ReturnDocument.AFTER
pymongo.collection.ReturnDocument	A										<section class="prog_container"><pre><code><em>class </em>pymongo.collection.ReturnDocument</pre></code><p><p>An enum used with\n<code>find_one_and_replace()</code> and\n<code>find_one_and_update()</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.ReturnDocument
pymongo.collection.Collection.with_options	A										<section class="prog_container"><pre><code><code>with_options</code>(<em>codec_options=None</em>, <em>read_preference=None</em>, <em>write_concern=None</em>, <em>read_concern=None</em>)</pre></code><p><p>Get a clone of this collection changing the specified settings.</p>\n<pre>&gt;&gt;&gt; coll1.read_preference\nPrimary()\n&gt;&gt;&gt; from pymongo import ReadPreference\n&gt;&gt;&gt; coll2 = coll1.with_options(read_preference=ReadPreference.SECONDARY)\n&gt;&gt;&gt; coll1.read_preference\nPrimary()\n&gt;&gt;&gt; coll2.read_preference\nSecondary(tag_sets=None)\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>. If <code>None</code> (the\ndefault) the <code>codec_options</code> of this <code>Collection</code>\nis used.</li>\n<li><code>read_preference</code> (optional): The read preference to use. If\n<code>None</code> (the default) the <code>read_preference</code> of this\n<code>Collection</code> is used. See <code>read_preferences</code>\nfor options.</li>\n<li><code>write_concern</code> (optional): An instance of\n<code>WriteConcern</code>. If <code>None</code> (the\ndefault) the <code>write_concern</code> of this <code>Collection</code>\nis used.</li>\n<li><code>read_concern</code> (optional): An instance of\n<code>ReadConcern</code>. If <code>None</code> (the\ndefault) the <code>read_concern</code> of this <code>Collection</code>\nis used.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.with_options
pymongo.collection.Collection.bulk_write	A										<section class="prog_container"><pre><code><code>bulk_write</code>(<em>requests</em>, <em>ordered=True</em>, <em>bypass_document_validation=False</em>)</pre></code><p><p>Send a batch of write operations to the server.</p>\n<p>Requests are passed as a list of write operation instances (\n<code>InsertOne</code>,\n<code>UpdateOne</code>,\n<code>UpdateMany</code>,\n<code>ReplaceOne</code>,\n<code>DeleteOne</code>, or\n<code>DeleteMany</code>).</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find({}):\n...     print(doc)\n...\n{u'x': 1, u'_id': ObjectId('54f62e60fba5226811f634ef')}\n{u'x': 1, u'_id': ObjectId('54f62e60fba5226811f634f0')}\n&gt;&gt;&gt; # DeleteMany, UpdateOne, and UpdateMany are also available.\n...\n&gt;&gt;&gt; from pymongo import InsertOne, DeleteOne, ReplaceOne\n&gt;&gt;&gt; requests = [InsertOne({'y': 1}), DeleteOne({'x': 1}),\n...             ReplaceOne({'w': 1}, {'z': 1}, upsert=True)]\n&gt;&gt;&gt; result = db.test.bulk_write(requests)\n&gt;&gt;&gt; result.inserted_count\n1\n&gt;&gt;&gt; result.deleted_count\n1\n&gt;&gt;&gt; result.modified_count\n0\n&gt;&gt;&gt; result.upserted_ids\n{2: ObjectId('54f62ee28891e756a6e1abd5')}\n&gt;&gt;&gt; for doc in db.test.find({}):\n...     print(doc)\n...\n{u'x': 1, u'_id': ObjectId('54f62e60fba5226811f634f0')}\n{u'y': 1, u'_id': ObjectId('54f62ee2fba5226811f634f1')}\n{u'z': 1, u'_id': ObjectId('54f62ee28891e756a6e1abd5')}\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>requests</code>: A list of write operations (see examples above).</li>\n<li><code>ordered</code> (optional): If <code>True</code> (the default) requests will be\nperformed on the server serially, in the order provided. If an error\noccurs all remaining operations are aborted. If <code>False</code> requests\nwill be performed on the server in arbitrary order, possibly in\nparallel, and all operations will be attempted.</li>\n<li><code>bypass_document_validation</code>: (optional) If <code>True</code>, allows the\nwrite to opt-out of document level validation. Default is\n<code>False</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.bulk_write
pymongo.collection.Collection.insert_one	A										<section class="prog_container"><pre><code><code>insert_one</code>(<em>document</em>, <em>bypass_document_validation=False</em>)</pre></code><p><p>Insert a single document.</p>\n<pre>&gt;&gt;&gt; db.test.count({'x': 1})\n0\n&gt;&gt;&gt; result = db.test.insert_one({'x': 1})\n&gt;&gt;&gt; result.inserted_id\nObjectId('54f112defba522406c9cc208')\n&gt;&gt;&gt; db.test.find_one({'x': 1})\n{u'x': 1, u'_id': ObjectId('54f112defba522406c9cc208')}\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>document</code>: The document to insert. Must be a mutable mapping\ntype. If the document does not have an _id field one will be\nadded automatically.</li>\n<li><code>bypass_document_validation</code>: (optional) If <code>True</code>, allows the\nwrite to opt-out of document level validation. Default is\n<code>False</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.insert_one
pymongo.collection.Collection.insert_many	A										<section class="prog_container"><pre><code><code>insert_many</code>(<em>documents</em>, <em>ordered=True</em>, <em>bypass_document_validation=False</em>)</pre></code><p><p>Insert an iterable of documents.</p>\n<pre>&gt;&gt;&gt; db.test.count()\n0\n&gt;&gt;&gt; result = db.test.insert_many([{'x': i} for i in range(2)])\n&gt;&gt;&gt; result.inserted_ids\n[ObjectId('54f113fffba522406c9cc20e'), ObjectId('54f113fffba522406c9cc20f')]\n&gt;&gt;&gt; db.test.count()\n2\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>documents</code>: A iterable of documents to insert.</li>\n<li><code>ordered</code> (optional): If <code>True</code> (the default) documents will be\ninserted on the server serially, in the order provided. If an error\noccurs all remaining inserts are aborted. If <code>False</code>, documents\nwill be inserted on the server in arbitrary order, possibly in\nparallel, and all document inserts will be attempted.</li>\n<li><code>bypass_document_validation</code>: (optional) If <code>True</code>, allows the\nwrite to opt-out of document level validation. Default is\n<code>False</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.insert_many
pymongo.collection.Collection.replace_one	A										<section class="prog_container"><pre><code><code>replace_one</code>(<em>filter</em>, <em>replacement</em>, <em>upsert=False</em>, <em>bypass_document_validation=False</em>, <em>collation=None</em>)</pre></code><p><p>Replace a single document matching the filter.</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find({}):\n...     print(doc)\n...\n{u'x': 1, u'_id': ObjectId('54f4c5befba5220aa4d6dee7')}\n&gt;&gt;&gt; result = db.test.replace_one({'x': 1}, {'y': 1})\n&gt;&gt;&gt; result.matched_count\n1\n&gt;&gt;&gt; result.modified_count\n1\n&gt;&gt;&gt; for doc in db.test.find({}):\n...     print(doc)\n...\n{u'y': 1, u'_id': ObjectId('54f4c5befba5220aa4d6dee7')}\n</pre>\n<p>The <em>upsert</em> option can be used to insert a new document if a matching\ndocument does not exist.</p>\n<pre>&gt;&gt;&gt; result = db.test.replace_one({'x': 1}, {'x': 1}, True)\n&gt;&gt;&gt; result.matched_count\n0\n&gt;&gt;&gt; result.modified_count\n0\n&gt;&gt;&gt; result.upserted_id\nObjectId('54f11e5c8891e756a6e1abd4')\n&gt;&gt;&gt; db.test.find_one({'x': 1})\n{u'x': 1, u'_id': ObjectId('54f11e5c8891e756a6e1abd4')}\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the document to replace.</li>\n<li><code>replacement</code>: The new document.</li>\n<li><code>upsert</code> (optional): If <code>True</code>, perform an insert if no documents\nmatch the filter.</li>\n<li><code>bypass_document_validation</code>: (optional) If <code>True</code>, allows the\nwrite to opt-out of document level validation. Default is\n<code>False</code>.</li>\n<li><code>collation</code> (optional): An instance of\n<code>Collation</code>. This option is only supported\non MongoDB 3.4 and above.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.replace_one
pymongo.collection.Collection.update_one	A										<section class="prog_container"><pre><code><code>update_one</code>(<em>filter</em>, <em>update</em>, <em>upsert=False</em>, <em>bypass_document_validation=False</em>, <em>collation=None</em>)</pre></code><p><p>Update a single document matching the filter.</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find():\n...     print(doc)\n...\n{u'x': 1, u'_id': 0}\n{u'x': 1, u'_id': 1}\n{u'x': 1, u'_id': 2}\n&gt;&gt;&gt; result = db.test.update_one({'x': 1}, {'$inc': {'x': 3}})\n&gt;&gt;&gt; result.matched_count\n1\n&gt;&gt;&gt; result.modified_count\n1\n&gt;&gt;&gt; for doc in db.test.find():\n...     print(doc)\n...\n{u'x': 4, u'_id': 0}\n{u'x': 1, u'_id': 1}\n{u'x': 1, u'_id': 2}\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the document to update.</li>\n<li><code>update</code>: The modifications to apply.</li>\n<li><code>upsert</code> (optional): If <code>True</code>, perform an insert if no documents\nmatch the filter.</li>\n<li><code>bypass_document_validation</code>: (optional) If <code>True</code>, allows the\nwrite to opt-out of document level validation. Default is\n<code>False</code>.</li>\n<li><code>collation</code> (optional): An instance of\n<code>Collation</code>. This option is only supported\non MongoDB 3.4 and above.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.update_one
pymongo.collection.Collection.update_many	A										<section class="prog_container"><pre><code><code>update_many</code>(<em>filter</em>, <em>update</em>, <em>upsert=False</em>, <em>bypass_document_validation=False</em>, <em>collation=None</em>)</pre></code><p><p>Update one or more documents that match the filter.</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find():\n...     print(doc)\n...\n{u'x': 1, u'_id': 0}\n{u'x': 1, u'_id': 1}\n{u'x': 1, u'_id': 2}\n&gt;&gt;&gt; result = db.test.update_many({'x': 1}, {'$inc': {'x': 3}})\n&gt;&gt;&gt; result.matched_count\n3\n&gt;&gt;&gt; result.modified_count\n3\n&gt;&gt;&gt; for doc in db.test.find():\n...     print(doc)\n...\n{u'x': 4, u'_id': 0}\n{u'x': 4, u'_id': 1}\n{u'x': 4, u'_id': 2}\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the documents to update.</li>\n<li><code>update</code>: The modifications to apply.</li>\n<li><code>upsert</code> (optional): If <code>True</code>, perform an insert if no documents\nmatch the filter.</li>\n<li><code>bypass_document_validation</code> (optional): If <code>True</code>, allows the\nwrite to opt-out of document level validation. Default is\n<code>False</code>.</li>\n<li><code>collation</code> (optional): An instance of\n<code>Collation</code>. This option is only supported\non MongoDB 3.4 and above.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.update_many
pymongo.collection.Collection.delete_one	A										<section class="prog_container"><pre><code><code>delete_one</code>(<em>filter</em>, <em>collation=None</em>)</pre></code><p><p>Delete a single document matching the filter.</p>\n<pre>&gt;&gt;&gt; db.test.count({'x': 1})\n3\n&gt;&gt;&gt; result = db.test.delete_one({'x': 1})\n&gt;&gt;&gt; result.deleted_count\n1\n&gt;&gt;&gt; db.test.count({'x': 1})\n2\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the document to delete.</li>\n<li><code>collation</code> (optional): An instance of\n<code>Collation</code>. This option is only supported\non MongoDB 3.4 and above.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.delete_one
pymongo.collection.Collection.delete_many	A										<section class="prog_container"><pre><code><code>delete_many</code>(<em>filter</em>, <em>collation=None</em>)</pre></code><p><p>Delete one or more documents matching the filter.</p>\n<pre>&gt;&gt;&gt; db.test.count({'x': 1})\n3\n&gt;&gt;&gt; result = db.test.delete_many({'x': 1})\n&gt;&gt;&gt; result.deleted_count\n3\n&gt;&gt;&gt; db.test.count({'x': 1})\n0\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the documents to delete.</li>\n<li><code>collation</code> (optional): An instance of\n<code>Collation</code>. This option is only supported\non MongoDB 3.4 and above.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.delete_many
pymongo.collection.Collection.aggregate	A										<section class="prog_container"><pre><code><code>aggregate</code>(<em>pipeline</em>, <em>**kwargs</em>)</pre></code><p><p>Perform an aggregation using the aggregation framework on this\ncollection.</p>\n<p>All optional aggregate parameters should be passed as keyword arguments\nto this method. Valid options include, but are not limited to:</p>\n<ul class="simple">\n<li><code>allowDiskUse</code> (bool): Enables writing to temporary files. When set\nto True, aggregation stages can write data to the _tmp subdirectory\nof the –dbpath directory. The default is False.</li>\n<li><code>maxTimeMS</code> (int): The maximum amount of time to allow the operation\nto run in milliseconds.</li>\n<li><code>batchSize</code> (int): The maximum number of documents to return per\nbatch. Ignored if the connected mongod or mongos does not support\nreturning aggregate results using a cursor, or <code>useCursor</code> is\n<code>False</code>.</li>\n<li><code>useCursor</code> (bool): Requests that the <code>server</code> provide results\nusing a cursor, if possible. Ignored if the connected mongod or\nmongos does not support returning aggregate results using a cursor.\nThe default is <code>True</code>. Set this to <code>False</code> when upgrading a 2.4\nor older sharded cluster to 2.6 or newer (see the warning below).</li>\n<li><code>collation</code> (optional): An instance of\n<code>Collation</code>. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n<p>The <code>aggregate()</code> method obeys the <code>read_preference</code> of this\n<code>Collection</code>. Please note that using the <code>$out</code> pipeline stage\nrequires a read preference of\n<code>PRIMARY</code> (the default).\nThe server will raise an error if the <code>$out</code> pipeline stage is used\nwith any other read preference.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>pipeline</code>: a list of aggregation pipeline stages</li>\n<li><code>**kwargs</code> (optional): See list of options above.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.aggregate
pymongo.collection.Collection.find	A										<section class="prog_container"><pre><code><code>find</code>(<em>filter=None</em>, <em>projection=None</em>, <em>skip=0</em>, <em>limit=0</em>, <em>no_cursor_timeout=False</em>, <em>cursor_type=CursorType.NON_TAILABLE</em>, <em>sort=None</em>, <em>allow_partial_results=False</em>, <em>oplog_replay=False</em>, <em>modifiers=None</em>, <em>manipulate=True</em>)</pre></code><p><p>Query the database.</p>\n<p>The <code>filter</code> argument is a prototype document that all results\nmust match. For example:</p>\n<pre>&gt;&gt;&gt; db.test.find({"hello": "world"})\n</pre>\n<p>only matches documents that have a key “hello” with value\n“world”.  Matches can have other keys <em>in addition</em> to\n“hello”. The <code>projection</code> argument is used to specify a subset\nof fields that should be included in the result documents. By\nlimiting results to a certain subset of fields you can cut\ndown on network traffic and decoding time.</p>\n<p>Raises <code>TypeError</code> if any of the arguments are of\nimproper type. Returns an instance of\n<code>Cursor</code> corresponding to this query.</p>\n<p>The <code>find()</code> method obeys the <code>read_preference</code> of\nthis <code>Collection</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n<ul class="simple">\n<li><code>NON_TAILABLE</code> - the result of\nthis find call will return a standard cursor over the result set.</li>\n<li><code>TAILABLE</code> - the result of this\nfind call will be a tailable cursor - tailable cursors are only\nfor use with capped collections. They are not closed when the\nlast data is retrieved but are kept open and the cursor location\nmarks the final document position. If more data is received\niteration of the cursor will continue from the last document\nreceived. For details, see the tailable cursor documentation.</li>\n<li><code>TAILABLE_AWAIT</code> - the result\nof this find call will be a tailable cursor with the await flag\nset. The server will wait for a few seconds after returning the\nfull result set so that it can capture and return additional data\nadded during the query.</li>\n<li><code>EXHAUST</code> - the result of this\nfind call will be an exhaust cursor. MongoDB will stream batched\nresults to the client without waiting for the client to request\neach batch, reducing latency. See notes on compatibility below.</li>\n</ul>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n<pre>&gt;&gt;&gt; db.test.find(modifiers={"$maxTimeMS": 500})\n</pre>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<p>There are a number of caveats to using\n<code>EXHAUST</code> as cursor_type:</p>\n<ul class="last simple">\n<li>The <code>limit</code> option can not be used with an exhaust cursor.</li>\n<li>Exhaust cursors are not supported by mongos and can not be\nused with a sharded cluster.</li>\n<li>A <code>Cursor</code> instance created with the\n<code>EXHAUST</code> cursor_type requires an\nexclusive <code>socket</code> connection to MongoDB. If the\n<code>Cursor</code> is discarded without being\ncompletely iterated the underlying <code>socket</code>\nconnection will be closed and discarded without being returned to\nthe connection pool.</li>\n</ul></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.find
pymongo.collection.Collection.find_one	A										<section class="prog_container"><pre><code><code>find_one</code>(<em>filter=None</em>, <em>*args</em>, <em>**kwargs</em>)</pre></code><p><p>Get a single document from the database.</p>\n<p>All arguments to <code>find()</code> are also valid arguments for\n<code>find_one()</code>, although any <code>limit</code> argument will be\nignored. Returns a single document, or <code>None</code> if no matching\ndocument is found.</p>\n<p>The <code>find_one()</code> method obeys the <code>read_preference</code> of\nthis <code>Collection</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n<pre>&gt;&gt;&gt; find_one(max_time_ms=100)\n</pre>\n</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.find_one
pymongo.collection.Collection.find_one_and_delete	A										<section class="prog_container"><pre><code><code>find_one_and_delete</code>(<em>filter</em>, <em>projection=None</em>, <em>sort=None</em>, <em>**kwargs</em>)</pre></code><p><p>Finds a single document and deletes it, returning the document.</p>\n<pre>&gt;&gt;&gt; db.test.count({'x': 1})\n2\n&gt;&gt;&gt; db.test.find_one_and_delete({'x': 1})\n{u'x': 1, u'_id': ObjectId('54f4e12bfba5220aa4d6dee8')}\n&gt;&gt;&gt; db.test.count({'x': 1})\n1\n</pre>\n<p>If multiple documents match <em>filter</em>, a <em>sort</em> can be applied.</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find({'x': 1}):\n...     print(doc)\n...\n{u'x': 1, u'_id': 0}\n{u'x': 1, u'_id': 1}\n{u'x': 1, u'_id': 2}\n&gt;&gt;&gt; db.test.find_one_and_delete(\n...     {'x': 1}, sort=[('_id', pymongo.DESCENDING)])\n{u'x': 1, u'_id': 2}\n</pre>\n<p>The <em>projection</em> option can be used to limit the fields returned.</p>\n<pre>&gt;&gt;&gt; db.test.find_one_and_delete({'x': 1}, projection={'_id': False})\n{u'x': 1}\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the document to delete.</li>\n<li><code>projection</code> (optional): a list of field names that should be\nreturned in the result document or a mapping specifying the fields\nto include or exclude. If <code>projection</code> is a list “_id” will\nalways be returned. Use a mapping to exclude fields from\nthe result (e.g. projection={‘_id’: False}).</li>\n<li><code>sort</code> (optional): a list of (key, direction) pairs\nspecifying the sort order for the query. If multiple documents\nmatch the query, they are sorted and the first is deleted.</li>\n<li><code>**kwargs</code> (optional): additional command arguments can be passed\nas keyword arguments (for example maxTimeMS can be used with\nrecent server versions).</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.find_one_and_delete
pymongo.collection.Collection.find_one_and_replace	A										<section class="prog_container"><pre><code><code>find_one_and_replace</code>(<em>filter</em>, <em>replacement</em>, <em>projection=None</em>, <em>sort=None</em>, <em>return_document=ReturnDocument.BEFORE</em>, <em>**kwargs</em>)</pre></code><p><p>Finds a single document and replaces it, returning either the\noriginal or the replaced document.</p>\n<p>The <code>find_one_and_replace()</code> method differs from\n<code>find_one_and_update()</code> by replacing the document matched by\n<em>filter</em>, rather than modifying the existing document.</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find({}):\n...     print(doc)\n...\n{u'x': 1, u'_id': 0}\n{u'x': 1, u'_id': 1}\n{u'x': 1, u'_id': 2}\n&gt;&gt;&gt; db.test.find_one_and_replace({'x': 1}, {'y': 1})\n{u'x': 1, u'_id': 0}\n&gt;&gt;&gt; for doc in db.test.find({}):\n...     print(doc)\n...\n{u'y': 1, u'_id': 0}\n{u'x': 1, u'_id': 1}\n{u'x': 1, u'_id': 2}\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the document to replace.</li>\n<li><code>replacement</code>: The replacement document.</li>\n<li><code>projection</code> (optional): A list of field names that should be\nreturned in the result document or a mapping specifying the fields\nto include or exclude. If <code>projection</code> is a list “_id” will\nalways be returned. Use a mapping to exclude fields from\nthe result (e.g. projection={‘_id’: False}).</li>\n<li><code>sort</code> (optional): a list of (key, direction) pairs\nspecifying the sort order for the query. If multiple documents\nmatch the query, they are sorted and the first is replaced.</li>\n<li><code>upsert</code> (optional): When <code>True</code>, inserts a new document if no\ndocument matches the query. Defaults to <code>False</code>.</li>\n<li><code>return_document</code>: If\n<code>ReturnDocument.BEFORE</code> (the default),\nreturns the original document before it was replaced, or <code>None</code>\nif no document matches. If\n<code>ReturnDocument.AFTER</code>, returns the replaced\nor inserted document.</li>\n<li><code>**kwargs</code> (optional): additional command arguments can be passed\nas keyword arguments (for example maxTimeMS can be used with\nrecent server versions).</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.find_one_and_replace
pymongo.collection.Collection.find_one_and_update	A										<section class="prog_container"><pre><code><code>find_one_and_update</code>(<em>filter</em>, <em>update</em>, <em>projection=None</em>, <em>sort=None</em>, <em>return_document=ReturnDocument.BEFORE</em>, <em>**kwargs</em>)</pre></code><p><p>Finds a single document and updates it, returning either the\noriginal or the updated document.</p>\n<pre>&gt;&gt;&gt; db.test.find_one_and_update(\n...    {'_id': 665}, {'$inc': {'count': 1}, '$set': {'done': True}})\n{u'_id': 665, u'done': False, u'count': 25}}\n</pre>\n<p>By default <code>find_one_and_update()</code> returns the original version of\nthe document before the update was applied. To return the updated\nversion of the document instead, use the <em>return_document</em> option.</p>\n<pre>&gt;&gt;&gt; from pymongo import ReturnDocument\n&gt;&gt;&gt; db.example.find_one_and_update(\n...     {'_id': 'userid'},\n...     {'$inc': {'seq': 1}},\n...     return_document=ReturnDocument.AFTER)\n{u'_id': u'userid', u'seq': 1}\n</pre>\n<p>You can limit the fields returned with the <em>projection</em> option.</p>\n<pre>&gt;&gt;&gt; db.example.find_one_and_update(\n...     {'_id': 'userid'},\n...     {'$inc': {'seq': 1}},\n...     projection={'seq': True, '_id': False},\n...     return_document=ReturnDocument.AFTER)\n{u'seq': 2}\n</pre>\n<p>The <em>upsert</em> option can be used to create the document if it doesn’t\nalready exist.</p>\n<pre>&gt;&gt;&gt; db.example.delete_many({}).deleted_count\n1\n&gt;&gt;&gt; db.example.find_one_and_update(\n...     {'_id': 'userid'},\n...     {'$inc': {'seq': 1}},\n...     projection={'seq': True, '_id': False},\n...     upsert=True,\n...     return_document=ReturnDocument.AFTER)\n{u'seq': 1}\n</pre>\n<p>If multiple documents match <em>filter</em>, a <em>sort</em> can be applied.</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find({'done': True}):\n...     print(doc)\n...\n{u'_id': 665, u'done': True, u'result': {u'count': 26}}\n{u'_id': 701, u'done': True, u'result': {u'count': 17}}\n&gt;&gt;&gt; db.test.find_one_and_update(\n...     {'done': True},\n...     {'$set': {'final': True}},\n...     sort=[('_id', pymongo.DESCENDING)])\n{u'_id': 701, u'done': True, u'result': {u'count': 17}}\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the document to update.</li>\n<li><code>update</code>: The update operations to apply.</li>\n<li><code>projection</code> (optional): A list of field names that should be\nreturned in the result document or a mapping specifying the fields\nto include or exclude. If <code>projection</code> is a list “_id” will\nalways be returned. Use a dict to exclude fields from\nthe result (e.g. projection={‘_id’: False}).</li>\n<li><code>sort</code> (optional): a list of (key, direction) pairs\nspecifying the sort order for the query. If multiple documents\nmatch the query, they are sorted and the first is updated.</li>\n<li><code>upsert</code> (optional): When <code>True</code>, inserts a new document if no\ndocument matches the query. Defaults to <code>False</code>.</li>\n<li><code>return_document</code>: If\n<code>ReturnDocument.BEFORE</code> (the default),\nreturns the original document before it was updated, or <code>None</code>\nif no document matches. If\n<code>ReturnDocument.AFTER</code>, returns the updated\nor inserted document.</li>\n<li><code>**kwargs</code> (optional): additional command arguments can be passed\nas keyword arguments (for example maxTimeMS can be used with\nrecent server versions).</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.find_one_and_update
pymongo.collection.Collection.count	A										<section class="prog_container"><pre><code><code>count</code>(<em>filter=None</em>, <em>**kwargs</em>)</pre></code><p><p>Get the number of documents in this collection.</p>\n<p>All optional count parameters should be passed as keyword arguments\nto this method. Valid options include:</p>\n<ul class="simple">\n<li><code>hint</code> (string or list of tuples): The index to use. Specify either\nthe index name as a string or the index specification as a list of\ntuples (e.g. [(‘a’, pymongo.ASCENDING), (‘b’, pymongo.ASCENDING)]).</li>\n<li><code>limit</code> (int): The maximum number of documents to count.</li>\n<li><code>skip</code> (int): The number of matching documents to skip before\nreturning results.</li>\n<li><code>maxTimeMS</code> (int): The maximum amount of time to allow the count\ncommand to run, in milliseconds.</li>\n<li><code>collation</code> (optional): An instance of\n<code>Collation</code>. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n<p>The <code>count()</code> method obeys the <code>read_preference</code> of\nthis <code>Collection</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code> (optional): A query document that selects which documents\nto count in the collection.</li>\n<li><code>**kwargs</code> (optional): See list of options above.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.count
pymongo.collection.Collection.distinct	A										<section class="prog_container"><pre><code><code>distinct</code>(<em>key</em>, <em>filter=None</em>, <em>**kwargs</em>)</pre></code><p><p>Get a list of distinct values for <code>key</code> among all documents\nin this collection.</p>\n<p>Raises <code>TypeError</code> if <code>key</code> is not an instance of\n<code>basestring</code> (<code>str</code> in python 3).</p>\n<p>All optional distinct parameters should be passed as keyword arguments\nto this method. Valid options include:</p>\n<ul class="simple">\n<li><code>maxTimeMS</code> (int): The maximum amount of time to allow the count\ncommand to run, in milliseconds.</li>\n<li><code>collation</code> (optional): An instance of\n<code>Collation</code>. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n<p>The <code>distinct()</code> method obeys the <code>read_preference</code> of\nthis <code>Collection</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>key</code>: name of the field for which we want to get the distinct\nvalues</li>\n<li><code>filter</code> (optional): A query document that specifies the documents\nfrom which to retrieve the distinct values.</li>\n<li><code>**kwargs</code> (optional): See list of options above.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.distinct
pymongo.collection.Collection.create_index	A										<section class="prog_container"><pre><code><code>create_index</code>(<em>keys</em>, <em>**kwargs</em>)</pre></code><p><p>Creates an index on this collection.</p>\n<p>Takes either a single key or a list of (key, direction) pairs.\nThe key(s) must be an instance of <code>basestring</code>\n(<code>str</code> in python 3), and the direction(s) must be one of\n(<code>ASCENDING</code>, <code>DESCENDING</code>,\n<code>GEO2D</code>, <code>GEOHAYSTACK</code>,\n<code>GEOSPHERE</code>, <code>HASHED</code>,\n<code>TEXT</code>).</p>\n<p>To create a single key ascending index on the key <code>'mike'</code> we just\nuse a string argument:</p>\n<pre>&gt;&gt;&gt; my_collection.create_index("mike")\n</pre>\n<p>For a compound index on <code>'mike'</code> descending and <code>'eliot'</code>\nascending we need to use a list of tuples:</p>\n<pre>&gt;&gt;&gt; my_collection.create_index([("mike", pymongo.DESCENDING),\n...                             ("eliot", pymongo.ASCENDING)])\n</pre>\n<p>All optional index creation parameters should be passed as\nkeyword arguments to this method. For example:</p>\n<pre>&gt;&gt;&gt; my_collection.create_index([("mike", pymongo.DESCENDING)],\n...                            background=True)\n</pre>\n<p>Valid options include, but are not limited to:</p>\n<ul class="simple">\n<li><code>name</code>: custom name to use for this index - if none is\ngiven, a name will be generated.</li>\n<li><code>unique</code>: if <code>True</code> creates a uniqueness constraint on the index.</li>\n<li><code>background</code>: if <code>True</code> this index should be created in the\nbackground.</li>\n<li><code>sparse</code>: if <code>True</code>, omit from the index any documents that lack\nthe indexed field.</li>\n<li><code>bucketSize</code>: for use with geoHaystack indexes.\nNumber of documents to group together within a certain proximity\nto a given longitude and latitude.</li>\n<li><code>min</code>: minimum value for keys in a <code>GEO2D</code>\nindex.</li>\n<li><code>max</code>: maximum value for keys in a <code>GEO2D</code>\nindex.</li>\n<li><code>expireAfterSeconds</code>: &lt;int&gt; Used to create an expiring (TTL)\ncollection. MongoDB will automatically delete documents from\nthis collection after &lt;int&gt; seconds. The indexed field must\nbe a UTC datetime or the data will not expire.</li>\n<li><code>partialFilterExpression</code>: A document that specifies a filter for\na partial index.</li>\n<li><code>collation</code> (optional): An instance of\n<code>Collation</code>. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n<p>See the MongoDB documentation for a full list of supported options by\nserver version.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>keys</code>: a single key or a list of (key, direction)\npairs specifying the index to create</li>\n<li><code>**kwargs</code> (optional): any additional index creation\noptions (see the above list) should be passed as keyword\narguments</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.create_index
pymongo.collection.Collection.create_indexes	A										<section class="prog_container"><pre><code><code>create_indexes</code>(<em>indexes</em>)</pre></code><p><p>Create one or more indexes on this collection.</p>\n<pre>&gt;&gt;&gt; from pymongo import IndexModel, ASCENDING, DESCENDING\n&gt;&gt;&gt; index1 = IndexModel([("hello", DESCENDING),\n...                      ("world", ASCENDING)], name="hello_world")\n&gt;&gt;&gt; index2 = IndexModel([("goodbye", DESCENDING)])\n&gt;&gt;&gt; db.test.create_indexes([index1, index2])\n["hello_world"]\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>indexes</code>: A list of <code>IndexModel</code>\ninstances.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.create_indexes
pymongo.collection.Collection.drop_index	A										<section class="prog_container"><pre><code><code>drop_index</code>(<em>index_or_name</em>)</pre></code><p><p>Drops the specified index on this collection.</p>\n<p>Can be used on non-existant collections or collections with no\nindexes.  Raises OperationFailure on an error (e.g. trying to\ndrop an index that does not exist). <code>index_or_name</code>\ncan be either an index name (as returned by <code>create_index</code>),\nor an index specifier (as passed to <code>create_index</code>). An index\nspecifier should be a list of (key, direction) pairs. Raises\nTypeError if index is not an instance of (str, unicode, list).</p>\n<span class="prog__sub">Parameters</span>\n<li><code>index_or_name</code>: index (or name of index) to drop</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.drop_index
pymongo.collection.Collection.drop_indexes	A										<section class="prog_container"><pre><code><code>drop_indexes</code>()</pre></code><p><p>Drops all indexes on this collection.</p>\n<p>Can be used on non-existant collections or collections with no indexes.\nRaises OperationFailure on an error.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.drop_indexes
pymongo.collection.Collection.reindex	A										<section class="prog_container"><pre><code><code>reindex</code>()</pre></code><p><p>Rebuilds all indexes on this collection.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.reindex
pymongo.collection.Collection.list_indexes	A										<section class="prog_container"><pre><code><code>list_indexes</code>()</pre></code><p><p>Get a cursor over the index documents for this collection.</p>\n<pre>&gt;&gt;&gt; for index in db.test.list_indexes():\n...     print(index)\n...\nSON([(u'v', 1), (u'key', SON([(u'_id', 1)])),\n     (u'name', u'_id_'), (u'ns', u'test.test')])\n</pre>\n<col class="field-name"></col>\n<col class="field-body"></col>\n<tbody valign="top">\n<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">An instance of <code>CommandCursor</code>.</td>\n</tr>\n</tbody></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.list_indexes
pymongo.collection.Collection.index_information	A										<section class="prog_container"><pre><code><code>index_information</code>()</pre></code><p><p>Get information on this collection’s indexes.</p>\n<p>Returns a dictionary where the keys are index names (as\nreturned by create_index()) and the values are dictionaries\ncontaining information about each index. The dictionary is\nguaranteed to contain at least a single key, <code>"key"</code> which\nis a list of (key, direction) pairs specifying the index (as\npassed to create_index()). It will also contain any other\nmetadata about the indexes, except for the <code>"ns"</code> and\n<code>"name"</code> keys, which are cleaned. Example output might look\nlike this:</p>\n<pre>&gt;&gt;&gt; db.test.ensure_index("x", unique=True)\nu'x_1'\n&gt;&gt;&gt; db.test.index_information()\n{u'_id_': {u'key': [(u'_id', 1)]},\n u'x_1': {u'unique': True, u'key': [(u'x', 1)]}}\n</pre></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.index_information
pymongo.collection.Collection.drop	A										<section class="prog_container"><pre><code><code>drop</code>()</pre></code><p><p>Alias for <code>drop_collection()</code>.</p>\n<p>The following two calls are equivalent:</p>\n<pre>&gt;&gt;&gt; db.foo.drop()\n&gt;&gt;&gt; db.drop_collection("foo")\n</pre></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.drop
pymongo.collection.Collection.rename	A										<section class="prog_container"><pre><code><code>rename</code>(<em>new_name</em>, <em>**kwargs</em>)</pre></code><p><p>Rename this collection.</p>\n<p>If operating in auth mode, client must be authorized as an\nadmin to perform this operation. Raises <code>TypeError</code> if\n<code>new_name</code> is not an instance of <code>basestring</code>\n(<code>str</code> in python 3). Raises <code>InvalidName</code>\nif <code>new_name</code> is not a valid collection name.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>new_name</code>: new name for this collection</li>\n<li><code>**kwargs</code> (optional): additional arguments to the rename command\nmay be passed as keyword arguments to this helper method\n(i.e. <code>dropTarget=True</code>)</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.rename
pymongo.collection.Collection.options	A										<section class="prog_container"><pre><code><code>options</code>()</pre></code><p><p>Get the options set on this collection.</p>\n<p>Returns a dictionary of options and their values - see\n<code>create_collection()</code> for more\ninformation on the possible options. Returns an empty\ndictionary if the collection has not been created yet.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.options
pymongo.collection.Collection.group	A										<section class="prog_container"><pre><code><code>group</code>(<em>key</em>, <em>condition</em>, <em>initial</em>, <em>reduce</em>, <em>finalize=None</em>, <em>**kwargs</em>)</pre></code><p><p>Perform a query similar to an SQL <em>group by</em> operation.</p>\n<p>Returns an array of grouped items.</p>\n<p>The <code>key</code> parameter can be:</p>\n<ul class="simple">\n<li><code>None</code> to use the entire document as a key.</li>\n<li>A <code>list</code> of keys (each a <code>basestring</code>\n(<code>str</code> in python 3)) to group by.</li>\n<li>A <code>basestring</code> (<code>str</code> in python 3), or\n<code>Code</code> instance containing a JavaScript\nfunction to be applied to each document, returning the key\nto group by.</li>\n</ul>\n<p>The <code>group()</code> method obeys the <code>read_preference</code> of this\n<code>Collection</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>key</code>: fields to group by (see above description)</li>\n<li><code>condition</code>: specification of rows to be\nconsidered (as a <code>find()</code> query specification)</li>\n<li><code>initial</code>: initial value of the aggregation counter object</li>\n<li><code>reduce</code>: aggregation function as a JavaScript string</li>\n<li><code>finalize</code>: function to be called on each object in output list.</li>\n<li><code>**kwargs</code> (optional): additional arguments to the group command\nmay be passed as keyword arguments to this helper method</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.group
pymongo.collection.Collection.map_reduce	A										<section class="prog_container"><pre><code><code>map_reduce</code>(<em>map</em>, <em>reduce</em>, <em>out</em>, <em>full_response=False</em>, <em>**kwargs</em>)</pre></code><p><p>Perform a map/reduce operation on this collection.</p>\n<p>If <code>full_response</code> is <code>False</code> (default) returns a\n<code>Collection</code> instance containing\nthe results of the operation. Otherwise, returns the full\nresponse from the server to the map reduce command.</p>\n<span class="prog__sub">Parameters</span>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n<pre>&gt;&gt;&gt; db.test.map_reduce(map, reduce, "myresults", limit=2)\n</pre>\n</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.map_reduce
pymongo.collection.Collection.inline_map_reduce	A										<section class="prog_container"><pre><code><code>inline_map_reduce</code>(<em>map</em>, <em>reduce</em>, <em>full_response=False</em>, <em>**kwargs</em>)</pre></code><p><p>Perform an inline map/reduce operation on this collection.</p>\n<p>Perform the map/reduce operation on the server in RAM. A result\ncollection is not created. The result set is returned as a list\nof documents.</p>\n<p>If <code>full_response</code> is <code>False</code> (default) returns the\nresult documents in a list. Otherwise, returns the full\nresponse from the server to the map reduce command.</p>\n<p>The <code>inline_map_reduce()</code> method obeys the <code>read_preference</code>\nof this <code>Collection</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li>\n</li>\n<li>\n</li>\n<li>\n</li>\n<li>\n<pre>&gt;&gt;&gt; db.test.inline_map_reduce(map, reduce, limit=2)\n</pre>\n</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.inline_map_reduce
pymongo.collection.Collection.parallel_scan	A										<section class="prog_container"><pre><code><code>parallel_scan</code>(<em>num_cursors</em>, <em>**kwargs</em>)</pre></code><p><p>Scan this entire collection in parallel.</p>\n<p>Returns a list of up to <code>num_cursors</code> cursors that can be iterated\nconcurrently. As long as the collection is not modified during\nscanning, each document appears once in one of the cursors result\nsets.</p>\n<p>For example, to process each document in a collection using some\nthread-safe <code>process_document()</code> function:</p>\n<pre>&gt;&gt;&gt; def process_cursor(cursor):\n...     for document in cursor:\n...     # Some thread-safe processing function:\n...     process_document(document)\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Get up to 4 cursors.\n...\n&gt;&gt;&gt; cursors = collection.parallel_scan(4)\n&gt;&gt;&gt; threads = [\n...     threading.Thread(target=process_cursor, args=(cursor,))\n...     for cursor in cursors]\n&gt;&gt;&gt;\n&gt;&gt;&gt; for thread in threads:\n...     thread.start()\n&gt;&gt;&gt;\n&gt;&gt;&gt; for thread in threads:\n...     thread.join()\n&gt;&gt;&gt;\n&gt;&gt;&gt; # All documents have now been processed.\n</pre>\n<p>The <code>parallel_scan()</code> method obeys the <code>read_preference</code> of\nthis <code>Collection</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>num_cursors</code>: the number of cursors to return</li>\n<li><code>**kwargs</code>: additional options for the parallelCollectionScan\ncommand can be passed as keyword arguments.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.parallel_scan
pymongo.collection.Collection.initialize_unordered_bulk_op	A										<section class="prog_container"><pre><code><code>initialize_unordered_bulk_op</code>(<em>bypass_document_validation=False</em>)</pre></code><p><p>Initialize an unordered batch of write operations.</p>\n<p>Operations will be performed on the server in arbitrary order,\npossibly in parallel. All operations will be attempted.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>bypass_document_validation</code>: (optional) If <code>True</code>, allows the\nwrite to opt-out of document level validation. Default is\n<code>False</code>.</li>\n<p>Returns a <code>BulkOperationBuilder</code> instance.</p>\n<p>See Unordered Bulk Write Operations for examples.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.initialize_unordered_bulk_op
pymongo.collection.Collection.initialize_ordered_bulk_op	A										<section class="prog_container"><pre><code><code>initialize_ordered_bulk_op</code>(<em>bypass_document_validation=False</em>)</pre></code><p><p>Initialize an ordered batch of write operations.</p>\n<p>Operations will be performed on the server serially, in the\norder provided. If an error occurs all remaining operations\nare aborted.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>bypass_document_validation</code>: (optional) If <code>True</code>, allows the\nwrite to opt-out of document level validation. Default is\n<code>False</code>.</li>\n<p>Returns a <code>BulkOperationBuilder</code> instance.</p>\n<p>See Ordered Bulk Write Operations for examples.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.initialize_ordered_bulk_op
pymongo.collection.Collection.insert	A										<section class="prog_container"><pre><code><code>insert</code>(<em>doc_or_docs</em>, <em>manipulate=True</em>, <em>check_keys=True</em>, <em>continue_on_error=False</em>, <em>**kwargs</em>)</pre></code><p><p>Insert a document(s) into this collection.</p>\n<p><strong>DEPRECATED</strong> - Use <code>insert_one()</code> or <code>insert_many()</code> instead.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.insert
pymongo.collection.Collection.save	A										<section class="prog_container"><pre><code><code>save</code>(<em>to_save</em>, <em>manipulate=True</em>, <em>check_keys=True</em>, <em>**kwargs</em>)</pre></code><p><p>Save a document in this collection.</p>\n<p><strong>DEPRECATED</strong> - Use <code>insert_one()</code> or <code>replace_one()</code> instead.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.save
pymongo.collection.Collection.update	A										<section class="prog_container"><pre><code><code>update</code>(<em>spec</em>, <em>document</em>, <em>upsert=False</em>, <em>manipulate=False</em>, <em>multi=False</em>, <em>check_keys=True</em>, <em>**kwargs</em>)</pre></code><p><p>Update a document(s) in this collection.</p>\n<p><strong>DEPRECATED</strong> - Use <code>replace_one()</code>, <code>update_one()</code>, or\n<code>update_many()</code> instead.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.update
pymongo.collection.Collection.remove	A										<section class="prog_container"><pre><code><code>remove</code>(<em>spec_or_id=None</em>, <em>multi=True</em>, <em>**kwargs</em>)</pre></code><p><p>Remove a document(s) from this collection.</p>\n<p><strong>DEPRECATED</strong> - Use <code>delete_one()</code> or <code>delete_many()</code> instead.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.remove
pymongo.collection.Collection.find_and_modify	A										<section class="prog_container"><pre><code><code>find_and_modify</code>(<em>query={}</em>, <em>update=None</em>, <em>upsert=False</em>, <em>sort=None</em>, <em>full_response=False</em>, <em>manipulate=False</em>, <em>**kwargs</em>)</pre></code><p><p>Update and return an object.</p>\n<p><strong>DEPRECATED</strong> - Use <code>find_one_and_delete()</code>,\n<code>find_one_and_replace()</code>, or <code>find_one_and_update()</code> instead.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.find_and_modify
pymongo.collection.Collection.ensure_index	A										<section class="prog_container"><pre><code><code>ensure_index</code>(<em>key_or_list</em>, <em>cache_for=300</em>, <em>**kwargs</em>)</pre></code><p><p><strong>DEPRECATED</strong> - Ensures that an index exists on this collection.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.ensure_index
pymongo.collection.Collection.full_name	A										<section class="prog_container"><pre><code><code>full_name</code></pre></code><p><p>The full name of this <code>Collection</code>.</p>\n<p>The full name is of the form <code>database_name.collection_name</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.full_name
pymongo.collection.Collection.name	A										<section class="prog_container"><pre><code><code>name</code></pre></code><p><p>The name of this <code>Collection</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.name
pymongo.collection.Collection.database	A										<section class="prog_container"><pre><code><code>database</code></pre></code><p><p>The <code>Database</code> that this\n<code>Collection</code> is a part of.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.database
pymongo.collection.Collection.codec_options	A										<section class="prog_container"><pre><code><code>codec_options</code></pre></code><p><p>Read only access to the <code>CodecOptions</code>\nof this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.codec_options
pymongo.collection.Collection.read_preference	A										<section class="prog_container"><pre><code><code>read_preference</code></pre></code><p><p>Read only access to the read preference of this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.read_preference
pymongo.collection.Collection.write_concern	A										<section class="prog_container"><pre><code><code>write_concern</code></pre></code><p><p>Read only access to the <code>WriteConcern</code>\nof this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.write_concern
pymongo.collection.Collection	A										<section class="prog_container"><pre><code><em>class </em>pymongo.collection.Collection(<em>database</em>, <em>name</em>, <em>create=False</em>, <em>**kwargs</em>)</pre></code><p><p>Get / create a Mongo collection.</p>\n<p>Raises <code>TypeError</code> if <code>name</code> is not an instance of\n<code>basestring</code> (<code>str</code> in python 3). Raises\n<code>InvalidName</code> if <code>name</code> is not a valid\ncollection name. Any additional keyword arguments will be used\nas options passed to the create command. See\n<code>create_collection()</code> for valid\noptions.</p>\n<p>If <code>create</code> is <code>True</code>, <code>collation</code> is specified, or any additional\nkeyword arguments are present, a <code>create</code> command will be\nsent. Otherwise, a <code>create</code> command will not be sent and the\ncollection will be created implicitly on first use.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>database</code>: the database to get a collection from</li>\n<li><code>name</code>: the name of the collection to get</li>\n<li><code>create</code> (optional): if <code>True</code>, force collection\ncreation even without options being set</li>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>. If <code>None</code> (the\ndefault) database.codec_options is used.</li>\n<li><code>read_preference</code> (optional): The read preference to use. If\n<code>None</code> (the default) database.read_preference is used.</li>\n<li><code>write_concern</code> (optional): An instance of\n<code>WriteConcern</code>. If <code>None</code> (the\ndefault) database.write_concern is used.</li>\n<li><code>read_concern</code> (optional): An instance of\n<code>ReadConcern</code>. If <code>None</code> (the\ndefault) database.read_concern is used.</li>\n<li><code>collation</code> (optional): An instance of\n<code>Collation</code>. If a collation is provided,\nit will be passed to the create collection command. This option is\nonly supported on MongoDB 3.4 and above.</li>\n<li><code>**kwargs</code> (optional): additional keyword arguments will\nbe passed as options for the create collection command</li>\n<dl class="describe">\n<dt>\n<code>c[name] || c.name</code></dt>\n<dd><p>Get the <code>name</code> sub-collection of <code>Collection</code> <code>c</code>.</p>\n<p>Raises <code>InvalidName</code> if an invalid\ncollection name is used.</p>\n</dd></dl></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection
pymongo.ASCENDING	A										<section class="prog_container"><pre><code>pymongo.ASCENDING<em> = 1</em></pre></code><p><p>Ascending sort order.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.ASCENDING
pymongo.DESCENDING	A										<section class="prog_container"><pre><code>pymongo.DESCENDING<em> = -1</em></pre></code><p><p>Descending sort order.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.DESCENDING
pymongo.GEO2D	A										<section class="prog_container"><pre><code>pymongo.GEO2D<em> = '2d'</em></pre></code><p><p>Index specifier for a 2-dimensional geospatial index.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.GEO2D
pymongo.GEOHAYSTACK	A										<section class="prog_container"><pre><code>pymongo.GEOHAYSTACK<em> = 'geoHaystack'</em></pre></code><p><p>Index specifier for a 2-dimensional haystack index.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.GEOHAYSTACK
pymongo.GEOSPHERE	A										<section class="prog_container"><pre><code>pymongo.GEOSPHERE<em> = '2dsphere'</em></pre></code><p><p>Index specifier for a spherical geospatial index.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.GEOSPHERE
pymongo.HASHED	A										<section class="prog_container"><pre><code>pymongo.HASHED<em> = 'hashed'</em></pre></code><p><p>Index specifier for a hashed index.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.HASHED
pymongo.TEXT	A										<section class="prog_container"><pre><code>pymongo.TEXT<em> = 'text'</em></pre></code><p><p>Index specifier for a text index.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.TEXT
pymongo.command_cursor.CommandCursor.batch_size	A										<section class="prog_container"><pre><code><code>batch_size</code>(<em>batch_size</em>)</pre></code><p><p>Limits the number of documents returned in one batch. Each batch\nrequires a round trip to the server. It can be adjusted to optimize\nperformance and limit data transfer.</p>\n<p>Raises <code>TypeError</code> if <code>batch_size</code> is not an integer.\nRaises <code>ValueError</code> if <code>batch_size</code> is less than <code>0</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>batch_size</code>: The size of each batch of results requested.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/command_cursor.html#pymongo.command_cursor.CommandCursor.batch_size
pymongo.command_cursor.CommandCursor.close	A										<section class="prog_container"><pre><code><code>close</code>()</pre></code><p><p>Explicitly close / kill this cursor. Required for PyPy, Jython and\nother Python implementations that don’t use reference counting\ngarbage collection.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/command_cursor.html#pymongo.command_cursor.CommandCursor.close
pymongo.command_cursor.CommandCursor.next	A										<section class="prog_container"><pre><code><code>next</code>()</pre></code><p><p>Advance the cursor.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/command_cursor.html#pymongo.command_cursor.CommandCursor.next
pymongo.command_cursor.CommandCursor.address	A										<section class="prog_container"><pre><code><code>address</code></pre></code><p><p>The (host, port) of the server used, or None.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/command_cursor.html#pymongo.command_cursor.CommandCursor.address
pymongo.command_cursor.CommandCursor.alive	A										<section class="prog_container"><pre><code><code>alive</code></pre></code><p><p>Does this cursor have the potential to return more data?</p>\n<p>Even if <code>alive</code> is <code>True</code>, <code>next()</code> can raise\n<code>StopIteration</code>. Best to use a for loop:</p>\n<pre>for doc in collection.aggregate(pipeline):\n    print(doc)\n</pre></p></section>	http://api.mongodb.com/python/current/api/pymongo/command_cursor.html#pymongo.command_cursor.CommandCursor.alive
pymongo.command_cursor.CommandCursor.cursor_id	A										<section class="prog_container"><pre><code><code>cursor_id</code></pre></code><p><p>Returns the id of the cursor.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/command_cursor.html#pymongo.command_cursor.CommandCursor.cursor_id
pymongo.command_cursor.CommandCursor	A										<section class="prog_container"><pre><code><em>class </em>pymongo.command_cursor.CommandCursor(<em>collection</em>, <em>cursor_info</em>, <em>address</em>, <em>retrieved=0</em>)</pre></code><p><p>Create a new command cursor.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/command_cursor.html#pymongo.command_cursor.CommandCursor
pymongo.cursor.CursorType.NON_TAILABLE	A										<section class="prog_container"><pre><code><code>NON_TAILABLE</code></pre></code><p><p>The standard cursor type.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.CursorType.NON_TAILABLE
pymongo.cursor.CursorType.TAILABLE	A										<section class="prog_container"><pre><code><code>TAILABLE</code></pre></code><p><p>The tailable cursor type.</p>\n<p>Tailable cursors are only for use with capped collections. They are not\nclosed when the last data is retrieved but are kept open and the cursor\nlocation marks the final document position. If more data is received\niteration of the cursor will continue from the last document received.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.CursorType.TAILABLE
pymongo.cursor.CursorType.TAILABLE_AWAIT	A										<section class="prog_container"><pre><code><code>TAILABLE_AWAIT</code></pre></code><p><p>A tailable cursor with the await option set.</p>\n<p>Creates a tailable cursor that will wait for a few seconds after returning\nthe full result set so that it can capture and return additional data added\nduring the query.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.CursorType.TAILABLE_AWAIT
pymongo.cursor.CursorType.EXHAUST	A										<section class="prog_container"><pre><code><code>EXHAUST</code></pre></code><p><p>An exhaust cursor.</p>\n<p>MongoDB will stream batched results to the client without waiting for the\nclient to request each batch, reducing latency.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.CursorType.EXHAUST
pymongo.cursor.CursorType	A										<section class="prog_container"><pre><code><em>class </em>pymongo.cursor.CursorType</pre></code><p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.CursorType
pymongo.cursor.Cursor.__getitem__	A										<section class="prog_container"><pre><code><code>__getitem__</code>(<em>index</em>)</pre></code><p><p>Get a single document or a slice of documents from this cursor.</p>\n<p>Raises <code>InvalidOperation</code> if this\ncursor has already been used.</p>\n<p>To get a single document use an integral index, e.g.:</p>\n<pre>&gt;&gt;&gt; db.test.find()[50]\n</pre>\n<p>An <code>IndexError</code> will be raised if the index is negative\nor greater than the amount of documents in this cursor. Any\nlimit previously applied to this cursor will be ignored.</p>\n<p>To get a slice of documents use a slice index, e.g.:</p>\n<pre>&gt;&gt;&gt; db.test.find()[20:25]\n</pre>\n<p>This will return this cursor with a limit of <code>5</code> and skip of\n<code>20</code> applied.  Using a slice index will override any prior\nlimits or skips applied to this cursor (including those\napplied through previous calls to this method). Raises\n<code>IndexError</code> when the slice has a step, a negative\nstart value, or a stop value less than or equal to the start\nvalue.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>index</code>: An integer or slice index to be applied to this cursor</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.__getitem__
pymongo.cursor.Cursor.add_option	A										<section class="prog_container"><pre><code><code>add_option</code>(<em>mask</em>)</pre></code><p><p>Set arbitrary query flags using a bitmask.</p>\n<p>To set the tailable flag:\ncursor.add_option(2)</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.add_option
pymongo.cursor.Cursor.batch_size	A										<section class="prog_container"><pre><code><code>batch_size</code>(<em>batch_size</em>)</pre></code><p><p>Limits the number of documents returned in one batch. Each batch\nrequires a round trip to the server. It can be adjusted to optimize\nperformance and limit data transfer.</p>\n<p>Raises <code>TypeError</code> if <code>batch_size</code> is not an integer.\nRaises <code>ValueError</code> if <code>batch_size</code> is less than <code>0</code>.\nRaises <code>InvalidOperation</code> if this\n<code>Cursor</code> has already been used. The last <code>batch_size</code>\napplied to this cursor takes precedence.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>batch_size</code>: The size of each batch of results requested.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.batch_size
pymongo.cursor.Cursor.clone	A										<section class="prog_container"><pre><code><code>clone</code>()</pre></code><p><p>Get a clone of this cursor.</p>\n<p>Returns a new Cursor instance with options matching those that have\nbeen set on the current instance. The clone will be completely\nunevaluated, even if the current instance has been partially or\ncompletely evaluated.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.clone
pymongo.cursor.Cursor.close	A										<section class="prog_container"><pre><code><code>close</code>()</pre></code><p><p>Explicitly close / kill this cursor. Required for PyPy, Jython and\nother Python implementations that don’t use reference counting\ngarbage collection.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.close
pymongo.cursor.Cursor.collation	A										<section class="prog_container"><pre><code><code>collation</code>(<em>collation</em>)</pre></code><p><p>Adds a <code>Collation</code> to this query.</p>\n<p>This option is only supported on MongoDB 3.4 and above.</p>\n<p>Raises <code>TypeError</code> if <code>collation</code> is not an instance of\n<code>Collation</code> or a <code>dict</code>. Raises\n<code>InvalidOperation</code> if this <code>Cursor</code> has\nalready been used. Only the last collation applied to this cursor has\nany effect.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>collation</code>: An instance of <code>Collation</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.collation
pymongo.cursor.Cursor.comment	A										<section class="prog_container"><pre><code><code>comment</code>(<em>comment</em>)</pre></code><p><p>Adds a ‘comment’ to the cursor.</p>\n<p>http://docs.mongodb.org/manual/reference/operator/comment/</p>\n<span class="prog__sub">Parameters</span>\n<li><code>comment</code>: A string or document</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.comment
pymongo.cursor.Cursor.count	A										<section class="prog_container"><pre><code><code>count</code>(<em>with_limit_and_skip=False</em>)</pre></code><p><p>Get the size of the results set for this query.</p>\n<p>Returns the number of documents in the results set for this query. Does\nnot take <code>limit()</code> and <code>skip()</code> into account by default - set\n<code>with_limit_and_skip</code> to <code>True</code> if that is the desired behavior.\nRaises <code>OperationFailure</code> on a database error.</p>\n<p>When used with MongoDB &gt;= 2.6, <code>count()</code> uses any <code>hint()</code>\napplied to the query. In the following example the hint is passed to\nthe count command:</p>\ncollection.find({‘field’: ‘value’}).hint(‘field_1’).count()\n<p>The <code>count()</code> method obeys the\n<code>read_preference</code> of the\n<code>Collection</code> instance on which\n<code>find()</code> was called.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>with_limit_and_skip</code> (optional): take any <code>limit()</code> or\n<code>skip()</code> that has been applied to this cursor into account when\ngetting the count</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.count
pymongo.cursor.Cursor.distinct	A										<section class="prog_container"><pre><code><code>distinct</code>(<em>key</em>)</pre></code><p><p>Get a list of distinct values for <code>key</code> among all documents\nin the result set of this query.</p>\n<p>Raises <code>TypeError</code> if <code>key</code> is not an instance of\n<code>basestring</code> (<code>str</code> in python 3).</p>\n<p>The <code>distinct()</code> method obeys the\n<code>read_preference</code> of the\n<code>Collection</code> instance on which\n<code>find()</code> was called.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>key</code>: name of key for which we want to get the distinct values</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.distinct
pymongo.cursor.Cursor.explain	A										<section class="prog_container"><pre><code><code>explain</code>()</pre></code><p><p>Returns an explain plan record for this cursor.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.explain
pymongo.cursor.Cursor.hint	A										<section class="prog_container"><pre><code><code>hint</code>(<em>index</em>)</pre></code><p><p>Adds a ‘hint’, telling Mongo the proper index to use for the query.</p>\n<p>Judicious use of hints can greatly improve query\nperformance. When doing a query on multiple fields (at least\none of which is indexed) pass the indexed field as a hint to\nthe query. Hinting will not do anything if the corresponding\nindex does not exist. Raises\n<code>InvalidOperation</code> if this cursor has\nalready been used.</p>\n<p><code>index</code> should be an index as passed to\n<code>create_index()</code>\n(e.g. <code>[('field', ASCENDING)]</code>) or the name of the index.\nIf <code>index</code> is <code>None</code> any existing hint for this query is\ncleared. The last hint applied to this cursor takes precedence\nover all others.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>index</code>: index to hint on (as an index specifier)</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.hint
pymongo.cursor.Cursor.limit	A										<section class="prog_container"><pre><code><code>limit</code>(<em>limit</em>)</pre></code><p><p>Limits the number of results to be returned by this cursor.</p>\n<p>Raises <code>TypeError</code> if <code>limit</code> is not an integer. Raises\n<code>InvalidOperation</code> if this <code>Cursor</code>\nhas already been used. The last <code>limit</code> applied to this cursor\ntakes precedence. A limit of <code>0</code> is equivalent to no limit.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>limit</code>: the number of results to return</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.limit
pymongo.cursor.Cursor.max	A										<section class="prog_container"><pre><code><code>max</code>(<em>spec</em>)</pre></code><p><p>Adds <code>max</code> operator that specifies upper bound for specific index.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>spec</code>: a list of field, limit pairs specifying the exclusive\nupper bound for all keys of a specific index in order.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.max
pymongo.cursor.Cursor.max_await_time_ms	A										<section class="prog_container"><pre><code><code>max_await_time_ms</code>(<em>max_await_time_ms</em>)</pre></code><p><p>Specifies a time limit for a getMore operation on a\n<code>TAILABLE_AWAIT</code> cursor. For all other\ntypes of cursor max_await_time_ms is ignored.</p>\n<p>Raises <code>TypeError</code> if <code>max_await_time_ms</code> is not an integer or\n<code>None</code>. Raises <code>InvalidOperation</code> if this\n<code>Cursor</code> has already been used.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>max_await_time_ms</code>: the time limit after which the operation is\naborted</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.max_await_time_ms
pymongo.cursor.Cursor.max_scan	A										<section class="prog_container"><pre><code><code>max_scan</code>(<em>max_scan</em>)</pre></code><p><p>Limit the number of documents to scan when performing the query.</p>\n<p>Raises <code>InvalidOperation</code> if this\ncursor has already been used. Only the last <code>max_scan()</code>\napplied to this cursor has any effect.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>max_scan</code>: the maximum number of documents to scan</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.max_scan
pymongo.cursor.Cursor.max_time_ms	A										<section class="prog_container"><pre><code><code>max_time_ms</code>(<em>max_time_ms</em>)</pre></code><p><p>Specifies a time limit for a query operation. If the specified\ntime is exceeded, the operation will be aborted and\n<code>ExecutionTimeout</code> is raised. If <code>max_time_ms</code>\nis <code>None</code> no limit is applied.</p>\n<p>Raises <code>TypeError</code> if <code>max_time_ms</code> is not an integer or <code>None</code>.\nRaises <code>InvalidOperation</code> if this <code>Cursor</code>\nhas already been used.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>max_time_ms</code>: the time limit after which the operation is aborted</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.max_time_ms
pymongo.cursor.Cursor.min	A										<section class="prog_container"><pre><code><code>min</code>(<em>spec</em>)</pre></code><p><p>Adds <code>min</code> operator that specifies lower bound for specific index.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>spec</code>: a list of field, limit pairs specifying the inclusive\nlower bound for all keys of a specific index in order.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.min
pymongo.cursor.Cursor.next	A										<section class="prog_container"><pre><code><code>next</code>()</pre></code><p><p>Advance the cursor.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.next
pymongo.cursor.Cursor.remove_option	A										<section class="prog_container"><pre><code><code>remove_option</code>(<em>mask</em>)</pre></code><p><p>Unset arbitrary query flags using a bitmask.</p>\n<p>To unset the tailable flag:\ncursor.remove_option(2)</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.remove_option
pymongo.cursor.Cursor.rewind	A										<section class="prog_container"><pre><code><code>rewind</code>()</pre></code><p><p>Rewind this cursor to its unevaluated state.</p>\n<p>Reset this cursor if it has been partially or completely evaluated.\nAny options that are present on the cursor will remain in effect.\nFuture iterating performed on this cursor will cause new queries to\nbe sent to the server, even if the resultant data has already been\nretrieved by this cursor.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.rewind
pymongo.cursor.Cursor.skip	A										<section class="prog_container"><pre><code><code>skip</code>(<em>skip</em>)</pre></code><p><p>Skips the first <code>skip</code> results of this cursor.</p>\n<p>Raises <code>TypeError</code> if <code>skip</code> is not an integer. Raises\n<code>ValueError</code> if <code>skip</code> is less than <code>0</code>. Raises\n<code>InvalidOperation</code> if this <code>Cursor</code> has\nalready been used. The last <code>skip</code> applied to this cursor takes\nprecedence.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>skip</code>: the number of results to skip</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.skip
pymongo.cursor.Cursor.sort	A										<section class="prog_container"><pre><code><code>sort</code>(<em>key_or_list</em>, <em>direction=None</em>)</pre></code><p><p>Sorts this cursor’s results.</p>\n<p>Pass a field name and a direction, either\n<code>ASCENDING</code> or <code>DESCENDING</code>:</p>\n<pre>for doc in collection.find().sort('field', pymongo.ASCENDING):\n    print(doc)\n</pre>\n<p>To sort by multiple fields, pass a list of (key, direction) pairs:</p>\n<pre>for doc in collection.find().sort([\n        ('field1', pymongo.ASCENDING),\n        ('field2', pymongo.DESCENDING)]):\n    print(doc)\n</pre>\n<p>Beginning with MongoDB version 2.6, text search results can be\nsorted by relevance:</p>\n<pre>cursor = db.test.find(\n    {'$text': {'$search': 'some words'}},\n    {'score': {'$meta': 'textScore'}})\n# Sort by 'score' field.\ncursor.sort([('score', {'$meta': 'textScore'})])\nfor doc in cursor:\n    print(doc)\n</pre>\n<p>Raises <code>InvalidOperation</code> if this cursor has\nalready been used. Only the last <code>sort()</code> applied to this\ncursor has any effect.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>key_or_list</code>: a single key or a list of (key, direction)\npairs specifying the keys to sort on</li>\n<li><code>direction</code> (optional): only used if <code>key_or_list</code> is a single\nkey, if not given <code>ASCENDING</code> is assumed</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.sort
pymongo.cursor.Cursor.where	A										<section class="prog_container"><pre><code><code>where</code>(<em>code</em>)</pre></code><p><p>Adds a $where clause to this query.</p>\n<p>The <code>code</code> argument must be an instance of <code>basestring</code>\n(<code>str</code> in python 3) or <code>Code</code>\ncontaining a JavaScript expression. This expression will be\nevaluated for each document scanned. Only those documents\nfor which the expression evaluates to <em>true</em> will be returned\nas results. The keyword <em>this</em> refers to the object currently\nbeing scanned.</p>\n<p>Raises <code>TypeError</code> if <code>code</code> is not an instance of\n<code>basestring</code> (<code>str</code> in python 3). Raises\n<code>InvalidOperation</code> if this\n<code>Cursor</code> has already been used. Only the last call to\n<code>where()</code> applied to a <code>Cursor</code> has any effect.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>code</code>: JavaScript expression to use as a filter</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.where
pymongo.cursor.Cursor.address	A										<section class="prog_container"><pre><code><code>address</code></pre></code><p><p>The (host, port) of the server used, or None.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.address
pymongo.cursor.Cursor.alive	A										<section class="prog_container"><pre><code><code>alive</code></pre></code><p><p>Does this cursor have the potential to return more data?</p>\n<p>This is mostly useful with tailable cursors\nsince they will stop iterating even though they <em>may</em> return more\nresults in the future.</p>\n<p>With regular cursors, simply use a for loop instead of <code>alive</code>:</p>\n<pre>for doc in collection.find():\n    print(doc)\n</pre></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.alive
pymongo.cursor.Cursor.collection	A										<section class="prog_container"><pre><code><code>collection</code></pre></code><p><p>The <code>Collection</code> that this\n<code>Cursor</code> is iterating.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.collection
pymongo.cursor.Cursor.cursor_id	A										<section class="prog_container"><pre><code><code>cursor_id</code></pre></code><p><p>Returns the id of the cursor</p>\n<p>Useful if you need to manage cursor ids and want to handle killing\ncursors manually using\n<code>kill_cursors()</code></p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.cursor_id
pymongo.cursor.Cursor.retrieved	A										<section class="prog_container"><pre><code><code>retrieved</code></pre></code><p><p>The number of documents retrieved so far.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor.retrieved
pymongo.cursor.Cursor	A										<section class="prog_container"><pre><code><em>class </em>pymongo.cursor.Cursor(<em>collection</em>, <em>filter=None</em>, <em>projection=None</em>, <em>skip=0</em>, <em>limit=0</em>, <em>no_cursor_timeout=False</em>, <em>cursor_type=CursorType.NON_TAILABLE</em>, <em>sort=None</em>, <em>allow_partial_results=False</em>, <em>oplog_replay=False</em>, <em>modifiers=None</em>, <em>manipulate=True</em>)</pre></code><p><p>Create a new cursor.</p>\n<p>Should not be called directly by application developers - see\n<code>find()</code> instead.</p>\n<dl class="describe">\n<dt>\n<code>c[index]</code></dt>\n<dd><p>See <code>__getitem__()</code>.</p>\n</dd></dl></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor
pymongo.bulk.BulkOperationBuilder.execute	A										<section class="prog_container"><pre><code><code>execute</code>(<em>write_concern=None</em>)</pre></code><p><p>Execute all provided operations.</p>\n<span class="prog__sub">Parameters</span>\n<li>write_concern (optional): the write concern for this bulk\nexecution.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkOperationBuilder.execute
pymongo.bulk.BulkOperationBuilder.find	A										<section class="prog_container"><pre><code><code>find</code>(<em>selector</em>, <em>collation=None</em>)</pre></code><p><p>Specify selection criteria for bulk operations.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>selector</code> (dict): the selection criteria for update\nand remove operations.</li>\n<li><code>collation</code> (optional): An instance of\n<code>Collation</code>. This option is only supported\non MongoDB 3.4 and above.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkOperationBuilder.find
pymongo.bulk.BulkOperationBuilder.insert	A										<section class="prog_container"><pre><code><code>insert</code>(<em>document</em>)</pre></code><p><p>Insert a single document.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>document</code> (dict): the document to insert</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkOperationBuilder.insert
pymongo.bulk.BulkOperationBuilder	A										<section class="prog_container"><pre><code><em>class </em>pymongo.bulk.BulkOperationBuilder(<em>collection</em>, <em>ordered=True</em>, <em>bypass_document_validation=False</em>)</pre></code><p><p>Initialize a new BulkOperationBuilder instance.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>collection</code>: A <code>Collection</code> instance.</li>\n<li><code>ordered</code> (optional): If <code>True</code> all operations will be executed\nserially, in the order provided, and the entire execution will\nabort on the first error. If <code>False</code> operations will be executed\nin arbitrary order (possibly in parallel on the server), reporting\nany errors that occurred after attempting all operations. Defaults\nto <code>True</code>.</li>\n<li><code>bypass_document_validation</code>: (optional) If <code>True</code>, allows the\nwrite to opt-out of document level validation. Default is\n<code>False</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkOperationBuilder
pymongo.bulk.BulkUpsertOperation.replace_one	A										<section class="prog_container"><pre><code><code>replace_one</code>(<em>replacement</em>)</pre></code><p><p>Replace one entire document matching the selector criteria.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>replacement</code> (dict): the replacement document</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkUpsertOperation.replace_one
pymongo.bulk.BulkUpsertOperation.update	A										<section class="prog_container"><pre><code><code>update</code>(<em>update</em>)</pre></code><p><p>Update all documents matching the selector.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>update</code> (dict): the update operations to apply</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkUpsertOperation.update
pymongo.bulk.BulkUpsertOperation.update_one	A										<section class="prog_container"><pre><code><code>update_one</code>(<em>update</em>)</pre></code><p><p>Update one document matching the selector.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>update</code> (dict): the update operations to apply</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkUpsertOperation.update_one
pymongo.bulk.BulkUpsertOperation	A										<section class="prog_container"><pre><code><em>class </em>pymongo.bulk.BulkUpsertOperation(<em>selector</em>, <em>bulk</em>, <em>collation</em>)</pre></code><p><p>An interface for adding upsert operations.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkUpsertOperation
pymongo.bulk.BulkWriteOperation.remove	A										<section class="prog_container"><pre><code><code>remove</code>()</pre></code><p><p>Remove all documents matching the selector criteria.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkWriteOperation.remove
pymongo.bulk.BulkWriteOperation.remove_one	A										<section class="prog_container"><pre><code><code>remove_one</code>()</pre></code><p><p>Remove a single document matching the selector criteria.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkWriteOperation.remove_one
pymongo.bulk.BulkWriteOperation.replace_one	A										<section class="prog_container"><pre><code><code>replace_one</code>(<em>replacement</em>)</pre></code><p><p>Replace one entire document matching the selector criteria.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>replacement</code> (dict): the replacement document</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkWriteOperation.replace_one
pymongo.bulk.BulkWriteOperation.update	A										<section class="prog_container"><pre><code><code>update</code>(<em>update</em>)</pre></code><p><p>Update all documents matching the selector criteria.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>update</code> (dict): the update operations to apply</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkWriteOperation.update
pymongo.bulk.BulkWriteOperation.update_one	A										<section class="prog_container"><pre><code><code>update_one</code>(<em>update</em>)</pre></code><p><p>Update one document matching the selector criteria.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>update</code> (dict): the update operations to apply</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkWriteOperation.update_one
pymongo.bulk.BulkWriteOperation.upsert	A										<section class="prog_container"><pre><code><code>upsert</code>()</pre></code><p><p>Specify that all chained update operations should be\nupserts.</p>\n<span class="prog__sub">Parameters</span>\n<li>A <code>BulkUpsertOperation</code> instance, used to add\nupdate operations to this bulk operation.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkWriteOperation.upsert
pymongo.bulk.BulkWriteOperation	A										<section class="prog_container"><pre><code><em>class </em>pymongo.bulk.BulkWriteOperation(<em>selector</em>, <em>bulk</em>, <em>collation</em>)</pre></code><p><p>An interface for adding update or remove operations.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkWriteOperation
pymongo.errors.OperationFailure.code	A										<section class="prog_container"><pre><code>code</pre></code><p><p>The error code returned by the server, if any.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.OperationFailure.code
pymongo.errors.OperationFailure.details	A										<section class="prog_container"><pre><code>details</pre></code><p><p>The complete error document returned by the server.</p>\n<p>Depending on the error that occurred, the error document\nmay include useful information beyond just the error\nmessage. When connected to a mongos the error document\nmay contain one or more subdocuments if errors occurred\non multiple shards.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.OperationFailure.details
pymongo.errors.AutoReconnect	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.AutoReconnect(<em>message=''</em>, <em>errors=None</em>)</pre></code><p><p>Raised when a connection to the database is lost and an attempt to\nauto-reconnect will be made.</p>\n<p>In order to auto-reconnect you must handle this exception, recognizing that\nthe operation which caused it has not necessarily succeeded. Future\noperations will attempt to open a new connection to the database (and\nwill continue to raise this exception until the first successful\nconnection is made).</p>\n<p>Subclass of <code>ConnectionFailure</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.AutoReconnect
pymongo.errors.BulkWriteError	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.BulkWriteError(<em>results</em>)</pre></code><p><p>Exception class for bulk write errors.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.BulkWriteError
pymongo.errors.CollectionInvalid	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.CollectionInvalid</pre></code><p><p>Raised when collection validation fails.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.CollectionInvalid
pymongo.errors.ConfigurationError	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.ConfigurationError</pre></code><p><p>Raised when something is incorrectly configured.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ConfigurationError
pymongo.errors.ConnectionFailure	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.ConnectionFailure</pre></code><p><p>Raised when a connection to the database cannot be made or is lost.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ConnectionFailure
pymongo.errors.CursorNotFound	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.CursorNotFound(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Raised while iterating query results if the cursor is\ninvalidated on the server.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.CursorNotFound
pymongo.errors.DocumentTooLarge	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.DocumentTooLarge</pre></code><p><p>Raised when an encoded document is too large for the connected server.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.DocumentTooLarge
pymongo.errors.DuplicateKeyError	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.DuplicateKeyError(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Raised when an insert or update fails due to a duplicate key error.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.DuplicateKeyError
pymongo.errors.ExceededMaxWaiters	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.ExceededMaxWaiters</pre></code><p><p>Raised when a thread tries to get a connection from a pool and\n<code>maxPoolSize * waitQueueMultiple</code> threads are already waiting.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ExceededMaxWaiters
pymongo.errors.ExecutionTimeout	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.ExecutionTimeout(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Raised when a database operation times out, exceeding the $maxTimeMS\nset in the query or command option.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ExecutionTimeout
pymongo.errors.InvalidName	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.InvalidName</pre></code><p><p>Raised when an invalid name is used.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.InvalidName
pymongo.errors.InvalidOperation	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.InvalidOperation</pre></code><p><p>Raised when a client attempts to perform an invalid operation.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.InvalidOperation
pymongo.errors.InvalidURI	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.InvalidURI</pre></code><p><p>Raised when trying to parse an invalid mongodb URI.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.InvalidURI
pymongo.errors.NetworkTimeout	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.NetworkTimeout(<em>message=''</em>, <em>errors=None</em>)</pre></code><p><p>An operation on an open connection exceeded socketTimeoutMS.</p>\n<p>The remaining connections in the pool stay open. In the case of a write\noperation, you cannot know whether it succeeded or failed.</p>\n<p>Subclass of <code>AutoReconnect</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.NetworkTimeout
pymongo.errors.NotMasterError	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.NotMasterError(<em>message=''</em>, <em>errors=None</em>)</pre></code><p><p>The server responded “not master” or “node is recovering”.</p>\n<p>These errors result from a query, write, or command. The operation failed\nbecause the client thought it was using the primary but the primary has\nstepped down, or the client thought it was using a healthy secondary but\nthe secondary is stale and trying to recover.</p>\n<p>The client launches a refresh operation on a background thread, to update\nits view of the server as soon as possible after throwing this exception.</p>\n<p>Subclass of <code>AutoReconnect</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.NotMasterError
pymongo.errors.OperationFailure	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.OperationFailure(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Raised when a database operation fails.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.OperationFailure
pymongo.errors.ProtocolError	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.ProtocolError</pre></code><p><p>Raised for failures related to the wire protocol.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ProtocolError
pymongo.errors.PyMongoError	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.PyMongoError</pre></code><p><p>Base class for all PyMongo exceptions.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.PyMongoError
pymongo.errors.ServerSelectionTimeoutError	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.ServerSelectionTimeoutError(<em>message=''</em>, <em>errors=None</em>)</pre></code><p><p>Thrown when no MongoDB server is available for an operation</p>\n<p>If there is no suitable server for an operation PyMongo tries for\n<code>serverSelectionTimeoutMS</code> (default 30 seconds) to find one, then\nthrows this exception. For example, it is thrown after attempting an\noperation when PyMongo cannot connect to any server, or if you attempt\nan insert into a replica set that has no primary and does not elect one\nwithin the timeout window, or if you attempt to query with a Read\nPreference that the replica set cannot satisfy.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ServerSelectionTimeoutError
pymongo.errors.WTimeoutError	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.WTimeoutError(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Raised when a database operation times out (i.e. wtimeout expires)\nbefore replication completes.</p>\n<p>With newer versions of MongoDB the <code>details</code> attribute may include\nwrite concern fields like ‘n’, ‘updatedExisting’, or ‘writtenTo’.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.WTimeoutError
pymongo.errors.WriteConcernError	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.WriteConcernError(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Base exception type for errors raised due to write concern.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.WriteConcernError
pymongo.errors.WriteError	A										<section class="prog_container"><pre><code><em>exception </em>pymongo.errors.WriteError(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Base exception type for errors raised during write operations.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.WriteError
pymongo.message.delete	A										<section class="prog_container"><pre><code>pymongo.message.delete(<em>collection_name</em>, <em>spec</em>, <em>safe</em>, <em>last_error_args</em>, <em>opts</em>, <em>flags=0</em>)</pre></code><p><p>Get a <strong>delete</strong> message.</p>\n<p><code>opts</code> is a CodecOptions. <code>flags</code> is a bit vector that may contain\nthe SingleRemove flag or not:</p>\n<p>http://docs.mongodb.org/meta-driver/latest/legacy/mongodb-wire-protocol/#op-delete</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/message.html#pymongo.message.delete
pymongo.message.get_more	A										<section class="prog_container"><pre><code>pymongo.message.get_more(<em>collection_name</em>, <em>num_to_return</em>, <em>cursor_id</em>)</pre></code><p><p>Get a <strong>getMore</strong> message.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/message.html#pymongo.message.get_more
pymongo.message.insert	A										<section class="prog_container"><pre><code>pymongo.message.insert(<em>collection_name</em>, <em>docs</em>, <em>check_keys</em>, <em>safe</em>, <em>last_error_args</em>, <em>continue_on_error</em>, <em>opts</em>)</pre></code><p><p>Get an <strong>insert</strong> message.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/message.html#pymongo.message.insert
pymongo.message.kill_cursors	A										<section class="prog_container"><pre><code>pymongo.message.kill_cursors(<em>cursor_ids</em>)</pre></code><p><p>Get a <strong>killCursors</strong> message.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/message.html#pymongo.message.kill_cursors
pymongo.message.query	A										<section class="prog_container"><pre><code>pymongo.message.query(<em>options</em>, <em>collection_name</em>, <em>num_to_skip</em>, <em>num_to_return</em>, <em>query</em>, <em>field_selector</em>, <em>opts</em>, <em>check_keys=False</em>)</pre></code><p><p>Get a <strong>query</strong> message.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/message.html#pymongo.message.query
pymongo.message.update	A										<section class="prog_container"><pre><code>pymongo.message.update(<em>collection_name</em>, <em>upsert</em>, <em>multi</em>, <em>spec</em>, <em>doc</em>, <em>safe</em>, <em>last_error_args</em>, <em>check_keys</em>, <em>opts</em>)</pre></code><p><p>Get an <strong>update</strong> message.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/message.html#pymongo.message.update
pymongo.monitoring.CommandListener.failed	A										<section class="prog_container"><pre><code><code>failed</code>(<em>event</em>)</pre></code><p><p>Abstract method to handle a <code>CommandFailedEvent</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>event</code>: An instance of <code>CommandFailedEvent</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandListener.failed
pymongo.monitoring.CommandListener.started	A										<section class="prog_container"><pre><code><code>started</code>(<em>event</em>)</pre></code><p><p>Abstract method to handle a <code>CommandStartedEvent</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>event</code>: An instance of <code>CommandStartedEvent</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandListener.started
pymongo.monitoring.CommandListener.succeeded	A										<section class="prog_container"><pre><code><code>succeeded</code>(<em>event</em>)</pre></code><p><p>Abstract method to handle a <code>CommandSucceededEvent</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>event</code>: An instance of <code>CommandSucceededEvent</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandListener.succeeded
pymongo.monitoring.CommandListener	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.CommandListener</pre></code><p><p>Abstract base class for command listeners.\nHandles <code>CommandStartedEvent</code>, <code>CommandSucceededEvent</code>,\nand <code>CommandFailedEvent</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandListener
pymongo.monitoring.ServerListener.closed	A										<section class="prog_container"><pre><code><code>closed</code>(<em>event</em>)</pre></code><p><p>Abstract method to handle a <code>ServerClosedEvent</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>event</code>: An instance of <code>ServerClosedEvent</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerListener.closed
pymongo.monitoring.ServerListener.description_changed	A										<section class="prog_container"><pre><code><code>description_changed</code>(<em>event</em>)</pre></code><p><p>Abstract method to handle a <code>ServerDescriptionChangedEvent</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>event</code>: An instance of <code>ServerDescriptionChangedEvent</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerListener.description_changed
pymongo.monitoring.ServerListener.opened	A										<section class="prog_container"><pre><code><code>opened</code>(<em>event</em>)</pre></code><p><p>Abstract method to handle a <code>ServerOpeningEvent</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>event</code>: An instance of <code>ServerOpeningEvent</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerListener.opened
pymongo.monitoring.ServerListener	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.ServerListener</pre></code><p><p>Abstract base class for server listeners.\nHandles <code>ServerOpeningEvent</code>, <code>ServerDescriptionChangedEvent</code>, and\n<code>ServerClosedEvent</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerListener
pymongo.monitoring.ServerHeartbeatListener.failed	A										<section class="prog_container"><pre><code><code>failed</code>(<em>event</em>)</pre></code><p><p>Abstract method to handle a <code>ServerHeartbeatFailedEvent</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>event</code>: An instance of <code>ServerHeartbeatFailedEvent</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatListener.failed
pymongo.monitoring.ServerHeartbeatListener.started	A										<section class="prog_container"><pre><code><code>started</code>(<em>event</em>)</pre></code><p><p>Abstract method to handle a <code>ServerHeartbeatStartedEvent</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>event</code>: An instance of <code>ServerHeartbeatStartedEvent</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatListener.started
pymongo.monitoring.ServerHeartbeatListener.succeeded	A										<section class="prog_container"><pre><code><code>succeeded</code>(<em>event</em>)</pre></code><p><p>Abstract method to handle a <code>ServerHeartbeatSucceededEvent</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>event</code>: An instance of <code>ServerHeartbeatSucceededEvent</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatListener.succeeded
pymongo.monitoring.ServerHeartbeatListener	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.ServerHeartbeatListener</pre></code><p><p>Abstract base class for server heartbeat listeners.\nHandles <code>ServerHeartbeatStartedEvent</code>, <code>ServerHeartbeatSucceededEvent</code>,\nand <code>ServerHeartbeatFailedEvent</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatListener
pymongo.monitoring.TopologyListener.closed	A										<section class="prog_container"><pre><code><code>closed</code>(<em>event</em>)</pre></code><p><p>Abstract method to handle a <code>TopologyClosedEvent</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>event</code>: An instance of <code>TopologyClosedEvent</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyListener.closed
pymongo.monitoring.TopologyListener.description_changed	A										<section class="prog_container"><pre><code><code>description_changed</code>(<em>event</em>)</pre></code><p><p>Abstract method to handle a <code>TopologyDescriptionChangedEvent</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>event</code>: An instance of <code>TopologyDescriptionChangedEvent</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyListener.description_changed
pymongo.monitoring.TopologyListener.opened	A										<section class="prog_container"><pre><code><code>opened</code>(<em>event</em>)</pre></code><p><p>Abstract method to handle a <code>TopologyOpenedEvent</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>event</code>: An instance of <code>TopologyOpenedEvent</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyListener.opened
pymongo.monitoring.TopologyListener	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.TopologyListener</pre></code><p><p>Abstract base class for topology monitoring listeners.\nHandles <code>TopologyOpenedEvent</code>, <code>TopologyDescriptionChangedEvent</code>, and\n<code>TopologyClosedEvent</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyListener
pymongo.monitoring.CommandStartedEvent.command	A										<section class="prog_container"><pre><code><code>command</code></pre></code><p><p>The command document.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandStartedEvent.command
pymongo.monitoring.CommandStartedEvent.command_name	A										<section class="prog_container"><pre><code><code>command_name</code></pre></code><p><p>The command name.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandStartedEvent.command_name
pymongo.monitoring.CommandStartedEvent.connection_id	A										<section class="prog_container"><pre><code><code>connection_id</code></pre></code><p><p>The address (host, port) of the server this command was sent to.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandStartedEvent.connection_id
pymongo.monitoring.CommandStartedEvent.database_name	A										<section class="prog_container"><pre><code><code>database_name</code></pre></code><p><p>The name of the database this command was run against.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandStartedEvent.database_name
pymongo.monitoring.CommandStartedEvent.operation_id	A										<section class="prog_container"><pre><code><code>operation_id</code></pre></code><p><p>An id for this series of events or None.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandStartedEvent.operation_id
pymongo.monitoring.CommandStartedEvent.request_id	A										<section class="prog_container"><pre><code><code>request_id</code></pre></code><p><p>The request id for this operation.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandStartedEvent.request_id
pymongo.monitoring.CommandStartedEvent	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.CommandStartedEvent(<em>command</em>, <em>database_name</em>, <em>*args</em>)</pre></code><p><p>Event published when a command starts.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>command</code>: The command document.</li>\n<li><code>database_name</code>: The name of the database this command was run against.</li>\n<li><code>request_id</code>: The request id for this operation.</li>\n<li><code>connection_id</code>: The address (host, port) of the server this command\nwas sent to.</li>\n<li><code>operation_id</code>: An optional identifier for a series of related events.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandStartedEvent
pymongo.monitoring.CommandSucceededEvent.command_name	A										<section class="prog_container"><pre><code><code>command_name</code></pre></code><p><p>The command name.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandSucceededEvent.command_name
pymongo.monitoring.CommandSucceededEvent.connection_id	A										<section class="prog_container"><pre><code><code>connection_id</code></pre></code><p><p>The address (host, port) of the server this command was sent to.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandSucceededEvent.connection_id
pymongo.monitoring.CommandSucceededEvent.duration_micros	A										<section class="prog_container"><pre><code><code>duration_micros</code></pre></code><p><p>The duration of this operation in microseconds.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandSucceededEvent.duration_micros
pymongo.monitoring.CommandSucceededEvent.operation_id	A										<section class="prog_container"><pre><code><code>operation_id</code></pre></code><p><p>An id for this series of events or None.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandSucceededEvent.operation_id
pymongo.monitoring.CommandSucceededEvent.reply	A										<section class="prog_container"><pre><code><code>reply</code></pre></code><p><p>The server failure document for this operation.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandSucceededEvent.reply
pymongo.monitoring.CommandSucceededEvent.request_id	A										<section class="prog_container"><pre><code><code>request_id</code></pre></code><p><p>The request id for this operation.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandSucceededEvent.request_id
pymongo.monitoring.CommandSucceededEvent	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.CommandSucceededEvent(<em>duration</em>, <em>reply</em>, <em>command_name</em>, <em>request_id</em>, <em>connection_id</em>, <em>operation_id</em>)</pre></code><p><p>Event published when a command succeeds.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>duration</code>: The command duration as a datetime.timedelta.</li>\n<li><code>reply</code>: The server reply document.</li>\n<li><code>command_name</code>: The command name.</li>\n<li><code>request_id</code>: The request id for this operation.</li>\n<li><code>connection_id</code>: The address (host, port) of the server this command\nwas sent to.</li>\n<li><code>operation_id</code>: An optional identifier for a series of related events.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandSucceededEvent
pymongo.monitoring.CommandFailedEvent.command_name	A										<section class="prog_container"><pre><code><code>command_name</code></pre></code><p><p>The command name.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandFailedEvent.command_name
pymongo.monitoring.CommandFailedEvent.connection_id	A										<section class="prog_container"><pre><code><code>connection_id</code></pre></code><p><p>The address (host, port) of the server this command was sent to.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandFailedEvent.connection_id
pymongo.monitoring.CommandFailedEvent.duration_micros	A										<section class="prog_container"><pre><code><code>duration_micros</code></pre></code><p><p>The duration of this operation in microseconds.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandFailedEvent.duration_micros
pymongo.monitoring.CommandFailedEvent.failure	A										<section class="prog_container"><pre><code><code>failure</code></pre></code><p><p>The server failure document for this operation.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandFailedEvent.failure
pymongo.monitoring.CommandFailedEvent.operation_id	A										<section class="prog_container"><pre><code><code>operation_id</code></pre></code><p><p>An id for this series of events or None.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandFailedEvent.operation_id
pymongo.monitoring.CommandFailedEvent.request_id	A										<section class="prog_container"><pre><code><code>request_id</code></pre></code><p><p>The request id for this operation.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandFailedEvent.request_id
pymongo.monitoring.CommandFailedEvent	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.CommandFailedEvent(<em>duration</em>, <em>failure</em>, <em>*args</em>)</pre></code><p><p>Event published when a command fails.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>duration</code>: The command duration as a datetime.timedelta.</li>\n<li><code>failure</code>: The server reply document.</li>\n<li><code>command_name</code>: The command name.</li>\n<li><code>request_id</code>: The request id for this operation.</li>\n<li><code>connection_id</code>: The address (host, port) of the server this command\nwas sent to.</li>\n<li><code>operation_id</code>: An optional identifier for a series of related events.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandFailedEvent
pymongo.monitoring.ServerDescriptionChangedEvent.new_description	A										<section class="prog_container"><pre><code><code>new_description</code></pre></code><p><p>The new\n<code>ServerDescription</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerDescriptionChangedEvent.new_description
pymongo.monitoring.ServerDescriptionChangedEvent.previous_description	A										<section class="prog_container"><pre><code><code>previous_description</code></pre></code><p><p>The previous\n<code>ServerDescription</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerDescriptionChangedEvent.previous_description
pymongo.monitoring.ServerDescriptionChangedEvent.server_address	A										<section class="prog_container"><pre><code><code>server_address</code></pre></code><p><p>The address (host/port pair) of the server</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerDescriptionChangedEvent.server_address
pymongo.monitoring.ServerDescriptionChangedEvent.topology_id	A										<section class="prog_container"><pre><code><code>topology_id</code></pre></code><p><p>A unique identifier for the topology this server is a part of.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerDescriptionChangedEvent.topology_id
pymongo.monitoring.ServerDescriptionChangedEvent	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.ServerDescriptionChangedEvent(<em>previous_description</em>, <em>new_description</em>, <em>*args</em>)</pre></code><p><p>Published when server description changes.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerDescriptionChangedEvent
pymongo.monitoring.ServerOpeningEvent.server_address	A										<section class="prog_container"><pre><code><code>server_address</code></pre></code><p><p>The address (host/port pair) of the server</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerOpeningEvent.server_address
pymongo.monitoring.ServerOpeningEvent.topology_id	A										<section class="prog_container"><pre><code><code>topology_id</code></pre></code><p><p>A unique identifier for the topology this server is a part of.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerOpeningEvent.topology_id
pymongo.monitoring.ServerOpeningEvent	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.ServerOpeningEvent(<em>server_address</em>, <em>topology_id</em>)</pre></code><p><p>Published when server is initialized.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerOpeningEvent
pymongo.monitoring.ServerClosedEvent.server_address	A										<section class="prog_container"><pre><code><code>server_address</code></pre></code><p><p>The address (host/port pair) of the server</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerClosedEvent.server_address
pymongo.monitoring.ServerClosedEvent.topology_id	A										<section class="prog_container"><pre><code><code>topology_id</code></pre></code><p><p>A unique identifier for the topology this server is a part of.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerClosedEvent.topology_id
pymongo.monitoring.ServerClosedEvent	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.ServerClosedEvent(<em>server_address</em>, <em>topology_id</em>)</pre></code><p><p>Published when server is closed.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerClosedEvent
pymongo.monitoring.TopologyDescriptionChangedEvent.new_description	A										<section class="prog_container"><pre><code><code>new_description</code></pre></code><p><p>The new\n<code>TopologyDescription</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyDescriptionChangedEvent.new_description
pymongo.monitoring.TopologyDescriptionChangedEvent.previous_description	A										<section class="prog_container"><pre><code><code>previous_description</code></pre></code><p><p>The previous\n<code>TopologyDescription</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyDescriptionChangedEvent.previous_description
pymongo.monitoring.TopologyDescriptionChangedEvent.topology_id	A										<section class="prog_container"><pre><code><code>topology_id</code></pre></code><p><p>A unique identifier for the topology this server is a part of.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyDescriptionChangedEvent.topology_id
pymongo.monitoring.TopologyDescriptionChangedEvent	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.TopologyDescriptionChangedEvent(<em>previous_description</em>, <em>new_description</em>, <em>*args</em>)</pre></code><p><p>Published when the topology description changes.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyDescriptionChangedEvent
pymongo.monitoring.TopologyOpenedEvent.topology_id	A										<section class="prog_container"><pre><code><code>topology_id</code></pre></code><p><p>A unique identifier for the topology this server is a part of.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyOpenedEvent.topology_id
pymongo.monitoring.TopologyOpenedEvent	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.TopologyOpenedEvent(<em>topology_id</em>)</pre></code><p><p>Published when the topology is initialized.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyOpenedEvent
pymongo.monitoring.TopologyClosedEvent.topology_id	A										<section class="prog_container"><pre><code><code>topology_id</code></pre></code><p><p>A unique identifier for the topology this server is a part of.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyClosedEvent.topology_id
pymongo.monitoring.TopologyClosedEvent	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.TopologyClosedEvent(<em>topology_id</em>)</pre></code><p><p>Published when the topology is closed.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyClosedEvent
pymongo.monitoring.ServerHeartbeatStartedEvent.connection_id	A										<section class="prog_container"><pre><code><code>connection_id</code></pre></code><p><p>The address (host, port) of the server this heartbeat was sent\nto.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatStartedEvent.connection_id
pymongo.monitoring.ServerHeartbeatStartedEvent	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.ServerHeartbeatStartedEvent(<em>connection_id</em>)</pre></code><p><p>Published when a heartbeat is started.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatStartedEvent
pymongo.monitoring.ServerHeartbeatSucceededEvent.connection_id	A										<section class="prog_container"><pre><code><code>connection_id</code></pre></code><p><p>The address (host, port) of the server this heartbeat was sent\nto.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatSucceededEvent.connection_id
pymongo.monitoring.ServerHeartbeatSucceededEvent.duration	A										<section class="prog_container"><pre><code><code>duration</code></pre></code><p><p>The duration of this heartbeat in microseconds.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatSucceededEvent.duration
pymongo.monitoring.ServerHeartbeatSucceededEvent.reply	A										<section class="prog_container"><pre><code><code>reply</code></pre></code><p><p>An instance of <code>IsMaster</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatSucceededEvent.reply
pymongo.monitoring.ServerHeartbeatSucceededEvent	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.ServerHeartbeatSucceededEvent(<em>duration</em>, <em>reply</em>, <em>*args</em>)</pre></code><p><p>Fired when the server heartbeat succeeds.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatSucceededEvent
pymongo.monitoring.ServerHeartbeatFailedEvent.connection_id	A										<section class="prog_container"><pre><code><code>connection_id</code></pre></code><p><p>The address (host, port) of the server this heartbeat was sent\nto.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatFailedEvent.connection_id
pymongo.monitoring.ServerHeartbeatFailedEvent.duration	A										<section class="prog_container"><pre><code><code>duration</code></pre></code><p><p>The duration of this heartbeat in microseconds.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatFailedEvent.duration
pymongo.monitoring.ServerHeartbeatFailedEvent.reply	A										<section class="prog_container"><pre><code><code>reply</code></pre></code><p><p>A subclass of <code>Exception</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatFailedEvent.reply
pymongo.monitoring.ServerHeartbeatFailedEvent	A										<section class="prog_container"><pre><code><em>class </em>pymongo.monitoring.ServerHeartbeatFailedEvent(<em>duration</em>, <em>reply</em>, <em>*args</em>)</pre></code><p><p>Fired when the server heartbeat fails, either with an “ok: 0”\nor a socket exception.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatFailedEvent
pymongo.monitoring.register	A										<section class="prog_container"><pre><code>pymongo.monitoring.register(<em>listener</em>)</pre></code><p><p>Register a global event listener.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>listener</code>: A subclasses of <code>CommandListener</code>,\n<code>ServerHeartbeatListener</code>, <code>ServerListener</code>, or\n<code>TopologyListener</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.register
pymongo.mongo_client.MongoClient.close	A										<section class="prog_container"><pre><code><code>close</code>()</pre></code><p><p>Disconnect from MongoDB.</p>\n<p>Close all sockets in the connection pools and stop the monitor threads.\nIf this instance is used again it will be automatically re-opened and\nthe threads restarted.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.close
pymongo.mongo_client.MongoClient.database_names	A										<section class="prog_container"><pre><code><code>database_names</code>()</pre></code><p><p>Get a list of the names of all databases on the connected server.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.database_names
pymongo.mongo_client.MongoClient.drop_database	A										<section class="prog_container"><pre><code><code>drop_database</code>(<em>name_or_database</em>)</pre></code><p><p>Drop a database.</p>\n<p>Raises <code>TypeError</code> if <code>name_or_database</code> is not an instance of\n<code>basestring</code> (<code>str</code> in python 3) or\n<code>Database</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>name_or_database</code>: the name of a database to drop, or a\n<code>Database</code> instance representing the\ndatabase to drop</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.drop_database
pymongo.mongo_client.MongoClient.get_default_database	A										<section class="prog_container"><pre><code><code>get_default_database</code>()</pre></code><p><p>Get the database named in the MongoDB connection URI.</p>\n<pre>&gt;&gt;&gt; uri = 'mongodb://host/my_database'\n&gt;&gt;&gt; client = MongoClient(uri)\n&gt;&gt;&gt; db = client.get_default_database()\n&gt;&gt;&gt; assert db.name == 'my_database'\n</pre>\n<p>Useful in scripts where you want to choose which database to use\nbased only on the URI in a configuration file.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.get_default_database
pymongo.mongo_client.MongoClient.get_database	A										<section class="prog_container"><pre><code><code>get_database</code>(<em>name</em>, <em>codec_options=None</em>, <em>read_preference=None</em>, <em>write_concern=None</em>, <em>read_concern=None</em>)</pre></code><p><p>Get a <code>Database</code> with the given name and\noptions.</p>\n<p>Useful for creating a <code>Database</code> with\ndifferent codec options, read preference, and/or write concern from\nthis <code>MongoClient</code>.</p>\n<pre>&gt;&gt;&gt; client.read_preference\nPrimary()\n&gt;&gt;&gt; db1 = client.test\n&gt;&gt;&gt; db1.read_preference\nPrimary()\n&gt;&gt;&gt; from pymongo import ReadPreference\n&gt;&gt;&gt; db2 = client.get_database(\n...     'test', read_preference=ReadPreference.SECONDARY)\n&gt;&gt;&gt; db2.read_preference\nSecondary(tag_sets=None)\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>name</code>: The name of the database - a string.</li>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>. If <code>None</code> (the\ndefault) the <code>codec_options</code> of this <code>MongoClient</code> is\nused.</li>\n<li><code>read_preference</code> (optional): The read preference to use. If\n<code>None</code> (the default) the <code>read_preference</code> of this\n<code>MongoClient</code> is used. See <code>read_preferences</code>\nfor options.</li>\n<li><code>write_concern</code> (optional): An instance of\n<code>WriteConcern</code>. If <code>None</code> (the\ndefault) the <code>write_concern</code> of this <code>MongoClient</code> is\nused.</li>\n<li><code>read_concern</code> (optional): An instance of\n<code>ReadConcern</code>. If <code>None</code> (the\ndefault) the <code>read_concern</code> of this <code>MongoClient</code> is\nused.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.get_database
pymongo.mongo_client.MongoClient.server_info	A										<section class="prog_container"><pre><code><code>server_info</code>()</pre></code><p><p>Get information about the MongoDB server we’re connected to.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.server_info
pymongo.mongo_client.MongoClient.close_cursor	A										<section class="prog_container"><pre><code><code>close_cursor</code>(<em>cursor_id</em>, <em>address=None</em>)</pre></code><p><p>Send a kill cursors message soon with the given id.</p>\n<p>Raises <code>TypeError</code> if <code>cursor_id</code> is not an instance of\n<code>(int, long)</code>. What closing the cursor actually means\ndepends on this client’s cursor manager.</p>\n<p>This method may be called from a <code>Cursor</code>\ndestructor during garbage collection, so it isn’t safe to take a\nlock or do network I/O. Instead, we schedule the cursor to be closed\nsoon on a background thread.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>cursor_id</code>: id of cursor to close</li>\n<li><code>address</code> (optional): (host, port) pair of the cursor’s server.\nIf it is not provided, the client attempts to close the cursor on\nthe primary or standalone, or a mongos server.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.close_cursor
pymongo.mongo_client.MongoClient.kill_cursors	A										<section class="prog_container"><pre><code><code>kill_cursors</code>(<em>cursor_ids</em>, <em>address=None</em>)</pre></code><p><p>DEPRECATED - Send a kill cursors message soon with the given ids.</p>\n<p>Raises <code>TypeError</code> if <code>cursor_ids</code> is not an instance of\n<code>list</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>cursor_ids</code>: list of cursor ids to kill</li>\n<li><code>address</code> (optional): (host, port) pair of the cursor’s server.\nIf it is not provided, the client attempts to close the cursor on\nthe primary or standalone, or a mongos server.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.kill_cursors
pymongo.mongo_client.MongoClient.set_cursor_manager	A										<section class="prog_container"><pre><code><code>set_cursor_manager</code>(<em>manager_class</em>)</pre></code><p><p>DEPRECATED - Set this client’s cursor manager.</p>\n<p>Raises <code>TypeError</code> if <code>manager_class</code> is not a subclass of\n<code>CursorManager</code>. A cursor manager\nhandles closing cursors. Different managers can implement different\npolicies in terms of when to actually kill a cursor that has\nbeen closed.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>manager_class</code>: cursor manager to use</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.set_cursor_manager
pymongo.mongo_client.MongoClient.fsync	A										<section class="prog_container"><pre><code><code>fsync</code>(<em>**kwargs</em>)</pre></code><p><p>Flush all pending writes to datafiles.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>lock</code>: If True lock the server to disallow writes.</li>\n<li><code>async</code>: If True don’t block while synchronizing.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.fsync
pymongo.mongo_client.MongoClient.unlock	A										<section class="prog_container"><pre><code><code>unlock</code>()</pre></code><p><p>Unlock a previously locked server.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.unlock
pymongo.mongo_client.MongoClient.address	A										<section class="prog_container"><pre><code><code>address</code></pre></code><p><p>(host, port) of the current standalone, primary, or mongos, or None.</p>\n<p>Accessing <code>address</code> raises <code>InvalidOperation</code> if\nthe client is load-balancing among mongoses, since there is no single\naddress. Use <code>nodes</code> instead.</p>\n<p>If the client is not connected, this will block until a connection is\nestablished or raise ServerSelectionTimeoutError if no server is\navailable.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.address
pymongo.mongo_client.MongoClient.is_primary	A										<section class="prog_container"><pre><code><code>is_primary</code></pre></code><p><p>If this client is connected to a server that can accept writes.</p>\n<p>True if the current server is a standalone, mongos, or the primary of\na replica set. If the client is not connected, this will block until a\nconnection is established or raise ServerSelectionTimeoutError if no\nserver is available.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.is_primary
pymongo.mongo_client.MongoClient.is_mongos	A										<section class="prog_container"><pre><code><code>is_mongos</code></pre></code><p><p>If this client is connected to mongos. If the client is not\nconnected, this will block until a connection is established or raise\nServerSelectionTimeoutError if no server is available..</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.is_mongos
pymongo.mongo_client.MongoClient.max_pool_size	A										<section class="prog_container"><pre><code><code>max_pool_size</code></pre></code><p><p>The maximum allowable number of concurrent connections to each\nconnected server. Requests to a server will block if there are\n<code>maxPoolSize</code> outstanding connections to the requested server.\nDefaults to 100. Cannot be 0.</p>\n<p>When a server’s pool has reached <code>max_pool_size</code>, operations for that\nserver block waiting for a socket to be returned to the pool. If\n<code>waitQueueTimeoutMS</code> is set, a blocked operation will raise\n<code>ConnectionFailure</code> after a timeout.\nBy default <code>waitQueueTimeoutMS</code> is not set.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.max_pool_size
pymongo.mongo_client.MongoClient.nodes	A										<section class="prog_container"><pre><code><code>nodes</code></pre></code><p><p>Set of all currently connected servers.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.nodes
pymongo.mongo_client.MongoClient.max_bson_size	A										<section class="prog_container"><pre><code><code>max_bson_size</code></pre></code><p><p>The largest BSON object the connected server accepts in bytes.</p>\n<p>If the client is not connected, this will block until a connection is\nestablished or raise ServerSelectionTimeoutError if no server is\navailable.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.max_bson_size
pymongo.mongo_client.MongoClient.max_message_size	A										<section class="prog_container"><pre><code><code>max_message_size</code></pre></code><p><p>The largest message the connected server accepts in bytes.</p>\n<p>If the client is not connected, this will block until a connection is\nestablished or raise ServerSelectionTimeoutError if no server is\navailable.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.max_message_size
pymongo.mongo_client.MongoClient.local_threshold_ms	A										<section class="prog_container"><pre><code><code>local_threshold_ms</code></pre></code><p><p>The local threshold for this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.local_threshold_ms
pymongo.mongo_client.MongoClient.codec_options	A										<section class="prog_container"><pre><code><code>codec_options</code></pre></code><p><p>Read only access to the <code>CodecOptions</code>\nof this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.codec_options
pymongo.mongo_client.MongoClient.read_preference	A										<section class="prog_container"><pre><code><code>read_preference</code></pre></code><p><p>Read only access to the read preference of this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.read_preference
pymongo.mongo_client.MongoClient.write_concern	A										<section class="prog_container"><pre><code><code>write_concern</code></pre></code><p><p>Read only access to the <code>WriteConcern</code>\nof this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.write_concern
pymongo.mongo_client.MongoClient.is_locked	A										<section class="prog_container"><pre><code><code>is_locked</code></pre></code><p><p>Is this server locked? While locked, all write operations\nare blocked, although read operations may still be allowed.\nUse <code>unlock()</code> to unlock.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient.is_locked
pymongo.mongo_client.MongoClient	A										<section class="prog_container"><pre><code><em>class </em>pymongo.mongo_client.MongoClient(<em>host='localhost'</em>, <em>port=27017</em>, <em>document_class=dict</em>, <em>tz_aware=False</em>, <em>connect=True</em>, <em>**kwargs</em>)</pre></code><p><p>Client for a MongoDB instance, a replica set, or a set of mongoses.</p>\n<p>The client object is thread-safe and has connection-pooling built in.\nIf an operation fails because of a network error,\n<code>ConnectionFailure</code> is raised and the client\nreconnects in the background. Application code should handle this\nexception (recognizing that the operation failed) and then continue to\nexecute.</p>\n<p>The <code>host</code> parameter can be a full mongodb URI, in addition to\na simple hostname. It can also be a list of hostnames or\nURIs. Any port specified in the host string(s) will override\nthe <code>port</code> parameter. If multiple mongodb URIs containing\ndatabase or auth information are passed, the last database,\nusername, and password present will be used.  For username and\npasswords reserved characters like ‘:’, ‘/’, ‘+’ and ‘@’ must be\npercent encoded following RFC 2396:</p>\n<pre>try:\n    # Python 3.x\n    from urllib.parse import quote_plus\nexcept ImportError:\n    # Python 2.x\n    from urllib import quote_plus\nuri = "mongodb://%s:%s@%s" % (\n    quote_plus(user), quote_plus(password), host)\nclient = MongoClient(uri)\n</pre>\n<p>Unix domain sockets are also supported. The socket path must be percent\nencoded in the URI:</p>\n<pre>uri = "mongodb://%s:%s@%s" % (\n    quote_plus(user), quote_plus(password), quote_plus(socket_path))\nclient = MongoClient(uri)\n</pre>\n<p>But not when passed as a simple hostname:</p>\n<pre>client = MongoClient('/tmp/mongodb-27017.sock')\n</pre>\n<p>Starting with version 3.0 the <code>MongoClient</code>\nconstructor no longer blocks while connecting to the server or\nservers, and it no longer raises\n<code>ConnectionFailure</code> if they are\nunavailable, nor <code>ConfigurationError</code>\nif the user’s credentials are wrong. Instead, the constructor\nreturns immediately and launches the connection process on\nbackground threads. You can check if the server is available\nlike this:</p>\n<pre>from pymongo.errors import ConnectionFailure\nclient = MongoClient()\ntry:\n    # The ismaster command is cheap and does not require auth.\n    client.admin.command('ismaster')\nexcept ConnectionFailure:\n    print("Server not available")\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>host</code> (optional): hostname or IP address or Unix domain socket\npath of a single mongod or mongos instance to connect to, or a\nmongodb URI, or a list of hostnames / mongodb URIs. If <code>host</code> is\nan IPv6 literal it must be enclosed in ‘[‘ and ‘]’ characters\nfollowing the RFC2732 URL syntax (e.g. ‘[::1]’ for localhost).\nMultihomed and round robin DNS addresses are <strong>not</strong> supported.</li>\n<li><code>port</code> (optional): port number on which to connect</li>\n<li><code>document_class</code> (optional): default class to use for\ndocuments returned from queries on this client</li>\n<li><code>tz_aware</code> (optional): if <code>True</code>,\n<code>datetime</code> instances returned as values\nin a document by this <code>MongoClient</code> will be timezone\naware (otherwise they will be naive)</li>\n<li><code>connect</code> (optional): if <code>True</code> (the default), immediately\nbegin connecting to MongoDB in the background. Otherwise connect\non the first operation.</li>\n<dl class="describe">\n<dt>\n<code>c[db_name] || c.db_name</code></dt>\n<dd><p>Get the <code>db_name</code> <code>Database</code> on <code>MongoClient</code> <code>c</code>.</p>\n<p>Raises <code>InvalidName</code> if an invalid database name is used.</p>\n</dd></dl></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient
pymongo.mongo_replica_set_client.MongoReplicaSetClient.close	A										<section class="prog_container"><pre><code><code>close</code>()</pre></code><p><p>Disconnect from MongoDB.</p>\n<p>Close all sockets in the connection pools and stop the monitor threads.\nIf this instance is used again it will be automatically re-opened and\nthe threads restarted.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.close
pymongo.mongo_replica_set_client.MongoReplicaSetClient.database_names	A										<section class="prog_container"><pre><code><code>database_names</code>()</pre></code><p><p>Get a list of the names of all databases on the connected server.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.database_names
pymongo.mongo_replica_set_client.MongoReplicaSetClient.drop_database	A										<section class="prog_container"><pre><code><code>drop_database</code>(<em>name_or_database</em>)</pre></code><p><p>Drop a database.</p>\n<p>Raises <code>TypeError</code> if <code>name_or_database</code> is not an instance of\n<code>basestring</code> (<code>str</code> in python 3) or\n<code>Database</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>name_or_database</code>: the name of a database to drop, or a\n<code>Database</code> instance representing the\ndatabase to drop</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.drop_database
pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_default_database	A										<section class="prog_container"><pre><code><code>get_default_database</code>()</pre></code><p><p>Get the database named in the MongoDB connection URI.</p>\n<pre>&gt;&gt;&gt; uri = 'mongodb://host/my_database'\n&gt;&gt;&gt; client = MongoClient(uri)\n&gt;&gt;&gt; db = client.get_default_database()\n&gt;&gt;&gt; assert db.name == 'my_database'\n</pre>\n<p>Useful in scripts where you want to choose which database to use\nbased only on the URI in a configuration file.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_default_database
pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_database	A										<section class="prog_container"><pre><code><code>get_database</code>(<em>name</em>, <em>codec_options=None</em>, <em>read_preference=None</em>, <em>write_concern=None</em>, <em>read_concern=None</em>)</pre></code><p><p>Get a <code>Database</code> with the given name and\noptions.</p>\n<p>Useful for creating a <code>Database</code> with\ndifferent codec options, read preference, and/or write concern from\nthis <code>MongoClient</code>.</p>\n<pre>&gt;&gt;&gt; client.read_preference\nPrimary()\n&gt;&gt;&gt; db1 = client.test\n&gt;&gt;&gt; db1.read_preference\nPrimary()\n&gt;&gt;&gt; from pymongo import ReadPreference\n&gt;&gt;&gt; db2 = client.get_database(\n...     'test', read_preference=ReadPreference.SECONDARY)\n&gt;&gt;&gt; db2.read_preference\nSecondary(tag_sets=None)\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>name</code>: The name of the database - a string.</li>\n<li><code>codec_options</code> (optional): An instance of\n<code>CodecOptions</code>. If <code>None</code> (the\ndefault) the <code>codec_options</code> of this <code>MongoClient</code> is\nused.</li>\n<li><code>read_preference</code> (optional): The read preference to use. If\n<code>None</code> (the default) the <code>read_preference</code> of this\n<code>MongoClient</code> is used. See <code>read_preferences</code>\nfor options.</li>\n<li><code>write_concern</code> (optional): An instance of\n<code>WriteConcern</code>. If <code>None</code> (the\ndefault) the <code>write_concern</code> of this <code>MongoClient</code> is\nused.</li>\n<li><code>read_concern</code> (optional): An instance of\n<code>ReadConcern</code>. If <code>None</code> (the\ndefault) the <code>read_concern</code> of this <code>MongoClient</code> is\nused.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.get_database
pymongo.mongo_replica_set_client.MongoReplicaSetClient.close_cursor	A										<section class="prog_container"><pre><code><code>close_cursor</code>(<em>cursor_id</em>, <em>address=None</em>)</pre></code><p><p>Send a kill cursors message soon with the given id.</p>\n<p>Raises <code>TypeError</code> if <code>cursor_id</code> is not an instance of\n<code>(int, long)</code>. What closing the cursor actually means\ndepends on this client’s cursor manager.</p>\n<p>This method may be called from a <code>Cursor</code>\ndestructor during garbage collection, so it isn’t safe to take a\nlock or do network I/O. Instead, we schedule the cursor to be closed\nsoon on a background thread.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>cursor_id</code>: id of cursor to close</li>\n<li><code>address</code> (optional): (host, port) pair of the cursor’s server.\nIf it is not provided, the client attempts to close the cursor on\nthe primary or standalone, or a mongos server.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.close_cursor
pymongo.mongo_replica_set_client.MongoReplicaSetClient.kill_cursors	A										<section class="prog_container"><pre><code><code>kill_cursors</code>(<em>cursor_ids</em>, <em>address=None</em>)</pre></code><p><p>DEPRECATED - Send a kill cursors message soon with the given ids.</p>\n<p>Raises <code>TypeError</code> if <code>cursor_ids</code> is not an instance of\n<code>list</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>cursor_ids</code>: list of cursor ids to kill</li>\n<li><code>address</code> (optional): (host, port) pair of the cursor’s server.\nIf it is not provided, the client attempts to close the cursor on\nthe primary or standalone, or a mongos server.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.kill_cursors
pymongo.mongo_replica_set_client.MongoReplicaSetClient.set_cursor_manager	A										<section class="prog_container"><pre><code><code>set_cursor_manager</code>(<em>manager_class</em>)</pre></code><p><p>DEPRECATED - Set this client’s cursor manager.</p>\n<p>Raises <code>TypeError</code> if <code>manager_class</code> is not a subclass of\n<code>CursorManager</code>. A cursor manager\nhandles closing cursors. Different managers can implement different\npolicies in terms of when to actually kill a cursor that has\nbeen closed.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>manager_class</code>: cursor manager to use</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.set_cursor_manager
pymongo.mongo_replica_set_client.MongoReplicaSetClient.primary	A										<section class="prog_container"><pre><code><code>primary</code></pre></code><p><p>The (host, port) of the current primary of the replica set.</p>\n<p>Returns <code>None</code> if this client is not connected to a replica set,\nthere is no primary, or this client was created without the\n<code>replicaSet</code> option.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.primary
pymongo.mongo_replica_set_client.MongoReplicaSetClient.secondaries	A										<section class="prog_container"><pre><code><code>secondaries</code></pre></code><p><p>The secondary members known to this client.</p>\n<p>A sequence of (host, port) pairs. Empty if this client is not\nconnected to a replica set, there are no visible secondaries, or this\nclient was created without the <code>replicaSet</code> option.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.secondaries
pymongo.mongo_replica_set_client.MongoReplicaSetClient.arbiters	A										<section class="prog_container"><pre><code><code>arbiters</code></pre></code><p><p>Arbiters in the replica set.</p>\n<p>A sequence of (host, port) pairs. Empty if this client is not\nconnected to a replica set, there are no arbiters, or this client was\ncreated without the <code>replicaSet</code> option.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.arbiters
pymongo.mongo_replica_set_client.MongoReplicaSetClient.max_pool_size	A										<section class="prog_container"><pre><code><code>max_pool_size</code></pre></code><p><p>The maximum allowable number of concurrent connections to each\nconnected server. Requests to a server will block if there are\n<code>maxPoolSize</code> outstanding connections to the requested server.\nDefaults to 100. Cannot be 0.</p>\n<p>When a server’s pool has reached <code>max_pool_size</code>, operations for that\nserver block waiting for a socket to be returned to the pool. If\n<code>waitQueueTimeoutMS</code> is set, a blocked operation will raise\n<code>ConnectionFailure</code> after a timeout.\nBy default <code>waitQueueTimeoutMS</code> is not set.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.max_pool_size
pymongo.mongo_replica_set_client.MongoReplicaSetClient.max_bson_size	A										<section class="prog_container"><pre><code><code>max_bson_size</code></pre></code><p><p>The largest BSON object the connected server accepts in bytes.</p>\n<p>If the client is not connected, this will block until a connection is\nestablished or raise ServerSelectionTimeoutError if no server is\navailable.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.max_bson_size
pymongo.mongo_replica_set_client.MongoReplicaSetClient.max_message_size	A										<section class="prog_container"><pre><code><code>max_message_size</code></pre></code><p><p>The largest message the connected server accepts in bytes.</p>\n<p>If the client is not connected, this will block until a connection is\nestablished or raise ServerSelectionTimeoutError if no server is\navailable.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.max_message_size
pymongo.mongo_replica_set_client.MongoReplicaSetClient.local_threshold_ms	A										<section class="prog_container"><pre><code><code>local_threshold_ms</code></pre></code><p><p>The local threshold for this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.local_threshold_ms
pymongo.mongo_replica_set_client.MongoReplicaSetClient.codec_options	A										<section class="prog_container"><pre><code><code>codec_options</code></pre></code><p><p>Read only access to the <code>CodecOptions</code>\nof this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.codec_options
pymongo.mongo_replica_set_client.MongoReplicaSetClient.read_preference	A										<section class="prog_container"><pre><code><code>read_preference</code></pre></code><p><p>Read only access to the read preference of this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.read_preference
pymongo.mongo_replica_set_client.MongoReplicaSetClient.write_concern	A										<section class="prog_container"><pre><code><code>write_concern</code></pre></code><p><p>Read only access to the <code>WriteConcern</code>\nof this instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient.write_concern
pymongo.mongo_replica_set_client.MongoReplicaSetClient	A										<section class="prog_container"><pre><code><em>class </em>pymongo.mongo_replica_set_client.MongoReplicaSetClient(<em>hosts_or_uri</em>, <em>document_class=dict</em>, <em>tz_aware=False</em>, <em>connect=True</em>, <em>**kwargs</em>)</pre></code><p><p>Deprecated alias for <code>MongoClient</code>.</p>\n<p><code>MongoReplicaSetClient</code>\nwill be removed in a future version of PyMongo.</p>\n<dl class="describe">\n<dt>\n<code>c[db_name] || c.db_name</code></dt>\n<dd><p>Get the <code>db_name</code> <code>Database</code> on <code>MongoReplicaSetClient</code> <code>c</code>.</p>\n<p>Raises <code>InvalidName</code> if an invalid database name is used.</p>\n</dd></dl></p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient
pymongo.operations.DeleteMany	A										<section class="prog_container"><pre><code><em>class </em>pymongo.operations.DeleteMany(<em>filter</em>)</pre></code><p><p>Create a DeleteMany instance.</p>\n<p>For use with <code>bulk_write()</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the documents to delete.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.DeleteMany
pymongo.operations.DeleteOne	A										<section class="prog_container"><pre><code><em>class </em>pymongo.operations.DeleteOne(<em>filter</em>)</pre></code><p><p>Create a DeleteOne instance.</p>\n<p>For use with <code>bulk_write()</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the document to delete.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.DeleteOne
pymongo.operations.IndexModel.document	A										<section class="prog_container"><pre><code><code>document</code></pre></code><p><p>An index document suitable for passing to the createIndexes\ncommand.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.IndexModel.document
pymongo.operations.IndexModel	A										<section class="prog_container"><pre><code><em>class </em>pymongo.operations.IndexModel(<em>keys</em>, <em>**kwargs</em>)</pre></code><p><p>Create an Index instance.</p>\n<p>For use with <code>create_indexes()</code>.</p>\n<p>Takes either a single key or a list of (key, direction) pairs.\nThe key(s) must be an instance of <code>basestring</code>\n(<code>str</code> in python 3), and the direction(s) must be one of\n(<code>ASCENDING</code>, <code>DESCENDING</code>,\n<code>GEO2D</code>, <code>GEOHAYSTACK</code>,\n<code>GEOSPHERE</code>, <code>HASHED</code>,\n<code>TEXT</code>).</p>\n<p>Valid options include, but are not limited to:</p>\n<ul class="simple">\n<li><code>name</code>: custom name to use for this index - if none is\ngiven, a name will be generated.</li>\n<li><code>unique</code>: if <code>True</code> creates a uniqueness constraint on the index.</li>\n<li><code>background</code>: if <code>True</code> this index should be created in the\nbackground.</li>\n<li><code>sparse</code>: if <code>True</code>, omit from the index any documents that lack\nthe indexed field.</li>\n<li><code>bucketSize</code>: for use with geoHaystack indexes.\nNumber of documents to group together within a certain proximity\nto a given longitude and latitude.</li>\n<li><code>min</code>: minimum value for keys in a <code>GEO2D</code>\nindex.</li>\n<li><code>max</code>: maximum value for keys in a <code>GEO2D</code>\nindex.</li>\n<li><code>expireAfterSeconds</code>: &lt;int&gt; Used to create an expiring (TTL)\ncollection. MongoDB will automatically delete documents from\nthis collection after &lt;int&gt; seconds. The indexed field must\nbe a UTC datetime or the data will not expire.</li>\n<li><code>partialFilterExpression</code>: A document that specifies a filter for\na partial index.</li>\n<li><code>collation</code>: An instance of <code>~pymongo.collation.Collation</code> that\nspecifies the collation to use in MongoDB &gt;= 3.4.</li>\n</ul>\n<p>See the MongoDB documentation for a full list of supported options by\nserver version.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>keys</code>: a single key or a list of (key, direction)\npairs specifying the index to create</li>\n<li><code>**kwargs</code> (optional): any additional index creation\noptions (see the above list) should be passed as keyword\narguments</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.IndexModel
pymongo.operations.InsertOne	A										<section class="prog_container"><pre><code><em>class </em>pymongo.operations.InsertOne(<em>document</em>)</pre></code><p><p>Create an InsertOne instance.</p>\n<p>For use with <code>bulk_write()</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>document</code>: The document to insert. If the document is missing an\n_id field one will be added.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.InsertOne
pymongo.operations.ReplaceOne	A										<section class="prog_container"><pre><code><em>class </em>pymongo.operations.ReplaceOne(<em>filter</em>, <em>replacement</em>, <em>upsert=False</em>)</pre></code><p><p>Create a ReplaceOne instance.</p>\n<p>For use with <code>bulk_write()</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the document to replace.</li>\n<li><code>replacement</code>: The new document.</li>\n<li><code>upsert</code> (optional): If <code>True</code>, perform an insert if no documents\nmatch the filter.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.ReplaceOne
pymongo.operations.UpdateMany	A										<section class="prog_container"><pre><code><em>class </em>pymongo.operations.UpdateMany(<em>filter</em>, <em>update</em>, <em>upsert=False</em>)</pre></code><p><p>Create an UpdateMany instance.</p>\n<p>For use with <code>bulk_write()</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the documents to update.</li>\n<li><code>update</code>: The modifications to apply.</li>\n<li><code>upsert</code> (optional): If <code>True</code>, perform an insert if no documents\nmatch the filter.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.UpdateMany
pymongo.operations.UpdateOne	A										<section class="prog_container"><pre><code><em>class </em>pymongo.operations.UpdateOne(<em>filter</em>, <em>update</em>, <em>upsert=False</em>)</pre></code><p><p>Represents an update_one operation.</p>\n<p>For use with <code>bulk_write()</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: A query that matches the document to update.</li>\n<li><code>update</code>: The modifications to apply.</li>\n<li><code>upsert</code> (optional): If <code>True</code>, perform an insert if no documents\nmatch the filter.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.UpdateOne
pymongo.pool.SocketInfo.authenticate	A										<section class="prog_container"><pre><code><code>authenticate</code>(<em>credentials</em>)</pre></code><p><p>Log in to the server and store these credentials in <code>authset</code>.</p>\n<p>Can raise ConnectionFailure or OperationFailure.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>credentials</code>: A MongoCredential.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/pool.html#pymongo.pool.SocketInfo.authenticate
pymongo.pool.SocketInfo.check_auth	A										<section class="prog_container"><pre><code><code>check_auth</code>(<em>all_credentials</em>)</pre></code><p><p>Update this socket’s authentication.</p>\n<p>Log in or out to bring this socket’s credentials up to date with\nthose provided. Can raise ConnectionFailure or OperationFailure.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>all_credentials</code>: dict, maps auth source to MongoCredential.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/pool.html#pymongo.pool.SocketInfo.check_auth
pymongo.pool.SocketInfo.command	A										<section class="prog_container"><pre><code><code>command</code>(<em>dbname</em>, <em>spec</em>, <em>slave_ok=False</em>, <em>read_preference=Primary()</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>, <em>check=True</em>, <em>allowable_errors=None</em>, <em>check_keys=False</em>, <em>read_concern=ReadConcern()</em>, <em>write_concern=None</em>, <em>parse_write_concern_error=False</em>, <em>collation=None</em>)</pre></code><p><p>Execute a command or raise ConnectionFailure or OperationFailure.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>dbname</code>: name of the database on which to run the command</li>\n<li><code>spec</code>: a command document as a dict, SON, or mapping object</li>\n<li><code>slave_ok</code>: whether to set the SlaveOkay wire protocol bit</li>\n<li><code>read_preference</code>: a read preference</li>\n<li><code>codec_options</code>: a CodecOptions instance</li>\n<li><code>check</code>: raise OperationFailure if there are errors</li>\n<li><code>allowable_errors</code>: errors to ignore if <code>check</code> is True</li>\n<li><code>check_keys</code>: if True, check <code>spec</code> for invalid keys</li>\n<li><code>read_concern</code>: The read concern for this command.</li>\n<li><code>write_concern</code>: The write concern for this command.</li>\n<li><code>parse_write_concern_error</code>: Whether to parse the\n<code>writeConcernError</code> field in the command response.</li>\n<li><code>collation</code>: The collation for this command.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/pool.html#pymongo.pool.SocketInfo.command
pymongo.pool.SocketInfo.legacy_write	A										<section class="prog_container"><pre><code><code>legacy_write</code>(<em>request_id</em>, <em>msg</em>, <em>max_doc_size</em>, <em>with_last_error</em>)</pre></code><p><p>Send OP_INSERT, etc., optionally returning response as a dict.</p>\n<p>Can raise ConnectionFailure or OperationFailure.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>request_id</code>: an int.</li>\n<li><code>msg</code>: bytes, an OP_INSERT, OP_UPDATE, or OP_DELETE message,\nperhaps with a getlasterror command appended.</li>\n<li><code>max_doc_size</code>: size in bytes of the largest document in <code>msg</code>.</li>\n<li><code>with_last_error</code>: True if a getlasterror command is appended.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/pool.html#pymongo.pool.SocketInfo.legacy_write
pymongo.pool.SocketInfo.receive_message	A										<section class="prog_container"><pre><code><code>receive_message</code>(<em>operation</em>, <em>request_id</em>)</pre></code><p><p>Receive a raw BSON message or raise ConnectionFailure.</p>\n<p>If any exception is raised, the socket is closed.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/pool.html#pymongo.pool.SocketInfo.receive_message
pymongo.pool.SocketInfo.send_message	A										<section class="prog_container"><pre><code><code>send_message</code>(<em>message</em>, <em>max_doc_size</em>)</pre></code><p><p>Send a raw BSON message or raise ConnectionFailure.</p>\n<p>If a network exception is raised, the socket is closed.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/pool.html#pymongo.pool.SocketInfo.send_message
pymongo.pool.SocketInfo.write_command	A										<section class="prog_container"><pre><code><code>write_command</code>(<em>request_id</em>, <em>msg</em>)</pre></code><p><p>Send “insert” etc. command, returning response as a dict.</p>\n<p>Can raise ConnectionFailure or OperationFailure.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>request_id</code>: an int.</li>\n<li><code>msg</code>: bytes, the command message.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/pool.html#pymongo.pool.SocketInfo.write_command
pymongo.pool.SocketInfo	A										<section class="prog_container"><pre><code><em>class </em>pymongo.pool.SocketInfo(<em>sock</em>, <em>pool</em>, <em>ismaster</em>, <em>address</em>)</pre></code><p><p>Store a socket with some metadata.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>sock</code>: a raw socket object</li>\n<li><code>pool</code>: a Pool instance</li>\n<li><code>ismaster</code>: optional IsMaster instance, response to ismaster on <code>sock</code></li>\n<li><code>address</code>: the server’s (host, port)</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/pool.html#pymongo.pool.SocketInfo
pymongo.read_concern.ReadConcern.document	A										<section class="prog_container"><pre><code><code>document</code></pre></code><p><p>The document representation of this read concern.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_concern.html#pymongo.read_concern.ReadConcern.document
pymongo.read_concern.ReadConcern.level	A										<section class="prog_container"><pre><code><code>level</code></pre></code><p><p>The read concern level.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_concern.html#pymongo.read_concern.ReadConcern.level
pymongo.read_concern.ReadConcern.ok_for_legacy	A										<section class="prog_container"><pre><code><code>ok_for_legacy</code></pre></code><p><p>Return <code>True</code> if this read concern is compatible with\nold wire protocol versions.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_concern.html#pymongo.read_concern.ReadConcern.ok_for_legacy
pymongo.read_concern.ReadConcern	A										<section class="prog_container"><pre><code><em>class </em>pymongo.read_concern.ReadConcern(<em>level=None</em>)</pre></code><p><span class="prog__sub">Parameters</span>\n<li><code>level</code>: (string) The read concern level specifies the level of\nisolation for read operations.  For example, a read operation using a\nread concern level of <code>majority</code> will only return data that has been\nwritten to a majority of nodes. If the level is left unspecified, the\nserver default will be used.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_concern.html#pymongo.read_concern.ReadConcern
pymongo.read_preferences.Primary.document	A										<section class="prog_container"><pre><code><code>document</code></pre></code><p><p>Read preference as a document.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Primary.document
pymongo.read_preferences.Primary.mode	A										<section class="prog_container"><pre><code><code>mode</code></pre></code><p><p>The mode of this read preference instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Primary.mode
pymongo.read_preferences.Primary.name	A										<section class="prog_container"><pre><code><code>name</code></pre></code><p><p>The name of this read preference.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Primary.name
pymongo.read_preferences.Primary	A										<section class="prog_container"><pre><code><em>class </em>pymongo.read_preferences.Primary</pre></code><p><p>Primary read preference.</p>\n<ul class="simple">\n<li>When directly connected to one mongod queries are allowed if the server\nis standalone or a replica set primary.</li>\n<li>When connected to a mongos queries are sent to the primary of a shard.</li>\n<li>When connected to a replica set queries are sent to the primary of\nthe replica set.</li>\n</ul></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Primary
pymongo.read_preferences.PrimaryPreferred.document	A										<section class="prog_container"><pre><code><code>document</code></pre></code><p><p>Read preference as a document.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.PrimaryPreferred.document
pymongo.read_preferences.PrimaryPreferred.max_staleness	A										<section class="prog_container"><pre><code><code>max_staleness</code></pre></code><p><p>The maximum estimated length of time (in seconds) a replica set\nsecondary can fall behind the primary in replication before it will\nno longer be selected for operations, or -1 for no maximum.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.PrimaryPreferred.max_staleness
pymongo.read_preferences.PrimaryPreferred.min_wire_version	A										<section class="prog_container"><pre><code><code>min_wire_version</code></pre></code><p><p>The wire protocol version the server must support.</p>\n<p>Some read preferences impose version requirements on all servers (e.g.\nmaxStalenessSeconds requires MongoDB 3.4 / maxWireVersion 5).</p>\n<p>All servers’ maxWireVersion must be at least this read preference’s\n<code>min_wire_version</code>, or the driver raises\n<code>ConfigurationError</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.PrimaryPreferred.min_wire_version
pymongo.read_preferences.PrimaryPreferred.mode	A										<section class="prog_container"><pre><code><code>mode</code></pre></code><p><p>The mode of this read preference instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.PrimaryPreferred.mode
pymongo.read_preferences.PrimaryPreferred.name	A										<section class="prog_container"><pre><code><code>name</code></pre></code><p><p>The name of this read preference.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.PrimaryPreferred.name
pymongo.read_preferences.PrimaryPreferred.tag_sets	A										<section class="prog_container"><pre><code><code>tag_sets</code></pre></code><p><p>Set <code>tag_sets</code> to a list of dictionaries like [{‘dc’: ‘ny’}] to\nread only from members whose <code>dc</code> tag has the value <code>"ny"</code>.\nTo specify a priority-order for tag sets, provide a list of\ntag sets: <code>[{'dc': 'ny'}, {'dc': 'la'}, {}]</code>. A final, empty tag\nset, <code>{}</code>, means “read from any member that matches the mode,\nignoring tags.” MongoReplicaSetClient tries each set of tags in turn\nuntil it finds a set of tags with at least one matching member.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.PrimaryPreferred.tag_sets
pymongo.read_preferences.PrimaryPreferred	A										<section class="prog_container"><pre><code><em>class </em>pymongo.read_preferences.PrimaryPreferred(<em>tag_sets=None</em>, <em>max_staleness=-1</em>)</pre></code><p><p>PrimaryPreferred read preference.</p>\n<ul class="simple">\n<li>When directly connected to one mongod queries are allowed to standalone\nservers, to a replica set primary, or to replica set secondaries.</li>\n<li>When connected to a mongos queries are sent to the primary of a shard if\navailable, otherwise a shard secondary.</li>\n<li>When connected to a replica set queries are sent to the primary if\navailable, otherwise a secondary.</li>\n</ul>\n<span class="prog__sub">Parameters</span>\n<li><code>tag_sets</code>: The <code>tag_sets</code> to use if the primary is not\navailable.</li>\n<li><code>max_staleness</code>: (integer, in seconds) The maximum estimated\nlength of time a replica set secondary can fall behind the primary in\nreplication before it will no longer be selected for operations.\nDefault -1, meaning no maximum. If it is set, it must be at least\n90 seconds.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.PrimaryPreferred
pymongo.read_preferences.Secondary.document	A										<section class="prog_container"><pre><code><code>document</code></pre></code><p><p>Read preference as a document.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Secondary.document
pymongo.read_preferences.Secondary.max_staleness	A										<section class="prog_container"><pre><code><code>max_staleness</code></pre></code><p><p>The maximum estimated length of time (in seconds) a replica set\nsecondary can fall behind the primary in replication before it will\nno longer be selected for operations, or -1 for no maximum.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Secondary.max_staleness
pymongo.read_preferences.Secondary.min_wire_version	A										<section class="prog_container"><pre><code><code>min_wire_version</code></pre></code><p><p>The wire protocol version the server must support.</p>\n<p>Some read preferences impose version requirements on all servers (e.g.\nmaxStalenessSeconds requires MongoDB 3.4 / maxWireVersion 5).</p>\n<p>All servers’ maxWireVersion must be at least this read preference’s\n<code>min_wire_version</code>, or the driver raises\n<code>ConfigurationError</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Secondary.min_wire_version
pymongo.read_preferences.Secondary.mode	A										<section class="prog_container"><pre><code><code>mode</code></pre></code><p><p>The mode of this read preference instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Secondary.mode
pymongo.read_preferences.Secondary.name	A										<section class="prog_container"><pre><code><code>name</code></pre></code><p><p>The name of this read preference.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Secondary.name
pymongo.read_preferences.Secondary.tag_sets	A										<section class="prog_container"><pre><code><code>tag_sets</code></pre></code><p><p>Set <code>tag_sets</code> to a list of dictionaries like [{‘dc’: ‘ny’}] to\nread only from members whose <code>dc</code> tag has the value <code>"ny"</code>.\nTo specify a priority-order for tag sets, provide a list of\ntag sets: <code>[{'dc': 'ny'}, {'dc': 'la'}, {}]</code>. A final, empty tag\nset, <code>{}</code>, means “read from any member that matches the mode,\nignoring tags.” MongoReplicaSetClient tries each set of tags in turn\nuntil it finds a set of tags with at least one matching member.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Secondary.tag_sets
pymongo.read_preferences.Secondary	A										<section class="prog_container"><pre><code><em>class </em>pymongo.read_preferences.Secondary(<em>tag_sets=None</em>, <em>max_staleness=-1</em>)</pre></code><p><p>Secondary read preference.</p>\n<ul class="simple">\n<li>When directly connected to one mongod queries are allowed to standalone\nservers, to a replica set primary, or to replica set secondaries.</li>\n<li>When connected to a mongos queries are distributed among shard\nsecondaries. An error is raised if no secondaries are available.</li>\n<li>When connected to a replica set queries are distributed among\nsecondaries. An error is raised if no secondaries are available.</li>\n</ul>\n<span class="prog__sub">Parameters</span>\n<li><code>tag_sets</code>: The <code>tag_sets</code> for this read preference.</li>\n<li><code>max_staleness</code>: (integer, in seconds) The maximum estimated\nlength of time a replica set secondary can fall behind the primary in\nreplication before it will no longer be selected for operations.\nDefault -1, meaning no maximum. If it is set, it must be at least\n90 seconds.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Secondary
pymongo.read_preferences.SecondaryPreferred.document	A										<section class="prog_container"><pre><code><code>document</code></pre></code><p><p>Read preference as a document.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.SecondaryPreferred.document
pymongo.read_preferences.SecondaryPreferred.max_staleness	A										<section class="prog_container"><pre><code><code>max_staleness</code></pre></code><p><p>The maximum estimated length of time (in seconds) a replica set\nsecondary can fall behind the primary in replication before it will\nno longer be selected for operations, or -1 for no maximum.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.SecondaryPreferred.max_staleness
pymongo.read_preferences.SecondaryPreferred.min_wire_version	A										<section class="prog_container"><pre><code><code>min_wire_version</code></pre></code><p><p>The wire protocol version the server must support.</p>\n<p>Some read preferences impose version requirements on all servers (e.g.\nmaxStalenessSeconds requires MongoDB 3.4 / maxWireVersion 5).</p>\n<p>All servers’ maxWireVersion must be at least this read preference’s\n<code>min_wire_version</code>, or the driver raises\n<code>ConfigurationError</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.SecondaryPreferred.min_wire_version
pymongo.read_preferences.SecondaryPreferred.mode	A										<section class="prog_container"><pre><code><code>mode</code></pre></code><p><p>The mode of this read preference instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.SecondaryPreferred.mode
pymongo.read_preferences.SecondaryPreferred.name	A										<section class="prog_container"><pre><code><code>name</code></pre></code><p><p>The name of this read preference.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.SecondaryPreferred.name
pymongo.read_preferences.SecondaryPreferred.tag_sets	A										<section class="prog_container"><pre><code><code>tag_sets</code></pre></code><p><p>Set <code>tag_sets</code> to a list of dictionaries like [{‘dc’: ‘ny’}] to\nread only from members whose <code>dc</code> tag has the value <code>"ny"</code>.\nTo specify a priority-order for tag sets, provide a list of\ntag sets: <code>[{'dc': 'ny'}, {'dc': 'la'}, {}]</code>. A final, empty tag\nset, <code>{}</code>, means “read from any member that matches the mode,\nignoring tags.” MongoReplicaSetClient tries each set of tags in turn\nuntil it finds a set of tags with at least one matching member.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.SecondaryPreferred.tag_sets
pymongo.read_preferences.SecondaryPreferred	A										<section class="prog_container"><pre><code><em>class </em>pymongo.read_preferences.SecondaryPreferred(<em>tag_sets=None</em>, <em>max_staleness=-1</em>)</pre></code><p><p>SecondaryPreferred read preference.</p>\n<ul class="simple">\n<li>When directly connected to one mongod queries are allowed to standalone\nservers, to a replica set primary, or to replica set secondaries.</li>\n<li>When connected to a mongos queries are distributed among shard\nsecondaries, or the shard primary if no secondary is available.</li>\n<li>When connected to a replica set queries are distributed among\nsecondaries, or the primary if no secondary is available.</li>\n</ul>\n<span class="prog__sub">Parameters</span>\n<li><code>tag_sets</code>: The <code>tag_sets</code> for this read preference.</li>\n<li><code>max_staleness</code>: (integer, in seconds) The maximum estimated\nlength of time a replica set secondary can fall behind the primary in\nreplication before it will no longer be selected for operations.\nDefault -1, meaning no maximum. If it is set, it must be at least\n90 seconds.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.SecondaryPreferred
pymongo.read_preferences.Nearest.document	A										<section class="prog_container"><pre><code><code>document</code></pre></code><p><p>Read preference as a document.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Nearest.document
pymongo.read_preferences.Nearest.max_staleness	A										<section class="prog_container"><pre><code><code>max_staleness</code></pre></code><p><p>The maximum estimated length of time (in seconds) a replica set\nsecondary can fall behind the primary in replication before it will\nno longer be selected for operations, or -1 for no maximum.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Nearest.max_staleness
pymongo.read_preferences.Nearest.min_wire_version	A										<section class="prog_container"><pre><code><code>min_wire_version</code></pre></code><p><p>The wire protocol version the server must support.</p>\n<p>Some read preferences impose version requirements on all servers (e.g.\nmaxStalenessSeconds requires MongoDB 3.4 / maxWireVersion 5).</p>\n<p>All servers’ maxWireVersion must be at least this read preference’s\n<code>min_wire_version</code>, or the driver raises\n<code>ConfigurationError</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Nearest.min_wire_version
pymongo.read_preferences.Nearest.mode	A										<section class="prog_container"><pre><code><code>mode</code></pre></code><p><p>The mode of this read preference instance.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Nearest.mode
pymongo.read_preferences.Nearest.name	A										<section class="prog_container"><pre><code><code>name</code></pre></code><p><p>The name of this read preference.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Nearest.name
pymongo.read_preferences.Nearest.tag_sets	A										<section class="prog_container"><pre><code><code>tag_sets</code></pre></code><p><p>Set <code>tag_sets</code> to a list of dictionaries like [{‘dc’: ‘ny’}] to\nread only from members whose <code>dc</code> tag has the value <code>"ny"</code>.\nTo specify a priority-order for tag sets, provide a list of\ntag sets: <code>[{'dc': 'ny'}, {'dc': 'la'}, {}]</code>. A final, empty tag\nset, <code>{}</code>, means “read from any member that matches the mode,\nignoring tags.” MongoReplicaSetClient tries each set of tags in turn\nuntil it finds a set of tags with at least one matching member.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Nearest.tag_sets
pymongo.read_preferences.Nearest	A										<section class="prog_container"><pre><code><em>class </em>pymongo.read_preferences.Nearest(<em>tag_sets=None</em>, <em>max_staleness=-1</em>)</pre></code><p><p>Nearest read preference.</p>\n<ul class="simple">\n<li>When directly connected to one mongod queries are allowed to standalone\nservers, to a replica set primary, or to replica set secondaries.</li>\n<li>When connected to a mongos queries are distributed among all members of\na shard.</li>\n<li>When connected to a replica set queries are distributed among all\nmembers.</li>\n</ul>\n<span class="prog__sub">Parameters</span>\n<li><code>tag_sets</code>: The <code>tag_sets</code> for this read preference.</li>\n<li><code>max_staleness</code>: (integer, in seconds) The maximum estimated\nlength of time a replica set secondary can fall behind the primary in\nreplication before it will no longer be selected for operations.\nDefault -1, meaning no maximum. If it is set, it must be at least\n90 seconds.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Nearest
pymongo.read_preferences.ReadPreference.PRIMARY	A										<section class="prog_container"><pre><code><code>PRIMARY</code><em> = Primary()</em></pre></code><p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.ReadPreference.PRIMARY
pymongo.read_preferences.ReadPreference.PRIMARY_PREFERRED	A										<section class="prog_container"><pre><code><code>PRIMARY_PREFERRED</code><em> = PrimaryPreferred(tag_sets=None, max_staleness=-1)</em></pre></code><p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.ReadPreference.PRIMARY_PREFERRED
pymongo.read_preferences.ReadPreference.SECONDARY	A										<section class="prog_container"><pre><code><code>SECONDARY</code><em> = Secondary(tag_sets=None, max_staleness=-1)</em></pre></code><p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.ReadPreference.SECONDARY
pymongo.read_preferences.ReadPreference.SECONDARY_PREFERRED	A										<section class="prog_container"><pre><code><code>SECONDARY_PREFERRED</code><em> = SecondaryPreferred(tag_sets=None, max_staleness=-1)</em></pre></code><p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.ReadPreference.SECONDARY_PREFERRED
pymongo.read_preferences.ReadPreference.NEAREST	A										<section class="prog_container"><pre><code><code>NEAREST</code><em> = Nearest(tag_sets=None, max_staleness=-1)</em></pre></code><p></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.ReadPreference.NEAREST
pymongo.read_preferences.ReadPreference	A										<section class="prog_container"><pre><code><em>class </em>pymongo.read_preferences.ReadPreference</pre></code><p><p>An enum that defines the read preference modes supported by PyMongo.</p>\n<p>See <em>High Availability and PyMongo</em> for code examples.</p>\n<p>A read preference is used in three cases:</p>\n<p><code>MongoClient</code> connected to a single mongod:</p>\n<ul class="simple">\n<li><code>PRIMARY</code>: Queries are allowed if the server is standalone or a replica\nset primary.</li>\n<li>All other modes allow queries to standalone servers, to a replica set\nprimary, or to replica set secondaries.</li>\n</ul>\n<p><code>MongoClient</code> initialized with the\n<code>replicaSet</code> option:</p>\n<ul class="simple">\n<li><code>PRIMARY</code>: Read from the primary. This is the default, and provides the\nstrongest consistency. If no primary is available, raise\n<code>AutoReconnect</code>.</li>\n<li><code>PRIMARY_PREFERRED</code>: Read from the primary if available, or if there is\nnone, read from a secondary.</li>\n<li><code>SECONDARY</code>: Read from a secondary. If no secondary is available,\nraise <code>AutoReconnect</code>.</li>\n<li><code>SECONDARY_PREFERRED</code>: Read from a secondary if available, otherwise\nfrom the primary.</li>\n<li><code>NEAREST</code>: Read from any member.</li>\n</ul>\n<p><code>MongoClient</code> connected to a mongos, with a\nsharded cluster of replica sets:</p>\n<ul class="simple">\n<li><code>PRIMARY</code>: Read from the primary of the shard, or raise\n<code>OperationFailure</code> if there is none.\nThis is the default.</li>\n<li><code>PRIMARY_PREFERRED</code>: Read from the primary of the shard, or if there is\nnone, read from a secondary of the shard.</li>\n<li><code>SECONDARY</code>: Read from a secondary of the shard, or raise\n<code>OperationFailure</code> if there is none.</li>\n<li><code>SECONDARY_PREFERRED</code>: Read from a secondary of the shard if available,\notherwise from the shard primary.</li>\n<li><code>NEAREST</code>: Read from any shard member.</li>\n</ul></p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.ReadPreference
pymongo.results.BulkWriteResult.acknowledged	A										<section class="prog_container"><pre><code><code>acknowledged</code></pre></code><p><p>Is this the result of an acknowledged write operation?</p>\n<p>The <code>acknowledged</code> attribute will be <code>False</code> when using\n<code>WriteConcern(w=0)</code>, otherwise <code>True</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.BulkWriteResult.acknowledged
pymongo.results.BulkWriteResult.bulk_api_result	A										<section class="prog_container"><pre><code><code>bulk_api_result</code></pre></code><p><p>The raw bulk API result.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.BulkWriteResult.bulk_api_result
pymongo.results.BulkWriteResult.deleted_count	A										<section class="prog_container"><pre><code><code>deleted_count</code></pre></code><p><p>The number of documents deleted.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.BulkWriteResult.deleted_count
pymongo.results.BulkWriteResult.inserted_count	A										<section class="prog_container"><pre><code><code>inserted_count</code></pre></code><p><p>The number of documents inserted.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.BulkWriteResult.inserted_count
pymongo.results.BulkWriteResult.matched_count	A										<section class="prog_container"><pre><code><code>matched_count</code></pre></code><p><p>The number of documents matched for an update.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.BulkWriteResult.matched_count
pymongo.results.BulkWriteResult.modified_count	A										<section class="prog_container"><pre><code><code>modified_count</code></pre></code><p><p>The number of documents modified.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.BulkWriteResult.modified_count
pymongo.results.BulkWriteResult.upserted_count	A										<section class="prog_container"><pre><code><code>upserted_count</code></pre></code><p><p>The number of documents upserted.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.BulkWriteResult.upserted_count
pymongo.results.BulkWriteResult.upserted_ids	A										<section class="prog_container"><pre><code><code>upserted_ids</code></pre></code><p><p>A map of operation index to the _id of the upserted document.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.BulkWriteResult.upserted_ids
pymongo.results.BulkWriteResult	A										<section class="prog_container"><pre><code><em>class </em>pymongo.results.BulkWriteResult(<em>bulk_api_result</em>, <em>acknowledged</em>)</pre></code><p><p>Create a BulkWriteResult instance.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>bulk_api_result</code>: A result dict from the bulk API</li>\n<li><code>acknowledged</code>: Was this write result acknowledged? If <code>False</code>\nthen all properties of this object will raise\n<code>InvalidOperation</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.BulkWriteResult
pymongo.results.DeleteResult.acknowledged	A										<section class="prog_container"><pre><code><code>acknowledged</code></pre></code><p><p>Is this the result of an acknowledged write operation?</p>\n<p>The <code>acknowledged</code> attribute will be <code>False</code> when using\n<code>WriteConcern(w=0)</code>, otherwise <code>True</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.DeleteResult.acknowledged
pymongo.results.DeleteResult.deleted_count	A										<section class="prog_container"><pre><code><code>deleted_count</code></pre></code><p><p>The number of documents deleted.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.DeleteResult.deleted_count
pymongo.results.DeleteResult.raw_result	A										<section class="prog_container"><pre><code><code>raw_result</code></pre></code><p><p>The raw result document returned by the server.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.DeleteResult.raw_result
pymongo.results.DeleteResult	A										<section class="prog_container"><pre><code><em>class </em>pymongo.results.DeleteResult(<em>raw_result</em>, <em>acknowledged</em>)</pre></code><p><p>The return type for <code>delete_one()</code>\nand <code>delete_many()</code></p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.DeleteResult
pymongo.results.InsertManyResult.acknowledged	A										<section class="prog_container"><pre><code><code>acknowledged</code></pre></code><p><p>Is this the result of an acknowledged write operation?</p>\n<p>The <code>acknowledged</code> attribute will be <code>False</code> when using\n<code>WriteConcern(w=0)</code>, otherwise <code>True</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.InsertManyResult.acknowledged
pymongo.results.InsertManyResult.inserted_ids	A										<section class="prog_container"><pre><code><code>inserted_ids</code></pre></code><p><p>A list of _ids of the inserted documents, in the order provided.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.InsertManyResult.inserted_ids
pymongo.results.InsertManyResult	A										<section class="prog_container"><pre><code><em>class </em>pymongo.results.InsertManyResult(<em>inserted_ids</em>, <em>acknowledged</em>)</pre></code><p><p>The return type for <code>insert_many()</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.InsertManyResult
pymongo.results.InsertOneResult.acknowledged	A										<section class="prog_container"><pre><code><code>acknowledged</code></pre></code><p><p>Is this the result of an acknowledged write operation?</p>\n<p>The <code>acknowledged</code> attribute will be <code>False</code> when using\n<code>WriteConcern(w=0)</code>, otherwise <code>True</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.InsertOneResult.acknowledged
pymongo.results.InsertOneResult.inserted_id	A										<section class="prog_container"><pre><code><code>inserted_id</code></pre></code><p><p>The inserted document’s _id.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.InsertOneResult.inserted_id
pymongo.results.InsertOneResult	A										<section class="prog_container"><pre><code><em>class </em>pymongo.results.InsertOneResult(<em>inserted_id</em>, <em>acknowledged</em>)</pre></code><p><p>The return type for <code>insert_one()</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.InsertOneResult
pymongo.results.UpdateResult.acknowledged	A										<section class="prog_container"><pre><code><code>acknowledged</code></pre></code><p><p>Is this the result of an acknowledged write operation?</p>\n<p>The <code>acknowledged</code> attribute will be <code>False</code> when using\n<code>WriteConcern(w=0)</code>, otherwise <code>True</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.UpdateResult.acknowledged
pymongo.results.UpdateResult.matched_count	A										<section class="prog_container"><pre><code><code>matched_count</code></pre></code><p><p>The number of documents matched for this update.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.UpdateResult.matched_count
pymongo.results.UpdateResult.modified_count	A										<section class="prog_container"><pre><code><code>modified_count</code></pre></code><p><p>The number of documents modified.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.UpdateResult.modified_count
pymongo.results.UpdateResult.raw_result	A										<section class="prog_container"><pre><code><code>raw_result</code></pre></code><p><p>The raw result document returned by the server.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.UpdateResult.raw_result
pymongo.results.UpdateResult.upserted_id	A										<section class="prog_container"><pre><code><code>upserted_id</code></pre></code><p><p>The _id of the inserted document if an upsert took place. Otherwise\n<code>None</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.UpdateResult.upserted_id
pymongo.results.UpdateResult	A										<section class="prog_container"><pre><code><em>class </em>pymongo.results.UpdateResult(<em>raw_result</em>, <em>acknowledged</em>)</pre></code><p><p>The return type for <code>update_one()</code>,\n<code>update_many()</code>, and\n<code>replace_one()</code>.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.UpdateResult
pymongo.son_manipulator.AutoReference.transform_incoming	A										<section class="prog_container"><pre><code><code>transform_incoming</code>(<em>son</em>, <em>collection</em>)</pre></code><p><p>Replace embedded documents with DBRefs.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.AutoReference.transform_incoming
pymongo.son_manipulator.AutoReference.transform_outgoing	A										<section class="prog_container"><pre><code><code>transform_outgoing</code>(<em>son</em>, <em>collection</em>)</pre></code><p><p>Replace DBRefs with embedded documents.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.AutoReference.transform_outgoing
pymongo.son_manipulator.AutoReference.will_copy	A										<section class="prog_container"><pre><code><code>will_copy</code>()</pre></code><p><p>We need to copy so the user’s document doesn’t get transformed refs.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.AutoReference.will_copy
pymongo.son_manipulator.AutoReference	A										<section class="prog_container"><pre><code><em>class </em>pymongo.son_manipulator.AutoReference(<em>db</em>)</pre></code><p><p>Transparently reference and de-reference already saved embedded objects.</p>\n<p>This manipulator should probably only be used when the NamespaceInjector is\nalso being used, otherwise it doesn’t make too much sense - documents can\nonly be auto-referenced if they have an <em>_ns</em> field.</p>\n<p>NOTE: this will behave poorly if you have a circular reference.</p>\n<p>TODO: this only works for documents that are in the same database. To fix\nthis we’ll need to add a DatabaseInjector that adds <em>_db</em> and then make\nuse of the optional <em>database</em> support for DBRefs.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.AutoReference
pymongo.son_manipulator.NamespaceInjector.transform_incoming	A										<section class="prog_container"><pre><code><code>transform_incoming</code>(<em>son</em>, <em>collection</em>)</pre></code><p><p>Add the _ns field to the incoming object</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.NamespaceInjector.transform_incoming
pymongo.son_manipulator.NamespaceInjector	A										<section class="prog_container"><pre><code><em>class </em>pymongo.son_manipulator.NamespaceInjector</pre></code><p><p>A son manipulator that adds the _ns field.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.NamespaceInjector
pymongo.son_manipulator.ObjectIdInjector.transform_incoming	A										<section class="prog_container"><pre><code><code>transform_incoming</code>(<em>son</em>, <em>collection</em>)</pre></code><p><p>Add an _id field if it is missing.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.ObjectIdInjector.transform_incoming
pymongo.son_manipulator.ObjectIdInjector	A										<section class="prog_container"><pre><code><em>class </em>pymongo.son_manipulator.ObjectIdInjector</pre></code><p><p>A son manipulator that adds the _id field if it is missing.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.ObjectIdInjector
pymongo.son_manipulator.ObjectIdShuffler.transform_incoming	A										<section class="prog_container"><pre><code><code>transform_incoming</code>(<em>son</em>, <em>collection</em>)</pre></code><p><p>Move _id to the front if it’s there.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.ObjectIdShuffler.transform_incoming
pymongo.son_manipulator.ObjectIdShuffler.will_copy	A										<section class="prog_container"><pre><code><code>will_copy</code>()</pre></code><p><p>We need to copy to be sure that we are dealing with SON, not a dict.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.ObjectIdShuffler.will_copy
pymongo.son_manipulator.ObjectIdShuffler	A										<section class="prog_container"><pre><code><em>class </em>pymongo.son_manipulator.ObjectIdShuffler</pre></code><p><p>A son manipulator that moves _id to the first position.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.ObjectIdShuffler
pymongo.son_manipulator.SONManipulator.transform_incoming	A										<section class="prog_container"><pre><code><code>transform_incoming</code>(<em>son</em>, <em>collection</em>)</pre></code><p><p>Manipulate an incoming SON object.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>son</code>: the SON object to be inserted into the database</li>\n<li><code>collection</code>: the collection the object is being inserted into</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.SONManipulator.transform_incoming
pymongo.son_manipulator.SONManipulator.transform_outgoing	A										<section class="prog_container"><pre><code><code>transform_outgoing</code>(<em>son</em>, <em>collection</em>)</pre></code><p><p>Manipulate an outgoing SON object.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>son</code>: the SON object being retrieved from the database</li>\n<li><code>collection</code>: the collection this object was stored in</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.SONManipulator.transform_outgoing
pymongo.son_manipulator.SONManipulator.will_copy	A										<section class="prog_container"><pre><code><code>will_copy</code>()</pre></code><p><p>Will this SON manipulator make a copy of the incoming document?</p>\n<p>Derived classes that do need to make a copy should override this\nmethod, returning True instead of False. All non-copying manipulators\nwill be applied first (so that the user’s document will be updated\nappropriately), followed by copying manipulators.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.SONManipulator.will_copy
pymongo.son_manipulator.SONManipulator	A										<section class="prog_container"><pre><code><em>class </em>pymongo.son_manipulator.SONManipulator</pre></code><p><p>A base son manipulator.</p>\n<p>This manipulator just saves and restores objects without changing them.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.SONManipulator
pymongo.cursor_manager.CursorManager.close	A										<section class="prog_container"><pre><code><code>close</code>(<em>cursor_id</em>, <em>address</em>)</pre></code><p><p>Kill a cursor.</p>\n<p>Raises TypeError if cursor_id is not an instance of (int, long).</p>\n<span class="prog__sub">Parameters</span>\n<li><code>cursor_id</code>: cursor id to close</li>\n<li><code>address</code>: the cursor’s server’s (host, port) pair</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor_manager.html#pymongo.cursor_manager.CursorManager.close
pymongo.cursor_manager.CursorManager	A										<section class="prog_container"><pre><code><em>class </em>pymongo.cursor_manager.CursorManager(<em>client</em>)</pre></code><p><p>Instantiate the manager.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>client</code>: a MongoClient</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor_manager.html#pymongo.cursor_manager.CursorManager
pymongo.uri_parser.parse_host	A										<section class="prog_container"><pre><code>pymongo.uri_parser.parse_host(<em>entity</em>, <em>default_port=27017</em>)</pre></code><p><p>Validates a host string</p>\n<p>Returns a 2-tuple of host followed by port where port is default_port\nif it wasn’t specified in the string.</p>\n<span class="prog__sub">Parameters</span>\n<li><dl class="first docutils">\n<dt><code>entity</code>: A host or host:port string where host could be a</dt>\n<dd>\n</dd>\n</dl>\n</li>\n<li><dl class="first docutils">\n<dt><code>default_port</code>: The port number to use when one wasn’t</dt>\n<dd>\n</dd>\n</dl>\n</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.parse_host
pymongo.uri_parser.parse_ipv6_literal_host	A										<section class="prog_container"><pre><code>pymongo.uri_parser.parse_ipv6_literal_host(<em>entity</em>, <em>default_port</em>)</pre></code><p><p>Validates an IPv6 literal host:port string.</p>\n<p>Returns a 2-tuple of IPv6 literal followed by port where\nport is default_port if it wasn’t specified in entity.</p>\n<span class="prog__sub">Parameters</span>\n<li><dl class="first docutils">\n<dt><code>entity</code>: A string that represents an IPv6 literal enclosed</dt>\n<dd>\n</dd>\n</dl>\n</li>\n<li><dl class="first docutils">\n<dt><code>default_port</code>: The port number to use when one wasn’t</dt>\n<dd>\n</dd>\n</dl>\n</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.parse_ipv6_literal_host
pymongo.uri_parser.parse_uri	A										<section class="prog_container"><pre><code>pymongo.uri_parser.parse_uri(<em>uri</em>, <em>default_port=27017</em>, <em>validate=True</em>, <em>warn=False</em>)</pre></code><p><p>Parse and validate a MongoDB URI.</p>\n<p>Returns a dict of the form:</p>\n<pre>{\n    'nodelist': &lt;list of (host, port) tuples&gt;,\n    'username': &lt;username&gt; or None,\n    'password': &lt;password&gt; or None,\n    'database': &lt;database name&gt; or None,\n    'collection': &lt;collection name&gt; or None,\n    'options': &lt;dict of MongoDB URI options&gt;\n}\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>uri</code>: The MongoDB URI to parse.</li>\n<li><code>default_port</code>: The port number to use when one wasn’t specified\nfor a host in the URI.</li>\n<li><code>validate</code>: If <code>True</code> (the default), validate and normalize all\noptions.</li>\n<li><code>warn</code> (optional): When validating, if <code>True</code> then will warn\nthe user then ignore any invalid options or values. If <code>False</code>,\nvalidation will error when options are unsupported or values are\ninvalid.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.parse_uri
pymongo.uri_parser.parse_userinfo	A										<section class="prog_container"><pre><code>pymongo.uri_parser.parse_userinfo(<em>userinfo</em>)</pre></code><p><p>Validates the format of user information in a MongoDB URI.\nReserved characters like ‘:’, ‘/’, ‘+’ and ‘@’ must be escaped\nfollowing RFC 2396.</p>\n<p>Returns a 2-tuple containing the unescaped username followed\nby the unescaped password.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>userinfo</code>: A string of the form &lt;username&gt;:&lt;password&gt;</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.parse_userinfo
pymongo.uri_parser.split_hosts	A										<section class="prog_container"><pre><code>pymongo.uri_parser.split_hosts(<em>hosts</em>, <em>default_port=27017</em>)</pre></code><p><p>Takes a string of the form host1[:port],host2[:port]... and\nsplits it into (host, port) tuples. If [:port] isn’t present the\ndefault_port is used.</p>\n<p>Returns a set of 2-tuples containing the host name (or IP) followed by\nport number.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>hosts</code>: A string of the form host1[:port],host2[:port],...</li>\n<li><code>default_port</code>: The port number to use when one wasn’t specified\nfor a host.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.split_hosts
pymongo.uri_parser.split_options	A										<section class="prog_container"><pre><code>pymongo.uri_parser.split_options(<em>opts</em>, <em>validate=True</em>, <em>warn=False</em>)</pre></code><p><p>Takes the options portion of a MongoDB URI, validates each option\nand returns the options in a dictionary.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>opt</code>: A string representing MongoDB URI options.</li>\n<li><code>validate</code>: If <code>True</code> (the default), validate and normalize all\noptions.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.split_options
pymongo.uri_parser.validate_options	A										<section class="prog_container"><pre><code>pymongo.uri_parser.validate_options(<em>opts</em>, <em>warn=False</em>)</pre></code><p><p>Validates and normalizes options passed in a MongoDB URI.</p>\n<p>Returns a new dictionary of validated and normalized options. If warn is\nFalse then errors will be thrown for invalid options, otherwise they will\nbe ignored and a warning will be issued.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>opts</code>: A dict of MongoDB URI options.</li>\n<li><code>warn</code> (optional): If <code>True</code> then warnigns will be logged and\ninvalid options will be ignored. Otherwise invalid options will\ncause errors.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.validate_options
pymongo.write_concern.WriteConcern.acknowledged	A										<section class="prog_container"><pre><code><code>acknowledged</code></pre></code><p><p>If <code>True</code> write operations will wait for acknowledgement before\nreturning.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/write_concern.html#pymongo.write_concern.WriteConcern.acknowledged
pymongo.write_concern.WriteConcern.document	A										<section class="prog_container"><pre><code><code>document</code></pre></code><p><p>The document representation of this write concern.</p></p></section>	http://api.mongodb.com/python/current/api/pymongo/write_concern.html#pymongo.write_concern.WriteConcern.document
pymongo.write_concern.WriteConcern	A										<section class="prog_container"><pre><code><em>class </em>pymongo.write_concern.WriteConcern(<em>w=None</em>, <em>wtimeout=None</em>, <em>j=None</em>, <em>fsync=None</em>)</pre></code><p><span class="prog__sub">Parameters</span>\n<li><code>w</code>: (integer or string) Used with replication, write operations\nwill block until they have been replicated to the specified number\nor tagged set of servers. <code>w=&lt;integer&gt;</code> always includes the replica\nset primary (e.g. w=3 means write to the primary and wait until\nreplicated to <strong>two</strong> secondaries). <strong>w=0 disables acknowledgement\nof write operations and can not be used with other write concern\noptions.</strong></li>\n<li><code>wtimeout</code>: (integer) Used in conjunction with <code>w</code>. Specify a value\nin milliseconds to control how long to wait for write propagation\nto complete. If replication does not complete in the given\ntimeframe, a timeout exception is raised.</li>\n<li><code>j</code>: If <code>True</code> block until write operations have been committed\nto the journal. Cannot be used in combination with <code>fsync</code>. Prior\nto MongoDB 2.6 this option was ignored if the server was running\nwithout journaling. Starting with MongoDB 2.6 write operations will\nfail with an exception if this option is used when the server is\nrunning without journaling.</li>\n<li><code>fsync</code>: If <code>True</code> and the server is running without journaling,\nblocks until the server has synced all data files to disk. If the\nserver is running with journaling, this acts the same as the <code>j</code>\noption, blocking until write operations have been committed to the\njournal. Cannot be used in combination with <code>j</code>.</li></p></section>	http://api.mongodb.com/python/current/api/pymongo/write_concern.html#pymongo.write_concern.WriteConcern
gridfs.GridFS.delete	A										<section class="prog_container"><pre><code><code>delete</code>(<em>file_id</em>)</pre></code><p><p>Delete a file from GridFS by <code>"_id"</code>.</p>\n<p>Deletes all data belonging to the file with <code>"_id"</code>:\n<code>file_id</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>file_id</code>: <code>"_id"</code> of the file to delete</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS.delete
gridfs.GridFS.exists	A										<section class="prog_container"><pre><code><code>exists</code>(<em>document_or_id=None</em>, <em>**kwargs</em>)</pre></code><p><p>Check if a file exists in this instance of <code>GridFS</code>.</p>\n<p>The file to check for can be specified by the value of its\n<code>_id</code> key, or by passing in a query document. A query\ndocument can be passed in as dictionary, or by using keyword\narguments. Thus, the following three calls are equivalent:</p>\n<pre>&gt;&gt;&gt; fs.exists(file_id)\n&gt;&gt;&gt; fs.exists({"_id": file_id})\n&gt;&gt;&gt; fs.exists(_id=file_id)\n</pre>\n<p>As are the following two calls:</p>\n<pre>&gt;&gt;&gt; fs.exists({"filename": "mike.txt"})\n&gt;&gt;&gt; fs.exists(filename="mike.txt")\n</pre>\n<p>And the following two:</p>\n<pre>&gt;&gt;&gt; fs.exists({"foo": {"$gt": 12}})\n&gt;&gt;&gt; fs.exists(foo={"$gt": 12})\n</pre>\n<p>Returns <code>True</code> if a matching file exists, <code>False</code>\notherwise. Calls to <code>exists()</code> will not automatically\ncreate appropriate indexes; application developers should be\nsure to create indexes if needed and as appropriate.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>document_or_id</code> (optional): query document, or _id of the\ndocument to check for</li>\n<li><code>**kwargs</code> (optional): keyword arguments are used as a\nquery document, if they’re present.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS.exists
gridfs.GridFS.find	A										<section class="prog_container"><pre><code><code>find</code>(<em>*args</em>, <em>**kwargs</em>)</pre></code><p><p>Query GridFS for files.</p>\n<p>Returns a cursor that iterates across files matching\narbitrary queries on the files collection. Can be combined\nwith other modifiers for additional control. For example:</p>\n<pre>for grid_out in fs.find({"filename": "lisa.txt"},\n                        no_cursor_timeout=True):\n    data = grid_out.read()\n</pre>\n<p>would iterate through all versions of “lisa.txt” stored in GridFS.\nNote that setting no_cursor_timeout to True may be important to\nprevent the cursor from timing out during long multi-file processing\nwork.</p>\n<p>As another example, the call:</p>\n<pre>most_recent_three = fs.find().sort("uploadDate", -1).limit(3)\n</pre>\n<p>would return a cursor to the three most recently uploaded files\nin GridFS.</p>\n<p>Follows a similar interface to\n<code>find()</code>\nin <code>Collection</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code> (optional): a SON object specifying elements which\nmust be present for a document to be included in the\nresult set</li>\n<li><code>skip</code> (optional): the number of files to omit (from\nthe start of the result set) when returning the results</li>\n<li><code>limit</code> (optional): the maximum number of results to\nreturn</li>\n<li><code>no_cursor_timeout</code> (optional): if False (the default), any\nreturned cursor is closed by the server after 10 minutes of\ninactivity. If set to True, the returned cursor will never\ntime out on the server. Care should be taken to ensure that\ncursors with no_cursor_timeout turned on are properly closed.</li>\n<li><code>sort</code> (optional): a list of (key, direction) pairs\nspecifying the sort order for this query. See\n<code>sort()</code> for details.</li>\n<p>Raises <code>TypeError</code> if any of the arguments are of\nimproper type. Returns an instance of\n<code>GridOutCursor</code>\ncorresponding to this query.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS.find
gridfs.GridFS.find_one	A										<section class="prog_container"><pre><code><code>find_one</code>(<em>filter=None</em>, <em>*args</em>, <em>**kwargs</em>)</pre></code><p><p>Get a single file from gridfs.</p>\n<p>All arguments to <code>find()</code> are also valid arguments for\n<code>find_one()</code>, although any <code>limit</code> argument will be\nignored. Returns a single <code>GridOut</code>,\nor <code>None</code> if no matching file is found. For example:</p>\n<pre>file = fs.find_one({"filename": "lisa.txt"})\n</pre>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code> (optional): a dictionary specifying\nthe query to be performing OR any other type to be used as\nthe value for a query for <code>"_id"</code> in the file collection.</li>\n<li><code>*args</code> (optional): any additional positional arguments are\nthe same as the arguments to <code>find()</code>.</li>\n<li><code>**kwargs</code> (optional): any additional keyword arguments\nare the same as the arguments to <code>find()</code>.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS.find_one
gridfs.GridFS.get	A										<section class="prog_container"><pre><code><code>get</code>(<em>file_id</em>)</pre></code><p><p>Get a file from GridFS by <code>"_id"</code>.</p>\n<p>Returns an instance of <code>GridOut</code>,\nwhich provides a file-like interface for reading.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>file_id</code>: <code>"_id"</code> of the file to get</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS.get
gridfs.GridFS.get_last_version	A										<section class="prog_container"><pre><code><code>get_last_version</code>(<em>filename=None</em>, <em>**kwargs</em>)</pre></code><p><p>Get the most recent version of a file in GridFS by <code>"filename"</code>\nor metadata fields.</p>\n<p>Equivalent to calling <code>get_version()</code> with the default\n<code>version</code> (<code>-1</code>).</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filename</code>: <code>"filename"</code> of the file to get, or <code>None</code></li>\n<li><code>**kwargs</code> (optional): find files by custom metadata.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS.get_last_version
gridfs.GridFS.get_version	A										<section class="prog_container"><pre><code><code>get_version</code>(<em>filename=None</em>, <em>version=-1</em>, <em>**kwargs</em>)</pre></code><p><p>Get a file from GridFS by <code>"filename"</code> or metadata fields.</p>\n<p>Returns a version of the file in GridFS whose filename matches\n<code>filename</code> and whose metadata fields match the supplied keyword\narguments, as an instance of <code>GridOut</code>.</p>\n<p>Version numbering is a convenience atop the GridFS API provided\nby MongoDB. If more than one file matches the query (either by\n<code>filename</code> alone, by metadata fields, or by a combination of\nboth), then version <code>-1</code> will be the most recently uploaded\nmatching file, <code>-2</code> the second most recently\nuploaded, etc. Version <code>0</code> will be the first version\nuploaded, <code>1</code> the second version, etc. So if three versions\nhave been uploaded, then version <code>0</code> is the same as version\n<code>-3</code>, version <code>1</code> is the same as version <code>-2</code>, and\nversion <code>2</code> is the same as version <code>-1</code>.</p>\n<p>Raises <code>NoFile</code> if no such version of\nthat file exists.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filename</code>: <code>"filename"</code> of the file to get, or <code>None</code></li>\n<li><code>version</code> (optional): version of the file to get (defaults\nto -1, the most recent version uploaded)</li>\n<li><code>**kwargs</code> (optional): find files by custom metadata.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS.get_version
gridfs.GridFS.list	A										<section class="prog_container"><pre><code><code>list</code>()</pre></code><p><p>List the names of all files stored in this instance of\n<code>GridFS</code>.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS.list
gridfs.GridFS.new_file	A										<section class="prog_container"><pre><code><code>new_file</code>(<em>**kwargs</em>)</pre></code><p><p>Create a new file in GridFS.</p>\n<p>Returns a new <code>GridIn</code> instance to\nwhich data can be written. Any keyword arguments will be\npassed through to <code>GridIn()</code>.</p>\n<p>If the <code>"_id"</code> of the file is manually specified, it must\nnot already exist in GridFS. Otherwise\n<code>FileExists</code> is raised.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>**kwargs</code> (optional): keyword arguments for file creation</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS.new_file
gridfs.GridFS.put	A										<section class="prog_container"><pre><code><code>put</code>(<em>data</em>, <em>**kwargs</em>)</pre></code><p><p>Put data in GridFS as a new file.</p>\n<p>Equivalent to doing:</p>\n<pre>try:\n    f = new_file(**kwargs)\n    f.write(data)\nfinally:\n    f.close()\n</pre>\n<p><code>data</code> can be either an instance of <code>str</code> (<code>bytes</code>\nin python 3) or a file-like object providing a <code>read()</code> method.\nIf an <code>encoding</code> keyword argument is passed, <code>data</code> can also be a\n<code>unicode</code> (<code>str</code> in python 3) instance, which will\nbe encoded as <code>encoding</code> before being written. Any keyword arguments\nwill be passed through to the created file - see\n<code>GridIn()</code> for possible arguments. Returns the\n<code>"_id"</code> of the created file.</p>\n<p>If the <code>"_id"</code> of the file is manually specified, it must\nnot already exist in GridFS. Otherwise\n<code>FileExists</code> is raised.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>data</code>: data to be written as a file.</li>\n<li><code>**kwargs</code> (optional): keyword arguments for file creation</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS.put
gridfs.GridFS	A										<section class="prog_container"><pre><code><em>class </em>gridfs.GridFS(<em>database</em>, <em>collection='fs'</em>)</pre></code><p><p>Create a new instance of <code>GridFS</code>.</p>\n<p>Raises <code>TypeError</code> if <code>database</code> is not an instance of\n<code>Database</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>database</code>: database to use</li>\n<li><code>collection</code> (optional): root collection to use</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS
gridfs.GridFSBucket.delete	A										<section class="prog_container"><pre><code><code>delete</code>(<em>file_id</em>)</pre></code><p><p>Given an file_id, delete this stored file’s files collection document\nand associated chunks from a GridFS bucket.</p>\n<p>For example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\n# Get _id of file to delete\nfile_id = fs.upload_from_stream("test_file", "data I want to store!")\nfs.delete(file_id)\n</pre>\n<p>Raises <code>NoFile</code> if no file with file_id exists.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>file_id</code>: The _id of the file to be deleted.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket.delete
gridfs.GridFSBucket.download_to_stream	A										<section class="prog_container"><pre><code><code>download_to_stream</code>(<em>file_id</em>, <em>destination</em>)</pre></code><p><p>Downloads the contents of the stored file specified by file_id and\nwrites the contents to <code>destination</code>.</p>\n<p>For example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\n# Get _id of file to read\nfile_id = fs.upload_from_stream("test_file", "data I want to store!")\n# Get file to write to\nfile = open('myfile','wb+')\nfs.download_to_stream(file_id, file)\nfile.seek(0)\ncontents = file.read()\n</pre>\n<p>Raises <code>NoFile</code> if no file with file_id exists.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>file_id</code>: The _id of the file to be downloaded.</li>\n<li><code>destination</code>: a file-like object implementing <code>write()</code>.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket.download_to_stream
gridfs.GridFSBucket.download_to_stream_by_name	A										<section class="prog_container"><pre><code><code>download_to_stream_by_name</code>(<em>filename</em>, <em>destination</em>, <em>revision=-1</em>)</pre></code><p><p>Write the contents of <code>filename</code> (with optional <code>revision</code>) to\n<code>destination</code>.</p>\n<p>For example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\n# Get file to write to\nfile = open('myfile','wb')\nfs.download_to_stream_by_name("test_file", file)\n</pre>\n<p>Raises <code>NoFile</code> if no such version of\nthat file exists.</p>\n<p>Raises <code>ValueError</code> if <code>filename</code> is not a string.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filename</code>: The name of the file to read from.</li>\n<li><code>destination</code>: A file-like object that implements <code>write()</code>.</li>\n<li><code>revision</code> (optional): Which revision (documents with the same\nfilename and different uploadDate) of the file to retrieve.\nDefaults to -1 (the most recent revision).</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket.download_to_stream_by_name
gridfs.GridFSBucket.find	A										<section class="prog_container"><pre><code><code>find</code>(<em>*args</em>, <em>**kwargs</em>)</pre></code><p><p>Find and return the files collection documents that match <code>filter</code></p>\n<p>Returns a cursor that iterates across files matching\narbitrary queries on the files collection. Can be combined\nwith other modifiers for additional control.</p>\n<p>For example:</p>\n<pre>for grid_data in fs.find({"filename": "lisa.txt"},\n                        no_cursor_timeout=True):\n    data = grid_data.read()\n</pre>\n<p>would iterate through all versions of “lisa.txt” stored in GridFS.\nNote that setting no_cursor_timeout to True may be important to\nprevent the cursor from timing out during long multi-file processing\nwork.</p>\n<p>As another example, the call:</p>\n<pre>most_recent_three = fs.find().sort("uploadDate", -1).limit(3)\n</pre>\n<p>would return a cursor to the three most recently uploaded files\nin GridFS.</p>\n<p>Follows a similar interface to\n<code>find()</code>\nin <code>Collection</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filter</code>: Search query.</li>\n<li><code>batch_size</code> (optional): The number of documents to return per\nbatch.</li>\n<li><code>limit</code> (optional): The maximum number of documents to return.</li>\n<li><code>no_cursor_timeout</code> (optional): The server normally times out idle\ncursors after an inactivity period (10 minutes) to prevent excess\nmemory use. Set this option to True prevent that.</li>\n<li><code>skip</code> (optional): The number of documents to skip before\nreturning.</li>\n<li><code>sort</code> (optional): The order by which to sort results. Defaults to\nNone.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket.find
gridfs.GridFSBucket.open_download_stream	A										<section class="prog_container"><pre><code><code>open_download_stream</code>(<em>file_id</em>)</pre></code><p><p>Opens a Stream from which the application can read the contents of\nthe stored file specified by file_id.</p>\n<p>For example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\n# get _id of file to read.\nfile_id = fs.upload_from_stream("test_file", "data I want to store!")\ngrid_out = fs.open_download_stream(file_id)\ncontents = grid_out.read()\n</pre>\n<p>Returns an instance of <code>GridOut</code>.</p>\n<p>Raises <code>NoFile</code> if no file with file_id exists.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>file_id</code>: The _id of the file to be downloaded.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket.open_download_stream
gridfs.GridFSBucket.open_download_stream_by_name	A										<section class="prog_container"><pre><code><code>open_download_stream_by_name</code>(<em>filename</em>, <em>revision=-1</em>)</pre></code><p><p>Opens a Stream from which the application can read the contents of\n<code>filename</code> and optional <code>revision</code>.</p>\n<p>For example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\ngrid_out = fs.open_download_stream_by_name("test_file")\ncontents = grid_out.read()\n</pre>\n<p>Returns an instance of <code>GridOut</code>.</p>\n<p>Raises <code>NoFile</code> if no such version of\nthat file exists.</p>\n<p>Raises <code>ValueError</code> filename is not a string.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filename</code>: The name of the file to read from.</li>\n<li><code>revision</code> (optional): Which revision (documents with the same\nfilename and different uploadDate) of the file to retrieve.\nDefaults to -1 (the most recent revision).</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket.open_download_stream_by_name
gridfs.GridFSBucket.open_upload_stream	A										<section class="prog_container"><pre><code><code>open_upload_stream</code>(<em>filename</em>, <em>chunk_size_bytes=None</em>, <em>metadata=None</em>)</pre></code><p><p>Opens a Stream that the application can write the contents of the\nfile to.</p>\n<p>The user must specify the filename, and can choose to add any\nadditional information in the metadata field of the file document or\nmodify the chunk size.\nFor example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\ngrid_in, file_id = fs.open_upload_stream(\n      "test_file", chunk_size_bytes=4,\n      metadata={"contentType": "text/plain"})\ngrid_in.write("data I want to store!")\ngrid_in.close()  # uploaded on close\n</pre>\n<p>Returns an instance of <code>GridIn</code>.</p>\n<p>Raises <code>NoFile</code> if no such version of\nthat file exists.\nRaises <code>ValueError</code> if <code>filename</code> is not a string.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filename</code>: The name of the file to upload.</li>\n<li><code>chunk_size_bytes</code> (options): The number of bytes per chunk of this\nfile. Defaults to the chunk_size_bytes in <code>GridFSBucket</code>.</li>\n<li><code>metadata</code> (optional): User data for the ‘metadata’ field of the\nfiles collection document. If not provided the metadata field will\nbe omitted from the files collection document.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket.open_upload_stream
gridfs.GridFSBucket.open_upload_stream_with_id	A										<section class="prog_container"><pre><code><code>open_upload_stream_with_id</code>(<em>file_id</em>, <em>filename</em>, <em>chunk_size_bytes=None</em>, <em>metadata=None</em>)</pre></code><p><p>Opens a Stream that the application can write the contents of the\nfile to.</p>\n<p>The user must specify the file id and filename, and can choose to add\nany additional information in the metadata field of the file document\nor modify the chunk size.\nFor example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\ngrid_in, file_id = fs.open_upload_stream(\n      ObjectId(),\n      "test_file",\n      chunk_size_bytes=4,\n      metadata={"contentType": "text/plain"})\ngrid_in.write("data I want to store!")\ngrid_in.close()  # uploaded on close\n</pre>\n<p>Returns an instance of <code>GridIn</code>.</p>\n<p>Raises <code>NoFile</code> if no such version of\nthat file exists.\nRaises <code>ValueError</code> if <code>filename</code> is not a string.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>file_id</code>: The id to use for this file. The id must not have\nalready been used for another file.</li>\n<li><code>filename</code>: The name of the file to upload.</li>\n<li><code>chunk_size_bytes</code> (options): The number of bytes per chunk of this\nfile. Defaults to the chunk_size_bytes in <code>GridFSBucket</code>.</li>\n<li><code>metadata</code> (optional): User data for the ‘metadata’ field of the\nfiles collection document. If not provided the metadata field will\nbe omitted from the files collection document.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket.open_upload_stream_with_id
gridfs.GridFSBucket.rename	A										<section class="prog_container"><pre><code><code>rename</code>(<em>file_id</em>, <em>new_filename</em>)</pre></code><p><p>Renames the stored file with the specified file_id.</p>\n<p>For example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\n# Get _id of file to rename\nfile_id = fs.upload_from_stream("test_file", "data I want to store!")\nfs.rename(file_id, "new_test_name")\n</pre>\n<p>Raises <code>NoFile</code> if no file with file_id exists.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>file_id</code>: The _id of the file to be renamed.</li>\n<li><code>new_filename</code>: The new name of the file.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket.rename
gridfs.GridFSBucket.upload_from_stream	A										<section class="prog_container"><pre><code><code>upload_from_stream</code>(<em>filename</em>, <em>source</em>, <em>chunk_size_bytes=None</em>, <em>metadata=None</em>)</pre></code><p><p>Uploads a user file to a GridFS bucket.</p>\n<p>Reads the contents of the user file from <code>source</code> and uploads\nit to the file <code>filename</code>. Source can be a string or file-like object.\nFor example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\nfile_id = fs.upload_from_stream(\n    "test_file",\n    "data I want to store!",\n    chunk_size_bytes=4,\n    metadata={"contentType": "text/plain"})\n</pre>\n<p>Returns the _id of the uploaded file.</p>\n<p>Raises <code>NoFile</code> if no such version of\nthat file exists.\nRaises <code>ValueError</code> if <code>filename</code> is not a string.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>filename</code>: The name of the file to upload.</li>\n<li><code>source</code>: The source stream of the content to be uploaded. Must be\na file-like object that implements <code>read()</code> or a string.</li>\n<li><code>chunk_size_bytes</code> (options): The number of bytes per chunk of this\nfile. Defaults to the chunk_size_bytes of <code>GridFSBucket</code>.</li>\n<li><code>metadata</code> (optional): User data for the ‘metadata’ field of the\nfiles collection document. If not provided the metadata field will\nbe omitted from the files collection document.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket.upload_from_stream
gridfs.GridFSBucket.upload_from_stream_with_id	A										<section class="prog_container"><pre><code><code>upload_from_stream_with_id</code>(<em>file_id</em>, <em>filename</em>, <em>source</em>, <em>chunk_size_bytes=None</em>, <em>metadata=None</em>)</pre></code><p><p>Uploads a user file to a GridFS bucket with a custom file id.</p>\n<p>Reads the contents of the user file from <code>source</code> and uploads\nit to the file <code>filename</code>. Source can be a string or file-like object.\nFor example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\nfile_id = fs.upload_from_stream(\n    ObjectId(),\n    "test_file",\n    "data I want to store!",\n    chunk_size_bytes=4,\n    metadata={"contentType": "text/plain"})\n</pre>\n<p>Raises <code>NoFile</code> if no such version of\nthat file exists.\nRaises <code>ValueError</code> if <code>filename</code> is not a string.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>file_id</code>: The id to use for this file. The id must not have\nalready been used for another file.</li>\n<li><code>filename</code>: The name of the file to upload.</li>\n<li><code>source</code>: The source stream of the content to be uploaded. Must be\na file-like object that implements <code>read()</code> or a string.</li>\n<li><code>chunk_size_bytes</code> (options): The number of bytes per chunk of this\nfile. Defaults to the chunk_size_bytes of <code>GridFSBucket</code>.</li>\n<li><code>metadata</code> (optional): User data for the ‘metadata’ field of the\nfiles collection document. If not provided the metadata field will\nbe omitted from the files collection document.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket.upload_from_stream_with_id
gridfs.GridFSBucket	A										<section class="prog_container"><pre><code><em>class </em>gridfs.GridFSBucket(<em>db</em>, <em>bucket_name='fs'</em>, <em>chunk_size_bytes=261120</em>, <em>write_concern=None</em>, <em>read_preference=None</em>)</pre></code><p><p>Create a new instance of <code>GridFSBucket</code>.</p>\n<p>Raises <code>TypeError</code> if <code>database</code> is not an instance of\n<code>Database</code>.</p>\n<p>Raises <code>ConfigurationError</code> if <code>write_concern</code>\nis not acknowledged.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>database</code>: database to use.</li>\n<li><code>bucket_name</code> (optional): The name of the bucket. Defaults to ‘fs’.</li>\n<li><code>chunk_size_bytes</code> (optional): The chunk size in bytes. Defaults\nto 255KB.</li>\n<li><code>write_concern</code> (optional): The\n<code>WriteConcern</code> to use. If <code>None</code>\n(the default) db.write_concern is used.</li>\n<li><code>read_preference</code> (optional): The read preference to use. If\n<code>None</code> (the default) db.read_preference is used.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket
gridfs.errors.CorruptGridFile	A										<section class="prog_container"><pre><code><em>exception </em>gridfs.errors.CorruptGridFile</pre></code><p><p>Raised when a file in <code>GridFS</code> is malformed.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/errors.html#gridfs.errors.CorruptGridFile
gridfs.errors.FileExists	A										<section class="prog_container"><pre><code><em>exception </em>gridfs.errors.FileExists</pre></code><p><p>Raised when trying to create a file that already exists.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/errors.html#gridfs.errors.FileExists
gridfs.errors.GridFSError	A										<section class="prog_container"><pre><code><em>exception </em>gridfs.errors.GridFSError</pre></code><p><p>Base class for all GridFS exceptions.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/errors.html#gridfs.errors.GridFSError
gridfs.errors.NoFile	A										<section class="prog_container"><pre><code><em>exception </em>gridfs.errors.NoFile</pre></code><p><p>Raised when trying to read from a non-existent file.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/errors.html#gridfs.errors.NoFile
gridfs.grid_file.GridIn.abort	A										<section class="prog_container"><pre><code><code>abort</code>()</pre></code><p><p>Remove all chunks/files that may have been uploaded and close.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn.abort
gridfs.grid_file.GridIn.close	A										<section class="prog_container"><pre><code><code>close</code>()</pre></code><p><p>Flush the file and close it.</p>\n<p>A closed file cannot be written any more. Calling\n<code>close()</code> more than once is allowed.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn.close
gridfs.grid_file.GridIn.write	A										<section class="prog_container"><pre><code><code>write</code>(<em>data</em>)</pre></code><p><p>Write data to the file. There is no return value.</p>\n<p><code>data</code> can be either a string of bytes or a file-like object\n(implementing <code>read()</code>). If the file has an\n<code>encoding</code> attribute, <code>data</code> can also be a\n<code>unicode</code> (<code>str</code> in python 3) instance, which\nwill be encoded as <code>encoding</code> before being written.</p>\n<p>Due to buffering, the data may not actually be written to the\ndatabase until the <code>close()</code> method is called. Raises\n<code>ValueError</code> if this file is already closed. Raises\n<code>TypeError</code> if <code>data</code> is not an instance of\n<code>str</code> (<code>bytes</code> in python 3), a file-like object,\nor an instance of <code>unicode</code> (<code>str</code> in python 3).\nUnicode data is only allowed if the file has an <code>encoding</code>\nattribute.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>data</code>: string of bytes or file-like object to be written\nto the file</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn.write
gridfs.grid_file.GridIn.writelines	A										<section class="prog_container"><pre><code><code>writelines</code>(<em>sequence</em>)</pre></code><p><p>Write a sequence of strings to the file.</p>\n<p>Does not add seperators.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn.writelines
gridfs.grid_file.GridIn._id	A										<section class="prog_container"><pre><code><code>_id</code></pre></code><p><p>The <code>'_id'</code> value for this file.</p>\n<p>This attribute is read-only.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn._id
gridfs.grid_file.GridIn.chunk_size	A										<section class="prog_container"><pre><code><code>chunk_size</code></pre></code><p><p>Chunk size for this file.</p>\n<p>This attribute is read-only.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn.chunk_size
gridfs.grid_file.GridIn.closed	A										<section class="prog_container"><pre><code><code>closed</code></pre></code><p><p>Is this file closed?</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn.closed
gridfs.grid_file.GridIn.content_type	A										<section class="prog_container"><pre><code><code>content_type</code></pre></code><p><p>Mime-type for this file.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn.content_type
gridfs.grid_file.GridIn.filename	A										<section class="prog_container"><pre><code><code>filename</code></pre></code><p><p>Name of this file.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn.filename
gridfs.grid_file.GridIn.length	A										<section class="prog_container"><pre><code><code>length</code></pre></code><p><p>Length (in bytes) of this file.</p>\n<p>This attribute is read-only and can only be read after <code>close()</code> has been called.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn.length
gridfs.grid_file.GridIn.md5	A										<section class="prog_container"><pre><code><code>md5</code></pre></code><p><p>MD5 of the contents of this file (generated on the server).</p>\n<p>This attribute is read-only and can only be read after <code>close()</code> has been called.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn.md5
gridfs.grid_file.GridIn.name	A										<section class="prog_container"><pre><code><code>name</code></pre></code><p><p>Alias for <code>filename</code>.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn.name
gridfs.grid_file.GridIn.upload_date	A										<section class="prog_container"><pre><code><code>upload_date</code></pre></code><p><p>Date that this file was uploaded.</p>\n<p>This attribute is read-only and can only be read after <code>close()</code> has been called.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn.upload_date
gridfs.grid_file.GridIn	A										<section class="prog_container"><pre><code><em>class </em>gridfs.grid_file.GridIn(<em>root_collection</em>, <em>**kwargs</em>)</pre></code><p><p>Write a file to GridFS</p>\n<p>Application developers should generally not need to\ninstantiate this class directly - instead see the methods\nprovided by <code>GridFS</code>.</p>\n<p>Raises <code>TypeError</code> if <code>root_collection</code> is not an\ninstance of <code>Collection</code>.</p>\n<p>Any of the file level options specified in the GridFS Spec may be passed as\nkeyword arguments. Any additional keyword arguments will be\nset as additional fields on the file document. Valid keyword\narguments include:</p>\n<ul class="simple">\n<li><code>"_id"</code>: unique ID for this file (default:\n<code>ObjectId</code>) - this <code>"_id"</code> must\nnot have already been used for another file</li>\n<li><code>"filename"</code>: human name for the file</li>\n<li><code>"contentType"</code> or <code>"content_type"</code>: valid mime-type\nfor the file</li>\n<li><code>"chunkSize"</code> or <code>"chunk_size"</code>: size of each of the\nchunks, in bytes (default: 255 kb)</li>\n<li><code>"encoding"</code>: encoding used for this file. In Python 2,\nany <code>unicode</code> that is written to the file will be\nconverted to a <code>str</code>. In Python 3, any <code>str</code>\nthat is written to the file will be converted to\n<code>bytes</code>.</li>\n</ul>\n<span class="prog__sub">Parameters</span>\n<li><code>root_collection</code>: root collection to write to</li>\n<li><code>**kwargs</code> (optional): file level options (see above)</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn
gridfs.grid_file.GridOut.__iter__	A										<section class="prog_container"><pre><code><code>__iter__</code>()</pre></code><p><p>Return an iterator over all of this file’s data.</p>\n<p>The iterator will return chunk-sized instances of\n<code>str</code> (<code>bytes</code> in python 3). This can be\nuseful when serving files using a webserver that handles\nsuch an iterator efficiently.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.__iter__
gridfs.grid_file.GridOut.close	A										<section class="prog_container"><pre><code><code>close</code>()</pre></code><p><p>Make GridOut more generically file-like.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.close
gridfs.grid_file.GridOut.read	A										<section class="prog_container"><pre><code><code>read</code>(<em>size=-1</em>)</pre></code><p><p>Read at most <code>size</code> bytes from the file (less if there\nisn’t enough data).</p>\n<p>The bytes are returned as an instance of <code>str</code> (<code>bytes</code>\nin python 3). If <code>size</code> is negative or omitted all data is read.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>size</code> (optional): the number of bytes to read</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.read
gridfs.grid_file.GridOut.readchunk	A										<section class="prog_container"><pre><code><code>readchunk</code>()</pre></code><p><p>Reads a chunk at a time. If the current position is within a\nchunk the remainder of the chunk is returned.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.readchunk
gridfs.grid_file.GridOut.readline	A										<section class="prog_container"><pre><code><code>readline</code>(<em>size=-1</em>)</pre></code><p><p>Read one line or up to <code>size</code> bytes from the file.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>size</code> (optional): the maximum number of bytes to read</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.readline
gridfs.grid_file.GridOut.seek	A										<section class="prog_container"><pre><code><code>seek</code>(<em>pos</em>, <em>whence=0</em>)</pre></code><p><p>Set the current position of this file.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>pos</code>: the position (or offset if using relative\npositioning) to seek to</li>\n<li><code>whence</code> (optional): where to seek\nfrom. <code>os.SEEK_SET</code> (<code>0</code>) for absolute file\npositioning, <code>os.SEEK_CUR</code> (<code>1</code>) to seek relative\nto the current position, <code>os.SEEK_END</code> (<code>2</code>) to\nseek relative to the file’s end.</li></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.seek
gridfs.grid_file.GridOut.tell	A										<section class="prog_container"><pre><code><code>tell</code>()</pre></code><p><p>Return the current position of this file.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.tell
gridfs.grid_file.GridOut._id	A										<section class="prog_container"><pre><code><code>_id</code></pre></code><p><p>The <code>'_id'</code> value for this file.</p>\n<p>This attribute is read-only.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut._id
gridfs.grid_file.GridOut.aliases	A										<section class="prog_container"><pre><code><code>aliases</code></pre></code><p><p>List of aliases for this file.</p>\n<p>This attribute is read-only.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.aliases
gridfs.grid_file.GridOut.chunk_size	A										<section class="prog_container"><pre><code><code>chunk_size</code></pre></code><p><p>Chunk size for this file.</p>\n<p>This attribute is read-only.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.chunk_size
gridfs.grid_file.GridOut.content_type	A										<section class="prog_container"><pre><code><code>content_type</code></pre></code><p><p>Mime-type for this file.</p>\n<p>This attribute is read-only.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.content_type
gridfs.grid_file.GridOut.filename	A										<section class="prog_container"><pre><code><code>filename</code></pre></code><p><p>Name of this file.</p>\n<p>This attribute is read-only.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.filename
gridfs.grid_file.GridOut.length	A										<section class="prog_container"><pre><code><code>length</code></pre></code><p><p>Length (in bytes) of this file.</p>\n<p>This attribute is read-only.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.length
gridfs.grid_file.GridOut.md5	A										<section class="prog_container"><pre><code><code>md5</code></pre></code><p><p>MD5 of the contents of this file (generated on the server).</p>\n<p>This attribute is read-only.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.md5
gridfs.grid_file.GridOut.metadata	A										<section class="prog_container"><pre><code><code>metadata</code></pre></code><p><p>Metadata attached to this file.</p>\n<p>This attribute is read-only.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.metadata
gridfs.grid_file.GridOut.name	A										<section class="prog_container"><pre><code><code>name</code></pre></code><p><p>Alias for <code>filename</code>.</p>\n<p>This attribute is read-only.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.name
gridfs.grid_file.GridOut.upload_date	A										<section class="prog_container"><pre><code><code>upload_date</code></pre></code><p><p>Date that this file was first uploaded.</p>\n<p>This attribute is read-only.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut.upload_date
gridfs.grid_file.GridOut	A										<section class="prog_container"><pre><code><em>class </em>gridfs.grid_file.GridOut(<em>root_collection</em>, <em>file_id=None</em>, <em>file_document=None</em>)</pre></code><p><p>Read a file from GridFS</p>\n<p>Application developers should generally not need to\ninstantiate this class directly - instead see the methods\nprovided by <code>GridFS</code>.</p>\n<p>Either <code>file_id</code> or <code>file_document</code> must be specified,\n<code>file_document</code> will be given priority if present. Raises\n<code>TypeError</code> if <code>root_collection</code> is not an instance of\n<code>Collection</code>.</p>\n<span class="prog__sub">Parameters</span>\n<li><code>root_collection</code>: root collection to read from</li>\n<li><code>file_id</code> (optional): value of <code>"_id"</code> for the file to read</li>\n<li><code>file_document</code> (optional): file document from\n<code>root_collection.files</code></li></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut
gridfs.grid_file.GridOutCursor.next	A										<section class="prog_container"><pre><code><code>next</code>()</pre></code><p><p>Get next GridOut object from cursor.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOutCursor.next
gridfs.grid_file.GridOutCursor	A										<section class="prog_container"><pre><code><em>class </em>gridfs.grid_file.GridOutCursor(<em>collection</em>, <em>filter=None</em>, <em>skip=0</em>, <em>limit=0</em>, <em>no_cursor_timeout=False</em>, <em>sort=None</em>, <em>batch_size=0</em>)</pre></code><p><p>Create a new cursor, similar to the normal\n<code>Cursor</code>.</p>\n<p>Should not be called directly by application developers - see\nthe <code>GridFS</code> method <code>find()</code> instead.</p></p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOutCursor
